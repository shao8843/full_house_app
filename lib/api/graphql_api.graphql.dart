// GENERATED CODE - DO NOT MODIFY BY HAND

import 'package:meta/meta.dart';
import 'package:artemis/artemis.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:equatable/equatable.dart';
import 'package:gql/ast.dart';
import 'package:full_house_app/utils/coercers.dart';
import 'package:http/http.dart';
part 'graphql_api.graphql.g.dart';

mixin UserAgreementSimpleMixin {
  String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;
  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;
  bool value;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
}
mixin QuestionnaireAnswerSimpleMixin {
  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;
  String id;
  String name;
  QuestionnaireAnswerSimpleMixin$Questionnaire questionnaire;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  QuestionnaireAnswerSimpleMixin$User user;
  bool submitted;
  Object data;
}
mixin QuestionnaireSimpleMixin {
  String id;
  @JsonKey(name: '__typename')
  String $$typename;
  String provider;
  String data;
  String name;
  String displayName;
}
mixin UserSimpleMixin {
  String id;
  String username;
  String fullName;
  String email;
  String name;
  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;
  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;
  UserSimpleMixin$Image image;
  UserSimpleMixin$Role role;
  bool confirmed;
}
mixin ArticleSimpleMixin {
  String id;
  String name;
  List<ArticleSimpleMixin$Media> media;
  @JsonKey(
      name: 'published_at',
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime publishedAt;
  ArticleSimpleMixin$Post post;
}
mixin PostComponentSimpleMixin {
  String id;
  String title;
  String subtitle;
  List<PostComponentSimpleMixin$Medias> medias;
  List<PostComponentSimpleMixin$Categories> categories;
  bool recommended;
  @JsonKey(
      name: 'updated_day',
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime updatedDay;
  @JsonKey(name: 'vip_color')
  PostComponentSimpleMixin$VipColor vipColor;
  @JsonKey(name: 'cover_background_color')
  PostComponentSimpleMixin$CoverBackgroundColor coverBackgroundColor;
  double price;
  PostComponentSimpleMixin$Trademark trademark;
  PostComponentSimpleMixin$Currency currency;
  PostComponentSimpleMixin$Author author;
  String vipText;
  double prePrice;
  int rating;
  bool needShipping;
}
mixin CategoryDetailMixin {
  String id;
  String name;
  @JsonKey(unknownEnumValue: CategoryType.artemisUnknown)
  CategoryType type;
}
mixin CurrencyMixin {
  String code;
  @JsonKey(name: 'decimal_digits')
  int decimalDigits;
  String id;
  String name;
  @JsonKey(name: 'name_plural')
  String namePlural;
  int rounding;
  String symbol;
  @JsonKey(name: 'symbol_native')
  String symbolNative;
}
mixin AssessmentQuestionnaireSimpleMixin {
  String name;
  String id;
  AssessmentQuestionnaireSimpleMixin$Post post;
  bool questionnaireOnly;
}
mixin BookDetailMixin {
  String content;
}
mixin BookSimpleMixin {
  String name;
  String id;
  BookSimpleMixin$Post post;
}
mixin ChildInfoSimpleMixin {
  String id;
  @JsonKey(unknownEnumValue: RelationType.artemisUnknown)
  RelationType relationToUser;
  ChildInfoSimpleMixin$Teacher teacher;
  ChildInfoSimpleMixin$Parent parent;
}
mixin UserDetailMixin {
  String id;
  String fullName;
  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;
  String username;
  String name;
  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;
  String email;
  UserDetailMixin$Image image;
  bool blocked;
  bool confirmed;
  String countryCode;
  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;
  @JsonKey(name: 'organization_units')
  List<UserDetailMixin$OrganizationUnits> organizationUnits;
  String phone;
  String provider;
  String qrUrl;
  @JsonKey(name: 'second_email')
  String secondEmail;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  UserDetailMixin$Role role;
  String content;
}
mixin CounselorInfoSimpleMixin {
  String id;
  CounselorInfoSimpleMixin$Location location;
}
mixin LocationSimpleMixin {
  String id;
  String name;
  String address;
}
mixin PatientInfoSimpleMixin {
  String id;
  String name;
  PatientInfoSimpleMixin$Doctor doctor;
  PatientInfoSimpleMixin$Nurse nurse;
  PatientInfoSimpleMixin$Counselor counselor;
  String meetingId;
  List<PatientInfoSimpleMixin$Ehrs> ehrs;
  PatientInfoSimpleMixin$User user;
}
mixin DoctorInfoSimpleMixin {
  String id;
  DoctorInfoSimpleMixin$Location location;
  @JsonKey(unknownEnumValue: DoctorSubject.artemisUnknown)
  DoctorSubject subject;
}
mixin NurseInfoSimpleMixin {
  String id;
  NurseInfoSimpleMixin$Location location;
}
mixin EhrSimpleMixin {
  String id;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;
  EhrSimpleMixin$User user;
  EhrSimpleMixin$Patient patient;
  EhrSimpleMixin$Type type;
  EhrSimpleMixin$Subject subject;
  @JsonKey(unknownEnumValue: EhrStatus.artemisUnknown)
  EhrStatus status;
}
mixin CreditCardSimpleMixin {
  CreditCardSimpleMixin$Address address;
  String cvc;
  int expMonth;
  int expYear;
  String id;
  String name;
  String number;
}
mixin UserAddressMixin {
  UserAddressMixin$User user;
}
mixin MyAddressMixin {
  String id;
  String tag;
  MyAddressMixin$Address address;
}
mixin AddressMixin {
  String address1;
  String address2;
  String address3;
  String city;
  String country;
  String state;
  String postalCode;
  String fullName;
}
mixin MediaSimpleMixin {
  String id;
  String url;
}
mixin OrderDetailMixin {
  Object additional;
  OrderDetailMixin$User user;
  OrderDetailMixin$ShippingAddress shippingAddress;
}
mixin OrderSimpleMixin {
  String id;
  String uuid;
  String description;
  OrderSimpleMixin$Currency currency;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime expire;
  double needpayPrice;
  double price;
  double paiedPrice;
  @JsonKey(unknownEnumValue: OrderStatusType.artemisUnknown)
  OrderStatusType status;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;
  List<OrderSimpleMixin$Items> items;
}
mixin OrderItemSimpleMixin {
  Object additional;
  String id;
  String name;
  OrderItemSimpleMixin$Picture picture;
  double preUnitPrice;
  int quantity;
  String sourceId;
  String sourceType;
  double unitPrice;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  OrderItemSimpleMixin$Currency currency;
  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;
}
mixin PatientInfoDetailMixin {
  String id;
  PatientInfoDetailMixin$Doctor doctor;
  PatientInfoDetailMixin$Nurse nurse;
  PatientInfoDetailMixin$Counselor counselor;
  List<PatientInfoDetailMixin$Ehrs> ehrs;
}
mixin PaymentMethodSimpleMixin {
  PaymentMethodSimpleMixin$BillingAddress billingAddress;
  PaymentMethodSimpleMixin$CreditCard creditCard;
  String id;
  bool livemode;
  String stripeId;
  String type;
  PaymentMethodSimpleMixin$User user;
}
mixin EventSimpleMixin {
  String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime eventDateTime;
  @JsonKey(unknownEnumValue: EventType.artemisUnknown)
  EventType eventType;
  String location;
  String address;
  String host;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  String contentType;
  EventSimpleMixin$Post post;
}
mixin ExerciseSimpleMixin {
  String id;
  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;
  ExerciseSimpleMixin$Post post;
}
mixin UserMeMixin {
  String id;
  String username;
  String fullName;
  String email;
  String name;
  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;
  String phone;
  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;
  String countryCode;
  @JsonKey(name: 'second_email')
  String secondEmail;
  UserMeMixin$Image image;
  UserMeMixin$Role role;
  UserMeMixin$AccountInfo accountInfo;
  UserMeMixin$AuthorInfo authorInfo;
  UserMeMixin$TeacherInfo teacherInfo;
  UserMeMixin$ParentInfo parentInfo;
  UserMeMixin$ChildInfo childInfo;
  UserMeMixin$CounselorInfo counselorInfo;
  UserMeMixin$DoctorInfo doctorInfo;
  UserMeMixin$NurseInfo nurseInfo;
  UserMeMixin$PatientInfo patientInfo;
  @JsonKey(name: 'user_agreements')
  List<UserMeMixin$UserAgreements> userAgreements;
}
mixin AuthorInfoSimpleMixin {
  String id;
  @JsonKey(name: '__typename')
  String $$typename;
}
mixin TeacherInfoSimpleMixin {
  String id;
  String school;
}
mixin ParentInfoWithChildrenMixin {
  String id;
  List<ParentInfoWithChildrenMixin$Children> children;
}
mixin ParentInfoSimpleMixin {
  String id;
  List<ParentInfoSimpleMixin$Children> children;
}
mixin OrderSimpleWithUserMixin {
  OrderSimpleWithUserMixin$User user;
}
mixin ParentingDetailMixin {
  ParentingDetailMixin$PdfFiles pdfFiles;
  List<ParentingDetailMixin$Media> media;
  String content;
  ParentingDetailMixin$Questionnaire questionnaire;
  ParentingDetailMixin$Subject subject;
}
mixin ParentingSimpleMixin {
  String id;
  String name;
  @JsonKey(name: '__typename')
  String $$typename;
  ParentingSimpleMixin$Post post;
}
mixin PlanDetailMixin {
  String content;
}
mixin PlanSimpleMixin {
  String name;
  String id;
  List<PlanSimpleMixin$Assessment> assessment;
  List<PlanSimpleMixin$Exercises> exercises;
  PlanSimpleMixin$Post post;
  List<PlanSimpleMixin$Supplements> supplements;
  List<PlanSimpleMixin$Parentings> parentings;
  List<PlanSimpleMixin$Articles> articles;
  List<PlanSimpleMixin$Books> books;
}
mixin SupplementSimpleMixin {
  @JsonKey(name: '__typename')
  String $$typename;
  String name;
  String id;
  SupplementSimpleMixin$Post post;
}
mixin PostSimpleMixin {
  String id;
  String title;
  String subtitle;
  List<PostSimpleMixin$Medias> medias;
  List<PostSimpleMixin$Categories> categories;
  bool recommended;
  @JsonKey(
      name: 'updated_day',
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime updatedDay;
  @JsonKey(name: 'vip_color')
  PostSimpleMixin$VipColor vipColor;
  @JsonKey(name: 'cover_background_color')
  PostSimpleMixin$CoverBackgroundColor coverBackgroundColor;
  double price;
  PostSimpleMixin$Trademark trademark;
  PostSimpleMixin$Currency currency;
  PostSimpleMixin$Author author;
  String vipText;
  String entityRawId;
  String entityType;
  double prePrice;
  int rating;
  bool needShipping;
}
mixin ReminderSimpleMixin {
  String id;
  String name;
  String body;
  @JsonKey(unknownEnumValue: ReminderType.artemisUnknown)
  ReminderType type;
  ReminderSimpleMixin$User user;
  List<ReminderSimpleMixin$Related> related;
}
mixin SupplementDetaileMixin {
  String provider;
  String content;
  SupplementDetaileMixin$Subject subject;
  SupplementDetaileMixin$ForPerson forPerson;
}
mixin UserAgreementDetailMixin {
  String content;
}
mixin WebinarSimpleMixin {
  String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime schedule;
  String meetingId;
  WebinarSimpleMixin$Post post;
}

@JsonSerializable(explicitToJson: true)
class Account$Query$Account$Orders with EquatableMixin {
  Account$Query$Account$Orders();

  factory Account$Query$Account$Orders.fromJson(Map<String, dynamic> json) =>
      _$Account$Query$Account$OrdersFromJson(json);

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  String id;

  double paiedPrice;

  double price;

  @JsonKey(unknownEnumValue: OrderStatusType.artemisUnknown)
  OrderStatusType status;

  double needpayPrice;

  @override
  List<Object> get props =>
      [updatedAt, id, paiedPrice, price, status, needpayPrice];
  Map<String, dynamic> toJson() => _$Account$Query$Account$OrdersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Account$Query$Account with EquatableMixin {
  Account$Query$Account();

  factory Account$Query$Account.fromJson(Map<String, dynamic> json) =>
      _$Account$Query$AccountFromJson(json);

  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;

  String id;

  String name;

  List<Account$Query$Account$Orders> orders;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  @override
  List<Object> get props => [createdAt, id, name, orders, updatedAt];
  Map<String, dynamic> toJson() => _$Account$Query$AccountToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Account$Query with EquatableMixin {
  Account$Query();

  factory Account$Query.fromJson(Map<String, dynamic> json) =>
      _$Account$QueryFromJson(json);

  Account$Query$Account account;

  @override
  List<Object> get props => [account];
  Map<String, dynamic> toJson() => _$Account$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Accounts$Query$Accounts$Orders with EquatableMixin {
  Accounts$Query$Accounts$Orders();

  factory Accounts$Query$Accounts$Orders.fromJson(Map<String, dynamic> json) =>
      _$Accounts$Query$Accounts$OrdersFromJson(json);

  String id;

  double paiedPrice;

  @JsonKey(unknownEnumValue: OrderStatusType.artemisUnknown)
  OrderStatusType status;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime expire;

  @override
  List<Object> get props => [id, paiedPrice, status, expire];
  Map<String, dynamic> toJson() => _$Accounts$Query$Accounts$OrdersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Accounts$Query$Accounts with EquatableMixin {
  Accounts$Query$Accounts();

  factory Accounts$Query$Accounts.fromJson(Map<String, dynamic> json) =>
      _$Accounts$Query$AccountsFromJson(json);

  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;

  String id;

  String name;

  List<Accounts$Query$Accounts$Orders> orders;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  @override
  List<Object> get props => [createdAt, id, name, orders, updatedAt];
  Map<String, dynamic> toJson() => _$Accounts$Query$AccountsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Accounts$Query with EquatableMixin {
  Accounts$Query();

  factory Accounts$Query.fromJson(Map<String, dynamic> json) =>
      _$Accounts$QueryFromJson(json);

  List<Accounts$Query$Accounts> accounts;

  @override
  List<Object> get props => [accounts];
  Map<String, dynamic> toJson() => _$Accounts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AgreeForTermOfService$Mutation$AgreeTermOfService$CreatedBy
    with EquatableMixin {
  AgreeForTermOfService$Mutation$AgreeTermOfService$CreatedBy();

  factory AgreeForTermOfService$Mutation$AgreeTermOfService$CreatedBy.fromJson(
          Map<String, dynamic> json) =>
      _$AgreeForTermOfService$Mutation$AgreeTermOfService$CreatedByFromJson(
          json);

  String id;

  String username;

  @override
  List<Object> get props => [id, username];
  Map<String, dynamic> toJson() =>
      _$AgreeForTermOfService$Mutation$AgreeTermOfService$CreatedByToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AgreeForTermOfService$Mutation$AgreeTermOfService
    with EquatableMixin, UserAgreementSimpleMixin {
  AgreeForTermOfService$Mutation$AgreeTermOfService();

  factory AgreeForTermOfService$Mutation$AgreeTermOfService.fromJson(
          Map<String, dynamic> json) =>
      _$AgreeForTermOfService$Mutation$AgreeTermOfServiceFromJson(json);

  @JsonKey(name: 'created_by')
  AgreeForTermOfService$Mutation$AgreeTermOfService$CreatedBy createdBy;

  @override
  List<Object> get props =>
      [id, lastVersionDate, termOfServiceType, value, updatedAt, createdBy];
  Map<String, dynamic> toJson() =>
      _$AgreeForTermOfService$Mutation$AgreeTermOfServiceToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AgreeForTermOfService$Mutation with EquatableMixin {
  AgreeForTermOfService$Mutation();

  factory AgreeForTermOfService$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AgreeForTermOfService$MutationFromJson(json);

  List<AgreeForTermOfService$Mutation$AgreeTermOfService> agreeTermOfService;

  @override
  List<Object> get props => [agreeTermOfService];
  Map<String, dynamic> toJson() => _$AgreeForTermOfService$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AgreeTermOfServiceInput with EquatableMixin {
  AgreeTermOfServiceInput(
      {@required this.content,
      @required this.lastVersionDate,
      @required this.termOfServiceType});

  factory AgreeTermOfServiceInput.fromJson(Map<String, dynamic> json) =>
      _$AgreeTermOfServiceInputFromJson(json);

  String content;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;

  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;

  @override
  List<Object> get props => [content, lastVersionDate, termOfServiceType];
  Map<String, dynamic> toJson() => _$AgreeTermOfServiceInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswer$Query$QuestionnaireAnswer$CreatedBy
    with EquatableMixin {
  QuestionnaireAnswer$Query$QuestionnaireAnswer$CreatedBy();

  factory QuestionnaireAnswer$Query$QuestionnaireAnswer$CreatedBy.fromJson(
          Map<String, dynamic> json) =>
      _$QuestionnaireAnswer$Query$QuestionnaireAnswer$CreatedByFromJson(json);

  String id;

  String username;

  @override
  List<Object> get props => [id, username];
  Map<String, dynamic> toJson() =>
      _$QuestionnaireAnswer$Query$QuestionnaireAnswer$CreatedByToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswer$Query$QuestionnaireAnswer$UpdatedBy
    with EquatableMixin {
  QuestionnaireAnswer$Query$QuestionnaireAnswer$UpdatedBy();

  factory QuestionnaireAnswer$Query$QuestionnaireAnswer$UpdatedBy.fromJson(
          Map<String, dynamic> json) =>
      _$QuestionnaireAnswer$Query$QuestionnaireAnswer$UpdatedByFromJson(json);

  String id;

  String username;

  @override
  List<Object> get props => [id, username];
  Map<String, dynamic> toJson() =>
      _$QuestionnaireAnswer$Query$QuestionnaireAnswer$UpdatedByToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswer$Query$QuestionnaireAnswer
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  QuestionnaireAnswer$Query$QuestionnaireAnswer();

  factory QuestionnaireAnswer$Query$QuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$QuestionnaireAnswer$Query$QuestionnaireAnswerFromJson(json);

  @JsonKey(name: 'created_by')
  QuestionnaireAnswer$Query$QuestionnaireAnswer$CreatedBy createdBy;

  @JsonKey(name: 'updated_by')
  QuestionnaireAnswer$Query$QuestionnaireAnswer$UpdatedBy updatedBy;

  @override
  List<Object> get props => [
        createdAt,
        id,
        name,
        questionnaire,
        updatedAt,
        user,
        submitted,
        data,
        createdBy,
        updatedBy
      ];
  Map<String, dynamic> toJson() =>
      _$QuestionnaireAnswer$Query$QuestionnaireAnswerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswer$Query with EquatableMixin {
  QuestionnaireAnswer$Query();

  factory QuestionnaireAnswer$Query.fromJson(Map<String, dynamic> json) =>
      _$QuestionnaireAnswer$QueryFromJson(json);

  QuestionnaireAnswer$Query$QuestionnaireAnswer questionnaireAnswer;

  @override
  List<Object> get props => [questionnaireAnswer];
  Map<String, dynamic> toJson() => _$QuestionnaireAnswer$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswerSimpleMixin$Questionnaire
    with EquatableMixin, QuestionnaireSimpleMixin {
  QuestionnaireAnswerSimpleMixin$Questionnaire();

  factory QuestionnaireAnswerSimpleMixin$Questionnaire.fromJson(
          Map<String, dynamic> json) =>
      _$QuestionnaireAnswerSimpleMixin$QuestionnaireFromJson(json);

  @override
  List<Object> get props => [id, $$typename, provider, data, name, displayName];
  Map<String, dynamic> toJson() =>
      _$QuestionnaireAnswerSimpleMixin$QuestionnaireToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswerSimpleMixin$User with EquatableMixin, UserSimpleMixin {
  QuestionnaireAnswerSimpleMixin$User();

  factory QuestionnaireAnswerSimpleMixin$User.fromJson(
          Map<String, dynamic> json) =>
      _$QuestionnaireAnswerSimpleMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() =>
      _$QuestionnaireAnswerSimpleMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserSimpleMixin$Image with EquatableMixin {
  UserSimpleMixin$Image();

  factory UserSimpleMixin$Image.fromJson(Map<String, dynamic> json) =>
      _$UserSimpleMixin$ImageFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$UserSimpleMixin$ImageToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserSimpleMixin$Role with EquatableMixin {
  UserSimpleMixin$Role();

  factory UserSimpleMixin$Role.fromJson(Map<String, dynamic> json) =>
      _$UserSimpleMixin$RoleFromJson(json);

  String name;

  @override
  List<Object> get props => [name];
  Map<String, dynamic> toJson() => _$UserSimpleMixin$RoleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswers$Query$QuestionnaireAnswers
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  QuestionnaireAnswers$Query$QuestionnaireAnswers();

  factory QuestionnaireAnswers$Query$QuestionnaireAnswers.fromJson(
          Map<String, dynamic> json) =>
      _$QuestionnaireAnswers$Query$QuestionnaireAnswersFromJson(json);

  @override
  List<Object> get props =>
      [createdAt, id, name, questionnaire, updatedAt, user, submitted, data];
  Map<String, dynamic> toJson() =>
      _$QuestionnaireAnswers$Query$QuestionnaireAnswersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswers$Query with EquatableMixin {
  QuestionnaireAnswers$Query();

  factory QuestionnaireAnswers$Query.fromJson(Map<String, dynamic> json) =>
      _$QuestionnaireAnswers$QueryFromJson(json);

  List<QuestionnaireAnswers$Query$QuestionnaireAnswers> questionnaireAnswers;

  @override
  List<Object> get props => [questionnaireAnswers];
  Map<String, dynamic> toJson() => _$QuestionnaireAnswers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AppPolicy$Query$AppTermOfService with EquatableMixin {
  AppPolicy$Query$AppTermOfService();

  factory AppPolicy$Query$AppTermOfService.fromJson(
          Map<String, dynamic> json) =>
      _$AppPolicy$Query$AppTermOfServiceFromJson(json);

  String id;

  @JsonKey(name: 'term_of_service')
  String termOfService;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  @override
  List<Object> get props => [id, termOfService, updatedAt];
  Map<String, dynamic> toJson() =>
      _$AppPolicy$Query$AppTermOfServiceToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AppPolicy$Query with EquatableMixin {
  AppPolicy$Query();

  factory AppPolicy$Query.fromJson(Map<String, dynamic> json) =>
      _$AppPolicy$QueryFromJson(json);

  AppPolicy$Query$AppTermOfService appTermOfService;

  @override
  List<Object> get props => [appTermOfService];
  Map<String, dynamic> toJson() => _$AppPolicy$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Article$Query$Article$Episodes with EquatableMixin {
  Article$Query$Article$Episodes();

  factory Article$Query$Article$Episodes.fromJson(Map<String, dynamic> json) =>
      _$Article$Query$Article$EpisodesFromJson(json);

  String content;

  String title;

  String subtitle;

  String id;

  @override
  List<Object> get props => [content, title, subtitle, id];
  Map<String, dynamic> toJson() => _$Article$Query$Article$EpisodesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Article$Query$Article$Questionnaire
    with EquatableMixin, QuestionnaireSimpleMixin {
  Article$Query$Article$Questionnaire();

  factory Article$Query$Article$Questionnaire.fromJson(
          Map<String, dynamic> json) =>
      _$Article$Query$Article$QuestionnaireFromJson(json);

  @override
  List<Object> get props => [id, $$typename, provider, data, name, displayName];
  Map<String, dynamic> toJson() =>
      _$Article$Query$Article$QuestionnaireToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Article$Query$Article$Subject with EquatableMixin {
  Article$Query$Article$Subject();

  factory Article$Query$Article$Subject.fromJson(Map<String, dynamic> json) =>
      _$Article$Query$Article$SubjectFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$Article$Query$Article$SubjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Article$Query$Article$ForPerson with EquatableMixin {
  Article$Query$Article$ForPerson();

  factory Article$Query$Article$ForPerson.fromJson(Map<String, dynamic> json) =>
      _$Article$Query$Article$ForPersonFromJson(json);

  @JsonKey(unknownEnumValue: ForType.artemisUnknown)
  ForType type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() =>
      _$Article$Query$Article$ForPersonToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Article$Query$Article with EquatableMixin, ArticleSimpleMixin {
  Article$Query$Article();

  factory Article$Query$Article.fromJson(Map<String, dynamic> json) =>
      _$Article$Query$ArticleFromJson(json);

  String content;

  List<Article$Query$Article$Episodes> episodes;

  Article$Query$Article$Questionnaire questionnaire;

  Article$Query$Article$Subject subject;

  Article$Query$Article$ForPerson forPerson;

  @override
  List<Object> get props => [
        id,
        name,
        media,
        publishedAt,
        post,
        content,
        episodes,
        questionnaire,
        subject,
        forPerson
      ];
  Map<String, dynamic> toJson() => _$Article$Query$ArticleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Article$Query with EquatableMixin {
  Article$Query();

  factory Article$Query.fromJson(Map<String, dynamic> json) =>
      _$Article$QueryFromJson(json);

  Article$Query$Article article;

  @override
  List<Object> get props => [article];
  Map<String, dynamic> toJson() => _$Article$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArticleSimpleMixin$Media with EquatableMixin {
  ArticleSimpleMixin$Media();

  factory ArticleSimpleMixin$Media.fromJson(Map<String, dynamic> json) =>
      _$ArticleSimpleMixin$MediaFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  String id;

  String url;

  Object formats;

  int width;

  int height;

  String ext;

  String caption;

  String name;

  double size;

  @override
  List<Object> get props =>
      [$$typename, id, url, formats, width, height, ext, caption, name, size];
  Map<String, dynamic> toJson() => _$ArticleSimpleMixin$MediaToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArticleSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  ArticleSimpleMixin$Post();

  factory ArticleSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$ArticleSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$ArticleSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Medias with EquatableMixin {
  PostComponentSimpleMixin$Medias();

  factory PostComponentSimpleMixin$Medias.fromJson(Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$MediasFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  String id;

  String url;

  Object formats;

  int width;

  int height;

  String ext;

  String caption;

  String name;

  double size;

  @override
  List<Object> get props =>
      [$$typename, id, url, formats, width, height, ext, caption, name, size];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$MediasToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Categories
    with EquatableMixin, CategoryDetailMixin {
  PostComponentSimpleMixin$Categories();

  factory PostComponentSimpleMixin$Categories.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$CategoriesFromJson(json);

  @override
  List<Object> get props => [id, name, type];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$CategoriesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$VipColor with EquatableMixin {
  PostComponentSimpleMixin$VipColor();

  factory PostComponentSimpleMixin$VipColor.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$VipColorFromJson(json);

  String color;

  @override
  List<Object> get props => [color];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$VipColorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$CoverBackgroundColor with EquatableMixin {
  PostComponentSimpleMixin$CoverBackgroundColor();

  factory PostComponentSimpleMixin$CoverBackgroundColor.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$CoverBackgroundColorFromJson(json);

  String color;

  @override
  List<Object> get props => [color];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$CoverBackgroundColorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Trademark$Image with EquatableMixin {
  PostComponentSimpleMixin$Trademark$Image();

  factory PostComponentSimpleMixin$Trademark$Image.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$Trademark$ImageFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$Trademark$ImageToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Trademark with EquatableMixin {
  PostComponentSimpleMixin$Trademark();

  factory PostComponentSimpleMixin$Trademark.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$TrademarkFromJson(json);

  String id;

  String name;

  PostComponentSimpleMixin$Trademark$Image image;

  @override
  List<Object> get props => [id, name, image];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$TrademarkToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Currency with EquatableMixin, CurrencyMixin {
  PostComponentSimpleMixin$Currency();

  factory PostComponentSimpleMixin$Currency.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$CurrencyFromJson(json);

  @override
  List<Object> get props => [
        code,
        decimalDigits,
        id,
        name,
        namePlural,
        rounding,
        symbol,
        symbolNative
      ];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$CurrencyToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Author$Role with EquatableMixin {
  PostComponentSimpleMixin$Author$Role();

  factory PostComponentSimpleMixin$Author$Role.fromJson(
          Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$Author$RoleFromJson(json);

  String name;

  @override
  List<Object> get props => [name];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$Author$RoleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostComponentSimpleMixin$Author with EquatableMixin {
  PostComponentSimpleMixin$Author();

  factory PostComponentSimpleMixin$Author.fromJson(Map<String, dynamic> json) =>
      _$PostComponentSimpleMixin$AuthorFromJson(json);

  String id;

  String fullName;

  PostComponentSimpleMixin$Author$Role role;

  @override
  List<Object> get props => [id, fullName, role];
  Map<String, dynamic> toJson() =>
      _$PostComponentSimpleMixin$AuthorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Articles$Query$Articles with EquatableMixin, ArticleSimpleMixin {
  Articles$Query$Articles();

  factory Articles$Query$Articles.fromJson(Map<String, dynamic> json) =>
      _$Articles$Query$ArticlesFromJson(json);

  @override
  List<Object> get props => [id, name, media, publishedAt, post];
  Map<String, dynamic> toJson() => _$Articles$Query$ArticlesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Articles$Query with EquatableMixin {
  Articles$Query();

  factory Articles$Query.fromJson(Map<String, dynamic> json) =>
      _$Articles$QueryFromJson(json);

  List<Articles$Query$Articles> articles;

  @override
  List<Object> get props => [articles];
  Map<String, dynamic> toJson() => _$Articles$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Media
    with EquatableMixin {
  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Media();

  factory AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Media.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$MediaFromJson(
          json);

  @JsonKey(name: '__typename')
  String $$typename;

  String id;

  String url;

  Object formats;

  int width;

  int height;

  String ext;

  String caption;

  String name;

  double size;

  @override
  List<Object> get props =>
      [$$typename, id, url, formats, width, height, ext, caption, name, size];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$MediaToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Questionnaire
    with EquatableMixin, QuestionnaireSimpleMixin {
  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Questionnaire();

  factory AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Questionnaire.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$QuestionnaireFromJson(
          json);

  @override
  List<Object> get props => [id, $$typename, provider, data, name, displayName];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$QuestionnaireToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Subject
    with EquatableMixin {
  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Subject();

  factory AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Subject.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$SubjectFromJson(
          json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$SubjectToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaire$Query$AssessmentQuestionnaire$ForPerson
    with EquatableMixin {
  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$ForPerson();

  factory AssessmentQuestionnaire$Query$AssessmentQuestionnaire$ForPerson.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$ForPersonFromJson(
          json);

  @JsonKey(unknownEnumValue: ForType.artemisUnknown)
  ForType type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaire$ForPersonToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaire$Query$AssessmentQuestionnaire
    with EquatableMixin, AssessmentQuestionnaireSimpleMixin {
  AssessmentQuestionnaire$Query$AssessmentQuestionnaire();

  factory AssessmentQuestionnaire$Query$AssessmentQuestionnaire.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaireFromJson(json);

  List<AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Media> media;

  String content;

  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Questionnaire
      questionnaire;

  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$Subject subject;

  int level;

  AssessmentQuestionnaire$Query$AssessmentQuestionnaire$ForPerson forPerson;

  @JsonKey(name: 'period_length')
  int periodLength;

  @override
  List<Object> get props => [
        name,
        id,
        post,
        questionnaireOnly,
        media,
        content,
        questionnaire,
        subject,
        level,
        forPerson,
        periodLength
      ];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaire$Query$AssessmentQuestionnaireToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaire$Query with EquatableMixin {
  AssessmentQuestionnaire$Query();

  factory AssessmentQuestionnaire$Query.fromJson(Map<String, dynamic> json) =>
      _$AssessmentQuestionnaire$QueryFromJson(json);

  AssessmentQuestionnaire$Query$AssessmentQuestionnaire assessmentQuestionnaire;

  @override
  List<Object> get props => [assessmentQuestionnaire];
  Map<String, dynamic> toJson() => _$AssessmentQuestionnaire$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaireSimpleMixin$Post
    with EquatableMixin, PostComponentSimpleMixin {
  AssessmentQuestionnaireSimpleMixin$Post();

  factory AssessmentQuestionnaireSimpleMixin$Post.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaireSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaireSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaires$Query$AssessmentQuestionnaires
    with EquatableMixin, AssessmentQuestionnaireSimpleMixin {
  AssessmentQuestionnaires$Query$AssessmentQuestionnaires();

  factory AssessmentQuestionnaires$Query$AssessmentQuestionnaires.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaires$Query$AssessmentQuestionnairesFromJson(json);

  @override
  List<Object> get props => [name, id, post, questionnaireOnly];
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaires$Query$AssessmentQuestionnairesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaires$Query with EquatableMixin {
  AssessmentQuestionnaires$Query();

  factory AssessmentQuestionnaires$Query.fromJson(Map<String, dynamic> json) =>
      _$AssessmentQuestionnaires$QueryFromJson(json);

  List<AssessmentQuestionnaires$Query$AssessmentQuestionnaires>
      assessmentQuestionnaires;

  @override
  List<Object> get props => [assessmentQuestionnaires];
  Map<String, dynamic> toJson() => _$AssessmentQuestionnaires$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Book$Query$Book$Episodes with EquatableMixin {
  Book$Query$Book$Episodes();

  factory Book$Query$Book$Episodes.fromJson(Map<String, dynamic> json) =>
      _$Book$Query$Book$EpisodesFromJson(json);

  String id;

  String title;

  String subtitle;

  String content;

  @override
  List<Object> get props => [id, title, subtitle, content];
  Map<String, dynamic> toJson() => _$Book$Query$Book$EpisodesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Book$Query$Book with EquatableMixin, BookDetailMixin, BookSimpleMixin {
  Book$Query$Book();

  factory Book$Query$Book.fromJson(Map<String, dynamic> json) =>
      _$Book$Query$BookFromJson(json);

  @JsonKey(unknownEnumValue: BookType.artemisUnknown)
  BookType type;

  List<Book$Query$Book$Episodes> episodes;

  @override
  List<Object> get props => [content, name, id, post, type, episodes];
  Map<String, dynamic> toJson() => _$Book$Query$BookToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Book$Query with EquatableMixin {
  Book$Query();

  factory Book$Query.fromJson(Map<String, dynamic> json) =>
      _$Book$QueryFromJson(json);

  Book$Query$Book book;

  @override
  List<Object> get props => [book];
  Map<String, dynamic> toJson() => _$Book$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BookSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  BookSimpleMixin$Post();

  factory BookSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$BookSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$BookSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Books$Query$Books with EquatableMixin, BookSimpleMixin {
  Books$Query$Books();

  factory Books$Query$Books.fromJson(Map<String, dynamic> json) =>
      _$Books$Query$BooksFromJson(json);

  @override
  List<Object> get props => [name, id, post];
  Map<String, dynamic> toJson() => _$Books$Query$BooksToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Books$Query with EquatableMixin {
  Books$Query();

  factory Books$Query.fromJson(Map<String, dynamic> json) =>
      _$Books$QueryFromJson(json);

  List<Books$Query$Books> books;

  @override
  List<Object> get props => [books];
  Map<String, dynamic> toJson() => _$Books$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Child$Query$User$ChildInfo with EquatableMixin, ChildInfoSimpleMixin {
  Child$Query$User$ChildInfo();

  factory Child$Query$User$ChildInfo.fromJson(Map<String, dynamic> json) =>
      _$Child$Query$User$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() => _$Child$Query$User$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Child$Query$User with EquatableMixin, UserDetailMixin {
  Child$Query$User();

  factory Child$Query$User.fromJson(Map<String, dynamic> json) =>
      _$Child$Query$UserFromJson(json);

  Child$Query$User$ChildInfo childInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        childInfo
      ];
  Map<String, dynamic> toJson() => _$Child$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Child$Query with EquatableMixin {
  Child$Query();

  factory Child$Query.fromJson(Map<String, dynamic> json) =>
      _$Child$QueryFromJson(json);

  Child$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$Child$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChildInfoSimpleMixin$Teacher$TeacherInfo with EquatableMixin {
  ChildInfoSimpleMixin$Teacher$TeacherInfo();

  factory ChildInfoSimpleMixin$Teacher$TeacherInfo.fromJson(
          Map<String, dynamic> json) =>
      _$ChildInfoSimpleMixin$Teacher$TeacherInfoFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  @override
  List<Object> get props => [$$typename];
  Map<String, dynamic> toJson() =>
      _$ChildInfoSimpleMixin$Teacher$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChildInfoSimpleMixin$Teacher with EquatableMixin, UserSimpleMixin {
  ChildInfoSimpleMixin$Teacher();

  factory ChildInfoSimpleMixin$Teacher.fromJson(Map<String, dynamic> json) =>
      _$ChildInfoSimpleMixin$TeacherFromJson(json);

  ChildInfoSimpleMixin$Teacher$TeacherInfo teacherInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        teacherInfo
      ];
  Map<String, dynamic> toJson() => _$ChildInfoSimpleMixin$TeacherToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChildInfoSimpleMixin$Parent with EquatableMixin, UserSimpleMixin {
  ChildInfoSimpleMixin$Parent();

  factory ChildInfoSimpleMixin$Parent.fromJson(Map<String, dynamic> json) =>
      _$ChildInfoSimpleMixin$ParentFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        $$typename
      ];
  Map<String, dynamic> toJson() => _$ChildInfoSimpleMixin$ParentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserDetailMixin$Image with EquatableMixin {
  UserDetailMixin$Image();

  factory UserDetailMixin$Image.fromJson(Map<String, dynamic> json) =>
      _$UserDetailMixin$ImageFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$UserDetailMixin$ImageToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserDetailMixin$OrganizationUnits with EquatableMixin {
  UserDetailMixin$OrganizationUnits();

  factory UserDetailMixin$OrganizationUnits.fromJson(
          Map<String, dynamic> json) =>
      _$UserDetailMixin$OrganizationUnitsFromJson(json);

  String id;

  String displayName;

  @override
  List<Object> get props => [id, displayName];
  Map<String, dynamic> toJson() =>
      _$UserDetailMixin$OrganizationUnitsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserDetailMixin$Role with EquatableMixin {
  UserDetailMixin$Role();

  factory UserDetailMixin$Role.fromJson(Map<String, dynamic> json) =>
      _$UserDetailMixin$RoleFromJson(json);

  String name;

  @override
  List<Object> get props => [name];
  Map<String, dynamic> toJson() => _$UserDetailMixin$RoleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Children$Query$Users$ChildInfo with EquatableMixin, ChildInfoSimpleMixin {
  Children$Query$Users$ChildInfo();

  factory Children$Query$Users$ChildInfo.fromJson(Map<String, dynamic> json) =>
      _$Children$Query$Users$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() => _$Children$Query$Users$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Children$Query$Users with EquatableMixin, UserSimpleMixin {
  Children$Query$Users();

  factory Children$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Children$Query$UsersFromJson(json);

  Children$Query$Users$ChildInfo childInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        childInfo
      ];
  Map<String, dynamic> toJson() => _$Children$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Children$Query with EquatableMixin {
  Children$Query();

  factory Children$Query.fromJson(Map<String, dynamic> json) =>
      _$Children$QueryFromJson(json);

  List<Children$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Children$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselor$Query$User$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  Counselor$Query$User$CounselorInfo();

  factory Counselor$Query$User$CounselorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$Counselor$Query$User$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$Counselor$Query$User$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselor$Query$User$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  Counselor$Query$User$PatientInfo();

  factory Counselor$Query$User$PatientInfo.fromJson(
          Map<String, dynamic> json) =>
      _$Counselor$Query$User$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() =>
      _$Counselor$Query$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselor$Query$User with EquatableMixin, UserDetailMixin {
  Counselor$Query$User();

  factory Counselor$Query$User.fromJson(Map<String, dynamic> json) =>
      _$Counselor$Query$UserFromJson(json);

  Counselor$Query$User$CounselorInfo counselorInfo;

  Counselor$Query$User$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        counselorInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() => _$Counselor$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselor$Query with EquatableMixin {
  Counselor$Query();

  factory Counselor$Query.fromJson(Map<String, dynamic> json) =>
      _$Counselor$QueryFromJson(json);

  Counselor$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$Counselor$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CounselorInfoSimpleMixin$Location
    with EquatableMixin, LocationSimpleMixin {
  CounselorInfoSimpleMixin$Location();

  factory CounselorInfoSimpleMixin$Location.fromJson(
          Map<String, dynamic> json) =>
      _$CounselorInfoSimpleMixin$LocationFromJson(json);

  @override
  List<Object> get props => [id, name, address];
  Map<String, dynamic> toJson() =>
      _$CounselorInfoSimpleMixin$LocationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Doctor$DoctorInfo
    with EquatableMixin, DoctorInfoSimpleMixin {
  PatientInfoSimpleMixin$Doctor$DoctorInfo();

  factory PatientInfoSimpleMixin$Doctor$DoctorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$Doctor$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() =>
      _$PatientInfoSimpleMixin$Doctor$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Doctor with EquatableMixin, UserSimpleMixin {
  PatientInfoSimpleMixin$Doctor();

  factory PatientInfoSimpleMixin$Doctor.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$DoctorFromJson(json);

  PatientInfoSimpleMixin$Doctor$DoctorInfo doctorInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        doctorInfo
      ];
  Map<String, dynamic> toJson() => _$PatientInfoSimpleMixin$DoctorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Nurse$NurseInfo
    with EquatableMixin, NurseInfoSimpleMixin {
  PatientInfoSimpleMixin$Nurse$NurseInfo();

  factory PatientInfoSimpleMixin$Nurse$NurseInfo.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$Nurse$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$PatientInfoSimpleMixin$Nurse$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Nurse with EquatableMixin, UserSimpleMixin {
  PatientInfoSimpleMixin$Nurse();

  factory PatientInfoSimpleMixin$Nurse.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$NurseFromJson(json);

  PatientInfoSimpleMixin$Nurse$NurseInfo nurseInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        nurseInfo
      ];
  Map<String, dynamic> toJson() => _$PatientInfoSimpleMixin$NurseToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Counselor$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  PatientInfoSimpleMixin$Counselor$CounselorInfo();

  factory PatientInfoSimpleMixin$Counselor$CounselorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$Counselor$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$PatientInfoSimpleMixin$Counselor$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Counselor with EquatableMixin, UserSimpleMixin {
  PatientInfoSimpleMixin$Counselor();

  factory PatientInfoSimpleMixin$Counselor.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$CounselorFromJson(json);

  PatientInfoSimpleMixin$Counselor$CounselorInfo counselorInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        counselorInfo
      ];
  Map<String, dynamic> toJson() =>
      _$PatientInfoSimpleMixin$CounselorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$Ehrs with EquatableMixin, EhrSimpleMixin {
  PatientInfoSimpleMixin$Ehrs();

  factory PatientInfoSimpleMixin$Ehrs.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$EhrsFromJson(json);

  @override
  List<Object> get props =>
      [id, updatedAt, createdAt, user, patient, type, subject, status];
  Map<String, dynamic> toJson() => _$PatientInfoSimpleMixin$EhrsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoSimpleMixin$User with EquatableMixin, UserSimpleMixin {
  PatientInfoSimpleMixin$User();

  factory PatientInfoSimpleMixin$User.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoSimpleMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$PatientInfoSimpleMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DoctorInfoSimpleMixin$Location with EquatableMixin, LocationSimpleMixin {
  DoctorInfoSimpleMixin$Location();

  factory DoctorInfoSimpleMixin$Location.fromJson(Map<String, dynamic> json) =>
      _$DoctorInfoSimpleMixin$LocationFromJson(json);

  @override
  List<Object> get props => [id, name, address];
  Map<String, dynamic> toJson() => _$DoctorInfoSimpleMixin$LocationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class NurseInfoSimpleMixin$Location with EquatableMixin, LocationSimpleMixin {
  NurseInfoSimpleMixin$Location();

  factory NurseInfoSimpleMixin$Location.fromJson(Map<String, dynamic> json) =>
      _$NurseInfoSimpleMixin$LocationFromJson(json);

  @override
  List<Object> get props => [id, name, address];
  Map<String, dynamic> toJson() => _$NurseInfoSimpleMixin$LocationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EhrSimpleMixin$User with EquatableMixin, UserSimpleMixin {
  EhrSimpleMixin$User();

  factory EhrSimpleMixin$User.fromJson(Map<String, dynamic> json) =>
      _$EhrSimpleMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$EhrSimpleMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EhrSimpleMixin$Patient with EquatableMixin {
  EhrSimpleMixin$Patient();

  factory EhrSimpleMixin$Patient.fromJson(Map<String, dynamic> json) =>
      _$EhrSimpleMixin$PatientFromJson(json);

  String id;

  String meetingId;

  String name;

  @override
  List<Object> get props => [id, meetingId, name];
  Map<String, dynamic> toJson() => _$EhrSimpleMixin$PatientToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EhrSimpleMixin$Type with EquatableMixin {
  EhrSimpleMixin$Type();

  factory EhrSimpleMixin$Type.fromJson(Map<String, dynamic> json) =>
      _$EhrSimpleMixin$TypeFromJson(json);

  @JsonKey(unknownEnumValue: EhrType.artemisUnknown)
  EhrType type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$EhrSimpleMixin$TypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EhrSimpleMixin$Subject with EquatableMixin {
  EhrSimpleMixin$Subject();

  factory EhrSimpleMixin$Subject.fromJson(Map<String, dynamic> json) =>
      _$EhrSimpleMixin$SubjectFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$EhrSimpleMixin$SubjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselors$Query$Users$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  Counselors$Query$Users$CounselorInfo();

  factory Counselors$Query$Users$CounselorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$Counselors$Query$Users$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$Counselors$Query$Users$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselors$Query$Users with EquatableMixin, UserSimpleMixin {
  Counselors$Query$Users();

  factory Counselors$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Counselors$Query$UsersFromJson(json);

  Counselors$Query$Users$CounselorInfo counselorInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        counselorInfo
      ];
  Map<String, dynamic> toJson() => _$Counselors$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Counselors$Query with EquatableMixin {
  Counselors$Query();

  factory Counselors$Query.fromJson(Map<String, dynamic> json) =>
      _$Counselors$QueryFromJson(json);

  List<Counselors$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Counselors$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CounselorUpdate$Mutation$UpdateUser$User$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  CounselorUpdate$Mutation$UpdateUser$User$CounselorInfo();

  factory CounselorUpdate$Mutation$UpdateUser$User$CounselorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$CounselorUpdate$Mutation$UpdateUser$User$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$CounselorUpdate$Mutation$UpdateUser$User$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CounselorUpdate$Mutation$UpdateUser$User
    with EquatableMixin, UserDetailMixin {
  CounselorUpdate$Mutation$UpdateUser$User();

  factory CounselorUpdate$Mutation$UpdateUser$User.fromJson(
          Map<String, dynamic> json) =>
      _$CounselorUpdate$Mutation$UpdateUser$UserFromJson(json);

  CounselorUpdate$Mutation$UpdateUser$User$CounselorInfo counselorInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        counselorInfo
      ];
  Map<String, dynamic> toJson() =>
      _$CounselorUpdate$Mutation$UpdateUser$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CounselorUpdate$Mutation$UpdateUser with EquatableMixin {
  CounselorUpdate$Mutation$UpdateUser();

  factory CounselorUpdate$Mutation$UpdateUser.fromJson(
          Map<String, dynamic> json) =>
      _$CounselorUpdate$Mutation$UpdateUserFromJson(json);

  CounselorUpdate$Mutation$UpdateUser$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$CounselorUpdate$Mutation$UpdateUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CounselorUpdate$Mutation with EquatableMixin {
  CounselorUpdate$Mutation();

  factory CounselorUpdate$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CounselorUpdate$MutationFromJson(json);

  CounselorUpdate$Mutation$UpdateUser updateUser;

  @override
  List<Object> get props => [updateUser];
  Map<String, dynamic> toJson() => _$CounselorUpdate$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class InputID with EquatableMixin {
  InputID({@required this.id});

  factory InputID.fromJson(Map<String, dynamic> json) =>
      _$InputIDFromJson(json);

  String id;

  @override
  List<Object> get props => [id];
  Map<String, dynamic> toJson() => _$InputIDToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserAuthorInput with EquatableMixin {
  EditComponentUserAuthorInput({this.foo, this.id});

  factory EditComponentUserAuthorInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserAuthorInputFromJson(json);

  String foo;

  String id;

  @override
  List<Object> get props => [foo, id];
  Map<String, dynamic> toJson() => _$EditComponentUserAuthorInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserChildInput with EquatableMixin {
  EditComponentUserChildInput(
      {this.id, this.parent, this.relationToUser, this.reminder, this.teacher});

  factory EditComponentUserChildInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserChildInputFromJson(json);

  String id;

  String parent;

  @JsonKey(unknownEnumValue: RelationType.artemisUnknown)
  RelationType relationToUser;

  String reminder;

  String teacher;

  @override
  List<Object> get props => [id, parent, relationToUser, reminder, teacher];
  Map<String, dynamic> toJson() => _$EditComponentUserChildInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserCounselorInput with EquatableMixin {
  EditComponentUserCounselorInput({this.id, this.location});

  factory EditComponentUserCounselorInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserCounselorInputFromJson(json);

  String id;

  String location;

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$EditComponentUserCounselorInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserDoctorInput with EquatableMixin {
  EditComponentUserDoctorInput({this.id, this.location, this.subject});

  factory EditComponentUserDoctorInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserDoctorInputFromJson(json);

  String id;

  String location;

  @JsonKey(unknownEnumValue: DoctorSubject.artemisUnknown)
  DoctorSubject subject;

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() => _$EditComponentUserDoctorInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserNurseInput with EquatableMixin {
  EditComponentUserNurseInput({this.id, this.location});

  factory EditComponentUserNurseInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserNurseInputFromJson(json);

  String id;

  String location;

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$EditComponentUserNurseInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserParentInput with EquatableMixin {
  EditComponentUserParentInput({this.children, this.id});

  factory EditComponentUserParentInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserParentInputFromJson(json);

  List<String> children;

  String id;

  @override
  List<Object> get props => [children, id];
  Map<String, dynamic> toJson() => _$EditComponentUserParentInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentUserTeacherInput with EquatableMixin {
  EditComponentUserTeacherInput({this.id, this.school});

  factory EditComponentUserTeacherInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentUserTeacherInputFromJson(json);

  String id;

  String school;

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() => _$EditComponentUserTeacherInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditUserInput with EquatableMixin {
  EditUserInput(
      {this.accountInfo,
      this.authorInfo,
      this.birthday,
      this.blocked,
      this.childInfo,
      this.confirmed,
      this.content,
      this.counselorInfo,
      this.countryCode,
      this.createdBy,
      this.doctorInfo,
      this.email,
      this.fullName,
      this.image,
      this.name,
      this.nurseInfo,
      this.organizationUnits,
      this.parentInfo,
      this.password,
      this.patientInfo,
      this.phone,
      this.provider,
      this.qrUrl,
      this.resetPasswordToken,
      this.role,
      this.secondEmail,
      this.sex,
      this.status,
      this.teacherInfo,
      this.updatedBy,
      this.userAgreements,
      this.username});

  factory EditUserInput.fromJson(Map<String, dynamic> json) =>
      _$EditUserInputFromJson(json);

  String accountInfo;

  EditComponentUserAuthorInput authorInfo;

  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;

  bool blocked;

  EditComponentUserChildInput childInfo;

  bool confirmed;

  String content;

  EditComponentUserCounselorInput counselorInfo;

  String countryCode;

  @JsonKey(name: 'created_by')
  String createdBy;

  EditComponentUserDoctorInput doctorInfo;

  String email;

  String fullName;

  String image;

  String name;

  EditComponentUserNurseInput nurseInfo;

  @JsonKey(name: 'organization_units')
  List<String> organizationUnits;

  EditComponentUserParentInput parentInfo;

  String password;

  String patientInfo;

  String phone;

  String provider;

  String qrUrl;

  String resetPasswordToken;

  String role;

  @JsonKey(name: 'second_email')
  String secondEmail;

  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;

  @JsonKey(unknownEnumValue: UserStatus.artemisUnknown)
  UserStatus status;

  EditComponentUserTeacherInput teacherInfo;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  @JsonKey(name: 'user_agreements')
  List<String> userAgreements;

  String username;

  @override
  List<Object> get props => [
        accountInfo,
        authorInfo,
        birthday,
        blocked,
        childInfo,
        confirmed,
        content,
        counselorInfo,
        countryCode,
        createdBy,
        doctorInfo,
        email,
        fullName,
        image,
        name,
        nurseInfo,
        organizationUnits,
        parentInfo,
        password,
        patientInfo,
        phone,
        provider,
        qrUrl,
        resetPasswordToken,
        role,
        secondEmail,
        sex,
        status,
        teacherInfo,
        updatedBy,
        userAgreements,
        username
      ];
  Map<String, dynamic> toJson() => _$EditUserInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserInput with EquatableMixin {
  UpdateUserInput({this.data, this.where});

  factory UpdateUserInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserInputFromJson(json);

  EditUserInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateUserInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateAnswer$Mutation$CreateQuestionnaireAnswer$QuestionnaireAnswer
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  CreateAnswer$Mutation$CreateQuestionnaireAnswer$QuestionnaireAnswer();

  factory CreateAnswer$Mutation$CreateQuestionnaireAnswer$QuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$CreateAnswer$Mutation$CreateQuestionnaireAnswer$QuestionnaireAnswerFromJson(
          json);

  @override
  List<Object> get props =>
      [createdAt, id, name, questionnaire, updatedAt, user, submitted, data];
  Map<String, dynamic> toJson() =>
      _$CreateAnswer$Mutation$CreateQuestionnaireAnswer$QuestionnaireAnswerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateAnswer$Mutation$CreateQuestionnaireAnswer with EquatableMixin {
  CreateAnswer$Mutation$CreateQuestionnaireAnswer();

  factory CreateAnswer$Mutation$CreateQuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$CreateAnswer$Mutation$CreateQuestionnaireAnswerFromJson(json);

  CreateAnswer$Mutation$CreateQuestionnaireAnswer$QuestionnaireAnswer
      questionnaireAnswer;

  @override
  List<Object> get props => [questionnaireAnswer];
  Map<String, dynamic> toJson() =>
      _$CreateAnswer$Mutation$CreateQuestionnaireAnswerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateAnswer$Mutation with EquatableMixin {
  CreateAnswer$Mutation();

  factory CreateAnswer$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateAnswer$MutationFromJson(json);

  CreateAnswer$Mutation$CreateQuestionnaireAnswer createQuestionnaireAnswer;

  @override
  List<Object> get props => [createQuestionnaireAnswer];
  Map<String, dynamic> toJson() => _$CreateAnswer$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswerInput with EquatableMixin {
  QuestionnaireAnswerInput(
      {this.createdBy,
      this.data,
      @required this.name,
      this.questionnaire,
      this.submitted,
      this.updatedBy,
      this.user});

  factory QuestionnaireAnswerInput.fromJson(Map<String, dynamic> json) =>
      _$QuestionnaireAnswerInputFromJson(json);

  @JsonKey(name: 'created_by')
  String createdBy;

  Object data;

  String name;

  String questionnaire;

  bool submitted;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props =>
      [createdBy, data, name, questionnaire, submitted, updatedBy, user];
  Map<String, dynamic> toJson() => _$QuestionnaireAnswerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateQuestionnaireAnswerInput with EquatableMixin {
  CreateQuestionnaireAnswerInput({this.data});

  factory CreateQuestionnaireAnswerInput.fromJson(Map<String, dynamic> json) =>
      _$CreateQuestionnaireAnswerInputFromJson(json);

  QuestionnaireAnswerInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateQuestionnaireAnswerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChild$Mutation$CreateChild$User$ChildInfo
    with EquatableMixin, ChildInfoSimpleMixin {
  CreateChild$Mutation$CreateChild$User$ChildInfo();

  factory CreateChild$Mutation$CreateChild$User$ChildInfo.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChild$Mutation$CreateChild$User$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() =>
      _$CreateChild$Mutation$CreateChild$User$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChild$Mutation$CreateChild$User
    with EquatableMixin, UserSimpleMixin {
  CreateChild$Mutation$CreateChild$User();

  factory CreateChild$Mutation$CreateChild$User.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChild$Mutation$CreateChild$UserFromJson(json);

  CreateChild$Mutation$CreateChild$User$ChildInfo childInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        childInfo
      ];
  Map<String, dynamic> toJson() =>
      _$CreateChild$Mutation$CreateChild$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChild$Mutation$CreateChild with EquatableMixin {
  CreateChild$Mutation$CreateChild();

  factory CreateChild$Mutation$CreateChild.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChild$Mutation$CreateChildFromJson(json);

  CreateChild$Mutation$CreateChild$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$CreateChild$Mutation$CreateChildToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChild$Mutation with EquatableMixin {
  CreateChild$Mutation();

  factory CreateChild$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateChild$MutationFromJson(json);

  CreateChild$Mutation$CreateChild createChild;

  @override
  List<Object> get props => [createChild];
  Map<String, dynamic> toJson() => _$CreateChild$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ComponentUserChildInput with EquatableMixin {
  ComponentUserChildInput(
      {this.parent,
      @required this.relationToUser,
      this.reminder,
      this.teacher});

  factory ComponentUserChildInput.fromJson(Map<String, dynamic> json) =>
      _$ComponentUserChildInputFromJson(json);

  String parent;

  @JsonKey(unknownEnumValue: RelationType.artemisUnknown)
  RelationType relationToUser;

  String reminder;

  String teacher;

  @override
  List<Object> get props => [parent, relationToUser, reminder, teacher];
  Map<String, dynamic> toJson() => _$ComponentUserChildInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChildInput with EquatableMixin {
  ChildInput(
      {@required this.birthday,
      @required this.childInfo,
      @required this.fullName,
      this.image,
      this.name,
      @required this.sex});

  factory ChildInput.fromJson(Map<String, dynamic> json) =>
      _$ChildInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;

  ComponentUserChildInput childInfo;

  String fullName;

  String image;

  String name;

  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;

  @override
  List<Object> get props => [birthday, childInfo, fullName, image, name, sex];
  Map<String, dynamic> toJson() => _$ChildInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChildInput with EquatableMixin {
  CreateChildInput({this.data});

  factory CreateChildInput.fromJson(Map<String, dynamic> json) =>
      _$CreateChildInputFromJson(json);

  ChildInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateChildInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCreditCard$Mutation$CreateCreditCard$CreditCard
    with EquatableMixin, CreditCardSimpleMixin {
  CreateCreditCard$Mutation$CreateCreditCard$CreditCard();

  factory CreateCreditCard$Mutation$CreateCreditCard$CreditCard.fromJson(
          Map<String, dynamic> json) =>
      _$CreateCreditCard$Mutation$CreateCreditCard$CreditCardFromJson(json);

  @override
  List<Object> get props => [address, cvc, expMonth, expYear, id, name, number];
  Map<String, dynamic> toJson() =>
      _$CreateCreditCard$Mutation$CreateCreditCard$CreditCardToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCreditCard$Mutation$CreateCreditCard with EquatableMixin {
  CreateCreditCard$Mutation$CreateCreditCard();

  factory CreateCreditCard$Mutation$CreateCreditCard.fromJson(
          Map<String, dynamic> json) =>
      _$CreateCreditCard$Mutation$CreateCreditCardFromJson(json);

  CreateCreditCard$Mutation$CreateCreditCard$CreditCard creditCard;

  @override
  List<Object> get props => [creditCard];
  Map<String, dynamic> toJson() =>
      _$CreateCreditCard$Mutation$CreateCreditCardToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCreditCard$Mutation with EquatableMixin {
  CreateCreditCard$Mutation();

  factory CreateCreditCard$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateCreditCard$MutationFromJson(json);

  CreateCreditCard$Mutation$CreateCreditCard createCreditCard;

  @override
  List<Object> get props => [createCreditCard];
  Map<String, dynamic> toJson() => _$CreateCreditCard$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreditCardSimpleMixin$Address with EquatableMixin, UserAddressMixin {
  CreditCardSimpleMixin$Address();

  factory CreditCardSimpleMixin$Address.fromJson(Map<String, dynamic> json) =>
      _$CreditCardSimpleMixin$AddressFromJson(json);

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$CreditCardSimpleMixin$AddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAddressMixin$User with EquatableMixin, UserSimpleMixin {
  UserAddressMixin$User();

  factory UserAddressMixin$User.fromJson(Map<String, dynamic> json) =>
      _$UserAddressMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$UserAddressMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyAddressMixin$Address with EquatableMixin, AddressMixin {
  MyAddressMixin$Address();

  factory MyAddressMixin$Address.fromJson(Map<String, dynamic> json) =>
      _$MyAddressMixin$AddressFromJson(json);

  @override
  List<Object> get props => [
        address1,
        address2,
        address3,
        city,
        country,
        state,
        postalCode,
        fullName
      ];
  Map<String, dynamic> toJson() => _$MyAddressMixin$AddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreditCardInput with EquatableMixin {
  CreditCardInput(
      {this.address,
      this.createdBy,
      @required this.cvc,
      @required this.expMonth,
      @required this.expYear,
      @required this.name,
      @required this.number,
      this.updatedBy,
      this.user});

  factory CreditCardInput.fromJson(Map<String, dynamic> json) =>
      _$CreditCardInputFromJson(json);

  String address;

  @JsonKey(name: 'created_by')
  String createdBy;

  String cvc;

  int expMonth;

  int expYear;

  String name;

  String number;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        address,
        createdBy,
        cvc,
        expMonth,
        expYear,
        name,
        number,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$CreditCardInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCreditCardInput with EquatableMixin {
  CreateCreditCardInput({this.data});

  factory CreateCreditCardInput.fromJson(Map<String, dynamic> json) =>
      _$CreateCreditCardInputFromJson(json);

  CreditCardInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateCreditCardInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhr$Mutation$CreateEhr$Ehr$Medias
    with EquatableMixin, MediaSimpleMixin {
  CreateEhr$Mutation$CreateEhr$Ehr$Medias();

  factory CreateEhr$Mutation$CreateEhr$Ehr$Medias.fromJson(
          Map<String, dynamic> json) =>
      _$CreateEhr$Mutation$CreateEhr$Ehr$MediasFromJson(json);

  @override
  List<Object> get props => [id, url];
  Map<String, dynamic> toJson() =>
      _$CreateEhr$Mutation$CreateEhr$Ehr$MediasToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhr$Mutation$CreateEhr$Ehr$QuestionnaireAnswer
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  CreateEhr$Mutation$CreateEhr$Ehr$QuestionnaireAnswer();

  factory CreateEhr$Mutation$CreateEhr$Ehr$QuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$CreateEhr$Mutation$CreateEhr$Ehr$QuestionnaireAnswerFromJson(json);

  @override
  List<Object> get props =>
      [createdAt, id, name, questionnaire, updatedAt, user, submitted, data];
  Map<String, dynamic> toJson() =>
      _$CreateEhr$Mutation$CreateEhr$Ehr$QuestionnaireAnswerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhr$Mutation$CreateEhr$Ehr$Summaries with EquatableMixin {
  CreateEhr$Mutation$CreateEhr$Ehr$Summaries();

  factory CreateEhr$Mutation$CreateEhr$Ehr$Summaries.fromJson(
          Map<String, dynamic> json) =>
      _$CreateEhr$Mutation$CreateEhr$Ehr$SummariesFromJson(json);

  String id;

  int rating;

  @JsonKey(unknownEnumValue: SummaryType.artemisUnknown)
  SummaryType type;

  @JsonKey(unknownEnumValue: SummarySubject.artemisUnknown)
  SummarySubject subject;

  @override
  List<Object> get props => [id, rating, type, subject];
  Map<String, dynamic> toJson() =>
      _$CreateEhr$Mutation$CreateEhr$Ehr$SummariesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhr$Mutation$CreateEhr$Ehr with EquatableMixin, EhrSimpleMixin {
  CreateEhr$Mutation$CreateEhr$Ehr();

  factory CreateEhr$Mutation$CreateEhr$Ehr.fromJson(
          Map<String, dynamic> json) =>
      _$CreateEhr$Mutation$CreateEhr$EhrFromJson(json);

  String source;

  @JsonKey(name: 'source_id')
  String sourceId;

  List<CreateEhr$Mutation$CreateEhr$Ehr$Medias> medias;

  Object data;

  @JsonKey(name: 'questionnaire_answer')
  CreateEhr$Mutation$CreateEhr$Ehr$QuestionnaireAnswer questionnaireAnswer;

  List<CreateEhr$Mutation$CreateEhr$Ehr$Summaries> summaries;

  @JsonKey(name: 'office_comments')
  String officeComments;

  @override
  List<Object> get props => [
        id,
        updatedAt,
        createdAt,
        user,
        patient,
        type,
        subject,
        status,
        source,
        sourceId,
        medias,
        data,
        questionnaireAnswer,
        summaries,
        officeComments
      ];
  Map<String, dynamic> toJson() =>
      _$CreateEhr$Mutation$CreateEhr$EhrToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhr$Mutation$CreateEhr with EquatableMixin {
  CreateEhr$Mutation$CreateEhr();

  factory CreateEhr$Mutation$CreateEhr.fromJson(Map<String, dynamic> json) =>
      _$CreateEhr$Mutation$CreateEhrFromJson(json);

  CreateEhr$Mutation$CreateEhr$Ehr ehr;

  @override
  List<Object> get props => [ehr];
  Map<String, dynamic> toJson() => _$CreateEhr$Mutation$CreateEhrToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhr$Mutation with EquatableMixin {
  CreateEhr$Mutation();

  factory CreateEhr$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateEhr$MutationFromJson(json);

  CreateEhr$Mutation$CreateEhr createEhr;

  @override
  List<Object> get props => [createEhr];
  Map<String, dynamic> toJson() => _$CreateEhr$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ComponentContentSummaryInput with EquatableMixin {
  ComponentContentSummaryInput(
      {this.rating, @required this.subject, @required this.type});

  factory ComponentContentSummaryInput.fromJson(Map<String, dynamic> json) =>
      _$ComponentContentSummaryInputFromJson(json);

  int rating;

  @JsonKey(unknownEnumValue: SummarySubject.artemisUnknown)
  SummarySubject subject;

  @JsonKey(unknownEnumValue: SummaryType.artemisUnknown)
  SummaryType type;

  @override
  List<Object> get props => [rating, subject, type];
  Map<String, dynamic> toJson() => _$ComponentContentSummaryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ComponentDataEhrSubjectInput with EquatableMixin {
  ComponentDataEhrSubjectInput({this.type});

  factory ComponentDataEhrSubjectInput.fromJson(Map<String, dynamic> json) =>
      _$ComponentDataEhrSubjectInputFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$ComponentDataEhrSubjectInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ComponentDataEhrTypeInput with EquatableMixin {
  ComponentDataEhrTypeInput({this.type});

  factory ComponentDataEhrTypeInput.fromJson(Map<String, dynamic> json) =>
      _$ComponentDataEhrTypeInputFromJson(json);

  @JsonKey(unknownEnumValue: EhrType.artemisUnknown)
  EhrType type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$ComponentDataEhrTypeInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ComponentDataPositionInput with EquatableMixin {
  ComponentDataPositionInput(
      {this.altitude,
      this.head,
      this.latitude,
      this.longitude,
      this.speed,
      this.timestamp});

  factory ComponentDataPositionInput.fromJson(Map<String, dynamic> json) =>
      _$ComponentDataPositionInputFromJson(json);

  double altitude;

  double head;

  double latitude;

  double longitude;

  double speed;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime timestamp;

  @override
  List<Object> get props =>
      [altitude, head, latitude, longitude, speed, timestamp];
  Map<String, dynamic> toJson() => _$ComponentDataPositionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EhrInput with EquatableMixin {
  EhrInput(
      {this.createdBy,
      this.data,
      this.medias,
      this.officeComments,
      this.patient,
      this.position,
      this.questionnaireAnswer,
      @required this.source,
      @required this.sourceId,
      this.status,
      @required this.subject,
      this.summaries,
      @required this.type,
      this.updatedBy,
      this.user});

  factory EhrInput.fromJson(Map<String, dynamic> json) =>
      _$EhrInputFromJson(json);

  @JsonKey(name: 'created_by')
  String createdBy;

  Object data;

  List<String> medias;

  @JsonKey(name: 'office_comments')
  String officeComments;

  String patient;

  ComponentDataPositionInput position;

  @JsonKey(name: 'questionnaire_answer')
  String questionnaireAnswer;

  String source;

  @JsonKey(name: 'source_id')
  String sourceId;

  @JsonKey(unknownEnumValue: EhrStatus.artemisUnknown)
  EhrStatus status;

  ComponentDataEhrSubjectInput subject;

  List<ComponentContentSummaryInput> summaries;

  ComponentDataEhrTypeInput type;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        createdBy,
        data,
        medias,
        officeComments,
        patient,
        position,
        questionnaireAnswer,
        source,
        sourceId,
        status,
        subject,
        summaries,
        type,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$EhrInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateEhrInput with EquatableMixin {
  CreateEhrInput({this.data});

  factory CreateEhrInput.fromJson(Map<String, dynamic> json) =>
      _$CreateEhrInputFromJson(json);

  EhrInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateEhrInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyAddress$Mutation$CreateMyAddress$UserAddress
    with EquatableMixin, MyAddressMixin {
  CreateMyAddress$Mutation$CreateMyAddress$UserAddress();

  factory CreateMyAddress$Mutation$CreateMyAddress$UserAddress.fromJson(
          Map<String, dynamic> json) =>
      _$CreateMyAddress$Mutation$CreateMyAddress$UserAddressFromJson(json);

  @override
  List<Object> get props => [id, tag, address];
  Map<String, dynamic> toJson() =>
      _$CreateMyAddress$Mutation$CreateMyAddress$UserAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyAddress$Mutation$CreateMyAddress with EquatableMixin {
  CreateMyAddress$Mutation$CreateMyAddress();

  factory CreateMyAddress$Mutation$CreateMyAddress.fromJson(
          Map<String, dynamic> json) =>
      _$CreateMyAddress$Mutation$CreateMyAddressFromJson(json);

  CreateMyAddress$Mutation$CreateMyAddress$UserAddress userAddress;

  @override
  List<Object> get props => [userAddress];
  Map<String, dynamic> toJson() =>
      _$CreateMyAddress$Mutation$CreateMyAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyAddress$Mutation with EquatableMixin {
  CreateMyAddress$Mutation();

  factory CreateMyAddress$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateMyAddress$MutationFromJson(json);

  CreateMyAddress$Mutation$CreateMyAddress createMyAddress;

  @override
  List<Object> get props => [createMyAddress];
  Map<String, dynamic> toJson() => _$CreateMyAddress$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ComponentDataAddressInput with EquatableMixin {
  ComponentDataAddressInput(
      {this.address1,
      this.address2,
      this.address3,
      this.city,
      this.country,
      this.fullName,
      this.postalCode,
      this.state});

  factory ComponentDataAddressInput.fromJson(Map<String, dynamic> json) =>
      _$ComponentDataAddressInputFromJson(json);

  String address1;

  String address2;

  String address3;

  String city;

  String country;

  String fullName;

  String postalCode;

  String state;

  @override
  List<Object> get props => [
        address1,
        address2,
        address3,
        city,
        country,
        fullName,
        postalCode,
        state
      ];
  Map<String, dynamic> toJson() => _$ComponentDataAddressInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyAddressInput with EquatableMixin {
  MyAddressInput({this.address, this.tag});

  factory MyAddressInput.fromJson(Map<String, dynamic> json) =>
      _$MyAddressInputFromJson(json);

  ComponentDataAddressInput address;

  String tag;

  @override
  List<Object> get props => [address, tag];
  Map<String, dynamic> toJson() => _$MyAddressInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyAddressInput with EquatableMixin {
  CreateMyAddressInput({this.data});

  factory CreateMyAddressInput.fromJson(Map<String, dynamic> json) =>
      _$CreateMyAddressInputFromJson(json);

  MyAddressInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateMyAddressInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyOrder$Mutation$CreateMyOrder$Order
    with EquatableMixin, OrderDetailMixin, OrderSimpleMixin {
  CreateMyOrder$Mutation$CreateMyOrder$Order();

  factory CreateMyOrder$Mutation$CreateMyOrder$Order.fromJson(
          Map<String, dynamic> json) =>
      _$CreateMyOrder$Mutation$CreateMyOrder$OrderFromJson(json);

  @override
  List<Object> get props => [
        additional,
        user,
        shippingAddress,
        id,
        uuid,
        description,
        currency,
        expire,
        needpayPrice,
        price,
        paiedPrice,
        status,
        updatedAt,
        createdAt,
        items
      ];
  Map<String, dynamic> toJson() =>
      _$CreateMyOrder$Mutation$CreateMyOrder$OrderToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyOrder$Mutation$CreateMyOrder with EquatableMixin {
  CreateMyOrder$Mutation$CreateMyOrder();

  factory CreateMyOrder$Mutation$CreateMyOrder.fromJson(
          Map<String, dynamic> json) =>
      _$CreateMyOrder$Mutation$CreateMyOrderFromJson(json);

  CreateMyOrder$Mutation$CreateMyOrder$Order order;

  @override
  List<Object> get props => [order];
  Map<String, dynamic> toJson() =>
      _$CreateMyOrder$Mutation$CreateMyOrderToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyOrder$Mutation with EquatableMixin {
  CreateMyOrder$Mutation();

  factory CreateMyOrder$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateMyOrder$MutationFromJson(json);

  CreateMyOrder$Mutation$CreateMyOrder createMyOrder;

  @override
  List<Object> get props => [createMyOrder];
  Map<String, dynamic> toJson() => _$CreateMyOrder$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderDetailMixin$User with EquatableMixin, UserSimpleMixin {
  OrderDetailMixin$User();

  factory OrderDetailMixin$User.fromJson(Map<String, dynamic> json) =>
      _$OrderDetailMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$OrderDetailMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderDetailMixin$ShippingAddress with EquatableMixin, AddressMixin {
  OrderDetailMixin$ShippingAddress();

  factory OrderDetailMixin$ShippingAddress.fromJson(
          Map<String, dynamic> json) =>
      _$OrderDetailMixin$ShippingAddressFromJson(json);

  @override
  List<Object> get props => [
        address1,
        address2,
        address3,
        city,
        country,
        state,
        postalCode,
        fullName
      ];
  Map<String, dynamic> toJson() =>
      _$OrderDetailMixin$ShippingAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderSimpleMixin$Currency with EquatableMixin, CurrencyMixin {
  OrderSimpleMixin$Currency();

  factory OrderSimpleMixin$Currency.fromJson(Map<String, dynamic> json) =>
      _$OrderSimpleMixin$CurrencyFromJson(json);

  @override
  List<Object> get props => [
        code,
        decimalDigits,
        id,
        name,
        namePlural,
        rounding,
        symbol,
        symbolNative
      ];
  Map<String, dynamic> toJson() => _$OrderSimpleMixin$CurrencyToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderSimpleMixin$Items with EquatableMixin, OrderItemSimpleMixin {
  OrderSimpleMixin$Items();

  factory OrderSimpleMixin$Items.fromJson(Map<String, dynamic> json) =>
      _$OrderSimpleMixin$ItemsFromJson(json);

  @override
  List<Object> get props => [
        additional,
        id,
        name,
        picture,
        preUnitPrice,
        quantity,
        sourceId,
        sourceType,
        unitPrice,
        updatedAt,
        currency,
        createdAt
      ];
  Map<String, dynamic> toJson() => _$OrderSimpleMixin$ItemsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderItemSimpleMixin$Picture with EquatableMixin {
  OrderItemSimpleMixin$Picture();

  factory OrderItemSimpleMixin$Picture.fromJson(Map<String, dynamic> json) =>
      _$OrderItemSimpleMixin$PictureFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$OrderItemSimpleMixin$PictureToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderItemSimpleMixin$Currency with EquatableMixin, CurrencyMixin {
  OrderItemSimpleMixin$Currency();

  factory OrderItemSimpleMixin$Currency.fromJson(Map<String, dynamic> json) =>
      _$OrderItemSimpleMixin$CurrencyFromJson(json);

  @override
  List<Object> get props => [
        code,
        decimalDigits,
        id,
        name,
        namePlural,
        rounding,
        symbol,
        symbolNative
      ];
  Map<String, dynamic> toJson() => _$OrderItemSimpleMixin$CurrencyToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMyOrderInput with EquatableMixin {
  CreateMyOrderInput({this.data});

  factory CreateMyOrderInput.fromJson(Map<String, dynamic> json) =>
      _$CreateMyOrderInputFromJson(json);

  MyOrderInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateMyOrderInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyOrderInput with EquatableMixin {
  MyOrderInput(
      {this.additional,
      @required this.currency,
      this.description,
      this.items,
      this.shippingAddress});

  factory MyOrderInput.fromJson(Map<String, dynamic> json) =>
      _$MyOrderInputFromJson(json);

  Object additional;

  String currency;

  String description;

  List<OrderItemInput> items;

  ComponentDataAddressInput shippingAddress;

  @override
  List<Object> get props =>
      [additional, currency, description, items, shippingAddress];
  Map<String, dynamic> toJson() => _$MyOrderInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderItemInput with EquatableMixin {
  OrderItemInput(
      {this.additional,
      @required this.name,
      this.picture,
      @required this.preUnitPrice,
      @required this.quantity,
      this.related,
      this.sourceId,
      this.sourceType,
      @required this.unitPrice});

  factory OrderItemInput.fromJson(Map<String, dynamic> json) =>
      _$OrderItemInputFromJson(json);

  Object additional;

  String name;

  String picture;

  double preUnitPrice;

  int quantity;

  RelatedInput related;

  String sourceId;

  String sourceType;

  double unitPrice;

  @override
  List<Object> get props => [
        additional,
        name,
        picture,
        preUnitPrice,
        quantity,
        related,
        sourceId,
        sourceType,
        unitPrice
      ];
  Map<String, dynamic> toJson() => _$OrderItemInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RelatedInput with EquatableMixin {
  RelatedInput({this.field, this.ref, this.refId, this.source});

  factory RelatedInput.fromJson(Map<String, dynamic> json) =>
      _$RelatedInputFromJson(json);

  String field;

  String ref;

  String refId;

  String source;

  @override
  List<Object> get props => [field, ref, refId, source];
  Map<String, dynamic> toJson() => _$RelatedInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePatient$Mutation$CreatePatient$Patient
    with EquatableMixin, PatientInfoDetailMixin {
  CreatePatient$Mutation$CreatePatient$Patient();

  factory CreatePatient$Mutation$CreatePatient$Patient.fromJson(
          Map<String, dynamic> json) =>
      _$CreatePatient$Mutation$CreatePatient$PatientFromJson(json);

  @override
  List<Object> get props => [id, doctor, nurse, counselor, ehrs];
  Map<String, dynamic> toJson() =>
      _$CreatePatient$Mutation$CreatePatient$PatientToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePatient$Mutation$CreatePatient with EquatableMixin {
  CreatePatient$Mutation$CreatePatient();

  factory CreatePatient$Mutation$CreatePatient.fromJson(
          Map<String, dynamic> json) =>
      _$CreatePatient$Mutation$CreatePatientFromJson(json);

  CreatePatient$Mutation$CreatePatient$Patient patient;

  @override
  List<Object> get props => [patient];
  Map<String, dynamic> toJson() =>
      _$CreatePatient$Mutation$CreatePatientToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePatient$Mutation with EquatableMixin {
  CreatePatient$Mutation();

  factory CreatePatient$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreatePatient$MutationFromJson(json);

  CreatePatient$Mutation$CreatePatient createPatient;

  @override
  List<Object> get props => [createPatient];
  Map<String, dynamic> toJson() => _$CreatePatient$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Doctor$DoctorInfo
    with EquatableMixin, DoctorInfoSimpleMixin {
  PatientInfoDetailMixin$Doctor$DoctorInfo();

  factory PatientInfoDetailMixin$Doctor$DoctorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$Doctor$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() =>
      _$PatientInfoDetailMixin$Doctor$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Doctor with EquatableMixin, UserSimpleMixin {
  PatientInfoDetailMixin$Doctor();

  factory PatientInfoDetailMixin$Doctor.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$DoctorFromJson(json);

  PatientInfoDetailMixin$Doctor$DoctorInfo doctorInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        doctorInfo
      ];
  Map<String, dynamic> toJson() => _$PatientInfoDetailMixin$DoctorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Nurse$NurseInfo
    with EquatableMixin, NurseInfoSimpleMixin {
  PatientInfoDetailMixin$Nurse$NurseInfo();

  factory PatientInfoDetailMixin$Nurse$NurseInfo.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$Nurse$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$PatientInfoDetailMixin$Nurse$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Nurse with EquatableMixin, UserSimpleMixin {
  PatientInfoDetailMixin$Nurse();

  factory PatientInfoDetailMixin$Nurse.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$NurseFromJson(json);

  PatientInfoDetailMixin$Nurse$NurseInfo nurseInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        nurseInfo
      ];
  Map<String, dynamic> toJson() => _$PatientInfoDetailMixin$NurseToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Counselor$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  PatientInfoDetailMixin$Counselor$CounselorInfo();

  factory PatientInfoDetailMixin$Counselor$CounselorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$Counselor$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$PatientInfoDetailMixin$Counselor$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Counselor with EquatableMixin, UserSimpleMixin {
  PatientInfoDetailMixin$Counselor();

  factory PatientInfoDetailMixin$Counselor.fromJson(
          Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$CounselorFromJson(json);

  PatientInfoDetailMixin$Counselor$CounselorInfo counselorInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        counselorInfo
      ];
  Map<String, dynamic> toJson() =>
      _$PatientInfoDetailMixin$CounselorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInfoDetailMixin$Ehrs with EquatableMixin, EhrSimpleMixin {
  PatientInfoDetailMixin$Ehrs();

  factory PatientInfoDetailMixin$Ehrs.fromJson(Map<String, dynamic> json) =>
      _$PatientInfoDetailMixin$EhrsFromJson(json);

  @override
  List<Object> get props =>
      [id, updatedAt, createdAt, user, patient, type, subject, status];
  Map<String, dynamic> toJson() => _$PatientInfoDetailMixin$EhrsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PatientInput with EquatableMixin {
  PatientInput(
      {this.counselor,
      this.createdBy,
      this.doctor,
      this.ehrs,
      this.meetingId,
      @required this.name,
      this.nurse,
      this.updatedBy,
      this.user});

  factory PatientInput.fromJson(Map<String, dynamic> json) =>
      _$PatientInputFromJson(json);

  String counselor;

  @JsonKey(name: 'created_by')
  String createdBy;

  String doctor;

  List<String> ehrs;

  String meetingId;

  String name;

  String nurse;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        counselor,
        createdBy,
        doctor,
        ehrs,
        meetingId,
        name,
        nurse,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$PatientInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePatientInput with EquatableMixin {
  CreatePatientInput({this.data});

  factory CreatePatientInput.fromJson(Map<String, dynamic> json) =>
      _$CreatePatientInputFromJson(json);

  PatientInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreatePatientInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePaymentMethod$Mutation$CreatePaymentMethod$PaymentMethod
    with EquatableMixin, PaymentMethodSimpleMixin {
  CreatePaymentMethod$Mutation$CreatePaymentMethod$PaymentMethod();

  factory CreatePaymentMethod$Mutation$CreatePaymentMethod$PaymentMethod.fromJson(
          Map<String, dynamic> json) =>
      _$CreatePaymentMethod$Mutation$CreatePaymentMethod$PaymentMethodFromJson(
          json);

  @override
  List<Object> get props =>
      [billingAddress, creditCard, id, livemode, stripeId, type, user];
  Map<String, dynamic> toJson() =>
      _$CreatePaymentMethod$Mutation$CreatePaymentMethod$PaymentMethodToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreatePaymentMethod$Mutation$CreatePaymentMethod with EquatableMixin {
  CreatePaymentMethod$Mutation$CreatePaymentMethod();

  factory CreatePaymentMethod$Mutation$CreatePaymentMethod.fromJson(
          Map<String, dynamic> json) =>
      _$CreatePaymentMethod$Mutation$CreatePaymentMethodFromJson(json);

  CreatePaymentMethod$Mutation$CreatePaymentMethod$PaymentMethod paymentMethod;

  @override
  List<Object> get props => [paymentMethod];
  Map<String, dynamic> toJson() =>
      _$CreatePaymentMethod$Mutation$CreatePaymentMethodToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePaymentMethod$Mutation with EquatableMixin {
  CreatePaymentMethod$Mutation();

  factory CreatePaymentMethod$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreatePaymentMethod$MutationFromJson(json);

  CreatePaymentMethod$Mutation$CreatePaymentMethod createPaymentMethod;

  @override
  List<Object> get props => [createPaymentMethod];
  Map<String, dynamic> toJson() => _$CreatePaymentMethod$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethodSimpleMixin$BillingAddress
    with EquatableMixin, UserAddressMixin {
  PaymentMethodSimpleMixin$BillingAddress();

  factory PaymentMethodSimpleMixin$BillingAddress.fromJson(
          Map<String, dynamic> json) =>
      _$PaymentMethodSimpleMixin$BillingAddressFromJson(json);

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$PaymentMethodSimpleMixin$BillingAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethodSimpleMixin$CreditCard
    with EquatableMixin, CreditCardSimpleMixin {
  PaymentMethodSimpleMixin$CreditCard();

  factory PaymentMethodSimpleMixin$CreditCard.fromJson(
          Map<String, dynamic> json) =>
      _$PaymentMethodSimpleMixin$CreditCardFromJson(json);

  @override
  List<Object> get props => [address, cvc, expMonth, expYear, id, name, number];
  Map<String, dynamic> toJson() =>
      _$PaymentMethodSimpleMixin$CreditCardToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethodSimpleMixin$User with EquatableMixin, UserSimpleMixin {
  PaymentMethodSimpleMixin$User();

  factory PaymentMethodSimpleMixin$User.fromJson(Map<String, dynamic> json) =>
      _$PaymentMethodSimpleMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$PaymentMethodSimpleMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethodInput with EquatableMixin {
  PaymentMethodInput(
      {this.billingAddress,
      this.createdBy,
      this.creditCard,
      this.livemode,
      @required this.stripeId,
      this.type,
      this.updatedBy,
      this.user});

  factory PaymentMethodInput.fromJson(Map<String, dynamic> json) =>
      _$PaymentMethodInputFromJson(json);

  String billingAddress;

  @JsonKey(name: 'created_by')
  String createdBy;

  String creditCard;

  bool livemode;

  String stripeId;

  String type;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        billingAddress,
        createdBy,
        creditCard,
        livemode,
        stripeId,
        type,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$PaymentMethodInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreatePaymentMethodInput with EquatableMixin {
  CreatePaymentMethodInput({this.data});

  factory CreatePaymentMethodInput.fromJson(Map<String, dynamic> json) =>
      _$CreatePaymentMethodInputFromJson(json);

  PaymentMethodInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreatePaymentMethodInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreditCards$Query$CreditCards with EquatableMixin, CreditCardSimpleMixin {
  CreditCards$Query$CreditCards();

  factory CreditCards$Query$CreditCards.fromJson(Map<String, dynamic> json) =>
      _$CreditCards$Query$CreditCardsFromJson(json);

  @override
  List<Object> get props => [address, cvc, expMonth, expYear, id, name, number];
  Map<String, dynamic> toJson() => _$CreditCards$Query$CreditCardsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreditCards$Query with EquatableMixin {
  CreditCards$Query();

  factory CreditCards$Query.fromJson(Map<String, dynamic> json) =>
      _$CreditCards$QueryFromJson(json);

  List<CreditCards$Query$CreditCards> creditCards;

  @override
  List<Object> get props => [creditCards];
  Map<String, dynamic> toJson() => _$CreditCards$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteMyAddress$Mutation$DeleteMyAddress$UserAddress
    with EquatableMixin, MyAddressMixin {
  DeleteMyAddress$Mutation$DeleteMyAddress$UserAddress();

  factory DeleteMyAddress$Mutation$DeleteMyAddress$UserAddress.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteMyAddress$Mutation$DeleteMyAddress$UserAddressFromJson(json);

  @override
  List<Object> get props => [id, tag, address];
  Map<String, dynamic> toJson() =>
      _$DeleteMyAddress$Mutation$DeleteMyAddress$UserAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteMyAddress$Mutation$DeleteMyAddress with EquatableMixin {
  DeleteMyAddress$Mutation$DeleteMyAddress();

  factory DeleteMyAddress$Mutation$DeleteMyAddress.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteMyAddress$Mutation$DeleteMyAddressFromJson(json);

  DeleteMyAddress$Mutation$DeleteMyAddress$UserAddress userAddress;

  @override
  List<Object> get props => [userAddress];
  Map<String, dynamic> toJson() =>
      _$DeleteMyAddress$Mutation$DeleteMyAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteMyAddress$Mutation with EquatableMixin {
  DeleteMyAddress$Mutation();

  factory DeleteMyAddress$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteMyAddress$MutationFromJson(json);

  DeleteMyAddress$Mutation$DeleteMyAddress deleteMyAddress;

  @override
  List<Object> get props => [deleteMyAddress];
  Map<String, dynamic> toJson() => _$DeleteMyAddress$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserAddressInput with EquatableMixin {
  DeleteUserAddressInput({this.where});

  factory DeleteUserAddressInput.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserAddressInputFromJson(json);

  InputID where;

  @override
  List<Object> get props => [where];
  Map<String, dynamic> toJson() => _$DeleteUserAddressInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctor$Query$User$DoctorInfo with EquatableMixin, DoctorInfoSimpleMixin {
  Doctor$Query$User$DoctorInfo();

  factory Doctor$Query$User$DoctorInfo.fromJson(Map<String, dynamic> json) =>
      _$Doctor$Query$User$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() => _$Doctor$Query$User$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctor$Query$User$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  Doctor$Query$User$PatientInfo();

  factory Doctor$Query$User$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$Doctor$Query$User$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$Doctor$Query$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctor$Query$User with EquatableMixin, UserDetailMixin {
  Doctor$Query$User();

  factory Doctor$Query$User.fromJson(Map<String, dynamic> json) =>
      _$Doctor$Query$UserFromJson(json);

  Doctor$Query$User$DoctorInfo doctorInfo;

  Doctor$Query$User$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        doctorInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() => _$Doctor$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctor$Query with EquatableMixin {
  Doctor$Query();

  factory Doctor$Query.fromJson(Map<String, dynamic> json) =>
      _$Doctor$QueryFromJson(json);

  Doctor$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$Doctor$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctors$Query$Users$DoctorInfo
    with EquatableMixin, DoctorInfoSimpleMixin {
  Doctors$Query$Users$DoctorInfo();

  factory Doctors$Query$Users$DoctorInfo.fromJson(Map<String, dynamic> json) =>
      _$Doctors$Query$Users$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() => _$Doctors$Query$Users$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctors$Query$Users with EquatableMixin, UserSimpleMixin {
  Doctors$Query$Users();

  factory Doctors$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Doctors$Query$UsersFromJson(json);

  Doctors$Query$Users$DoctorInfo doctorInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        doctorInfo
      ];
  Map<String, dynamic> toJson() => _$Doctors$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Doctors$Query with EquatableMixin {
  Doctors$Query();

  factory Doctors$Query.fromJson(Map<String, dynamic> json) =>
      _$Doctors$QueryFromJson(json);

  List<Doctors$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Doctors$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DoctorUpdate$Mutation$UpdateUser$User$DoctorInfo
    with EquatableMixin, DoctorInfoSimpleMixin {
  DoctorUpdate$Mutation$UpdateUser$User$DoctorInfo();

  factory DoctorUpdate$Mutation$UpdateUser$User$DoctorInfo.fromJson(
          Map<String, dynamic> json) =>
      _$DoctorUpdate$Mutation$UpdateUser$User$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() =>
      _$DoctorUpdate$Mutation$UpdateUser$User$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DoctorUpdate$Mutation$UpdateUser$User
    with EquatableMixin, UserDetailMixin {
  DoctorUpdate$Mutation$UpdateUser$User();

  factory DoctorUpdate$Mutation$UpdateUser$User.fromJson(
          Map<String, dynamic> json) =>
      _$DoctorUpdate$Mutation$UpdateUser$UserFromJson(json);

  DoctorUpdate$Mutation$UpdateUser$User$DoctorInfo doctorInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        doctorInfo
      ];
  Map<String, dynamic> toJson() =>
      _$DoctorUpdate$Mutation$UpdateUser$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DoctorUpdate$Mutation$UpdateUser with EquatableMixin {
  DoctorUpdate$Mutation$UpdateUser();

  factory DoctorUpdate$Mutation$UpdateUser.fromJson(
          Map<String, dynamic> json) =>
      _$DoctorUpdate$Mutation$UpdateUserFromJson(json);

  DoctorUpdate$Mutation$UpdateUser$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$DoctorUpdate$Mutation$UpdateUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DoctorUpdate$Mutation with EquatableMixin {
  DoctorUpdate$Mutation();

  factory DoctorUpdate$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DoctorUpdate$MutationFromJson(json);

  DoctorUpdate$Mutation$UpdateUser updateUser;

  @override
  List<Object> get props => [updateUser];
  Map<String, dynamic> toJson() => _$DoctorUpdate$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehr$Query$Ehr$Medias with EquatableMixin, MediaSimpleMixin {
  Ehr$Query$Ehr$Medias();

  factory Ehr$Query$Ehr$Medias.fromJson(Map<String, dynamic> json) =>
      _$Ehr$Query$Ehr$MediasFromJson(json);

  @override
  List<Object> get props => [id, url];
  Map<String, dynamic> toJson() => _$Ehr$Query$Ehr$MediasToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehr$Query$Ehr$QuestionnaireAnswer
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  Ehr$Query$Ehr$QuestionnaireAnswer();

  factory Ehr$Query$Ehr$QuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$Ehr$Query$Ehr$QuestionnaireAnswerFromJson(json);

  @override
  List<Object> get props =>
      [createdAt, id, name, questionnaire, updatedAt, user, submitted, data];
  Map<String, dynamic> toJson() =>
      _$Ehr$Query$Ehr$QuestionnaireAnswerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehr$Query$Ehr$Summaries with EquatableMixin {
  Ehr$Query$Ehr$Summaries();

  factory Ehr$Query$Ehr$Summaries.fromJson(Map<String, dynamic> json) =>
      _$Ehr$Query$Ehr$SummariesFromJson(json);

  String id;

  int rating;

  @JsonKey(unknownEnumValue: SummaryType.artemisUnknown)
  SummaryType type;

  @JsonKey(unknownEnumValue: SummarySubject.artemisUnknown)
  SummarySubject subject;

  @override
  List<Object> get props => [id, rating, type, subject];
  Map<String, dynamic> toJson() => _$Ehr$Query$Ehr$SummariesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehr$Query$Ehr$Position with EquatableMixin {
  Ehr$Query$Ehr$Position();

  factory Ehr$Query$Ehr$Position.fromJson(Map<String, dynamic> json) =>
      _$Ehr$Query$Ehr$PositionFromJson(json);

  double latitude;

  double longitude;

  double altitude;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime timestamp;

  double speed;

  double head;

  @override
  List<Object> get props =>
      [latitude, longitude, altitude, timestamp, speed, head];
  Map<String, dynamic> toJson() => _$Ehr$Query$Ehr$PositionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehr$Query$Ehr with EquatableMixin, EhrSimpleMixin {
  Ehr$Query$Ehr();

  factory Ehr$Query$Ehr.fromJson(Map<String, dynamic> json) =>
      _$Ehr$Query$EhrFromJson(json);

  String source;

  @JsonKey(name: 'source_id')
  String sourceId;

  List<Ehr$Query$Ehr$Medias> medias;

  Object data;

  @JsonKey(name: 'questionnaire_answer')
  Ehr$Query$Ehr$QuestionnaireAnswer questionnaireAnswer;

  List<Ehr$Query$Ehr$Summaries> summaries;

  @JsonKey(name: 'office_comments')
  String officeComments;

  Ehr$Query$Ehr$Position position;

  @override
  List<Object> get props => [
        id,
        updatedAt,
        createdAt,
        user,
        patient,
        type,
        subject,
        status,
        source,
        sourceId,
        medias,
        data,
        questionnaireAnswer,
        summaries,
        officeComments,
        position
      ];
  Map<String, dynamic> toJson() => _$Ehr$Query$EhrToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehr$Query with EquatableMixin {
  Ehr$Query();

  factory Ehr$Query.fromJson(Map<String, dynamic> json) =>
      _$Ehr$QueryFromJson(json);

  Ehr$Query$Ehr ehr;

  @override
  List<Object> get props => [ehr];
  Map<String, dynamic> toJson() => _$Ehr$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehrs$Query$Ehrs with EquatableMixin, EhrSimpleMixin {
  Ehrs$Query$Ehrs();

  factory Ehrs$Query$Ehrs.fromJson(Map<String, dynamic> json) =>
      _$Ehrs$Query$EhrsFromJson(json);

  @override
  List<Object> get props =>
      [id, updatedAt, createdAt, user, patient, type, subject, status];
  Map<String, dynamic> toJson() => _$Ehrs$Query$EhrsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Ehrs$Query with EquatableMixin {
  Ehrs$Query();

  factory Ehrs$Query.fromJson(Map<String, dynamic> json) =>
      _$Ehrs$QueryFromJson(json);

  List<Ehrs$Query$Ehrs> ehrs;

  @override
  List<Object> get props => [ehrs];
  Map<String, dynamic> toJson() => _$Ehrs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Event$Query$Event$EventPrices with EquatableMixin {
  Event$Query$Event$EventPrices();

  factory Event$Query$Event$EventPrices.fromJson(Map<String, dynamic> json) =>
      _$Event$Query$Event$EventPricesFromJson(json);

  String name;

  double price;

  double prePrice;

  @override
  List<Object> get props => [name, price, prePrice];
  Map<String, dynamic> toJson() => _$Event$Query$Event$EventPricesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Event$Query$Event with EquatableMixin, EventSimpleMixin {
  Event$Query$Event();

  factory Event$Query$Event.fromJson(Map<String, dynamic> json) =>
      _$Event$Query$EventFromJson(json);

  double price1;

  double price2;

  double price3;

  double price4;

  double price5;

  double dicount;

  String password;

  String content;

  List<Event$Query$Event$EventPrices> eventPrices;

  @override
  List<Object> get props => [
        id,
        eventDateTime,
        eventType,
        location,
        address,
        host,
        updatedAt,
        contentType,
        post,
        price1,
        price2,
        price3,
        price4,
        price5,
        dicount,
        password,
        content,
        eventPrices
      ];
  Map<String, dynamic> toJson() => _$Event$Query$EventToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Event$Query with EquatableMixin {
  Event$Query();

  factory Event$Query.fromJson(Map<String, dynamic> json) =>
      _$Event$QueryFromJson(json);

  Event$Query$Event event;

  @override
  List<Object> get props => [event];
  Map<String, dynamic> toJson() => _$Event$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EventSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  EventSimpleMixin$Post();

  factory EventSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$EventSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$EventSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Events$Query$Events with EquatableMixin, EventSimpleMixin {
  Events$Query$Events();

  factory Events$Query$Events.fromJson(Map<String, dynamic> json) =>
      _$Events$Query$EventsFromJson(json);

  @override
  List<Object> get props => [
        id,
        eventDateTime,
        eventType,
        location,
        address,
        host,
        updatedAt,
        contentType,
        post
      ];
  Map<String, dynamic> toJson() => _$Events$Query$EventsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Events$Query with EquatableMixin {
  Events$Query();

  factory Events$Query.fromJson(Map<String, dynamic> json) =>
      _$Events$QueryFromJson(json);

  List<Events$Query$Events> events;

  @override
  List<Object> get props => [events];
  Map<String, dynamic> toJson() => _$Events$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Exercise$Query$Exercise$Questionnaire
    with EquatableMixin, QuestionnaireSimpleMixin {
  Exercise$Query$Exercise$Questionnaire();

  factory Exercise$Query$Exercise$Questionnaire.fromJson(
          Map<String, dynamic> json) =>
      _$Exercise$Query$Exercise$QuestionnaireFromJson(json);

  @override
  List<Object> get props => [id, $$typename, provider, data, name, displayName];
  Map<String, dynamic> toJson() =>
      _$Exercise$Query$Exercise$QuestionnaireToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Exercise$Query$Exercise$Subject with EquatableMixin {
  Exercise$Query$Exercise$Subject();

  factory Exercise$Query$Exercise$Subject.fromJson(Map<String, dynamic> json) =>
      _$Exercise$Query$Exercise$SubjectFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() =>
      _$Exercise$Query$Exercise$SubjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Exercise$Query$Exercise with EquatableMixin, ExerciseSimpleMixin {
  Exercise$Query$Exercise();

  factory Exercise$Query$Exercise.fromJson(Map<String, dynamic> json) =>
      _$Exercise$Query$ExerciseFromJson(json);

  String content;

  int age;

  @JsonKey(unknownEnumValue: ExerciseType.artemisUnknown)
  ExerciseType type;

  int level;

  Exercise$Query$Exercise$Questionnaire questionnaire;

  Exercise$Query$Exercise$Subject subject;

  @override
  List<Object> get props =>
      [id, updatedAt, post, content, age, type, level, questionnaire, subject];
  Map<String, dynamic> toJson() => _$Exercise$Query$ExerciseToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Exercise$Query with EquatableMixin {
  Exercise$Query();

  factory Exercise$Query.fromJson(Map<String, dynamic> json) =>
      _$Exercise$QueryFromJson(json);

  Exercise$Query$Exercise exercise;

  @override
  List<Object> get props => [exercise];
  Map<String, dynamic> toJson() => _$Exercise$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ExerciseSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  ExerciseSimpleMixin$Post();

  factory ExerciseSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$ExerciseSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$ExerciseSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Exercises$Query$Exercises with EquatableMixin, ExerciseSimpleMixin {
  Exercises$Query$Exercises();

  factory Exercises$Query$Exercises.fromJson(Map<String, dynamic> json) =>
      _$Exercises$Query$ExercisesFromJson(json);

  @override
  List<Object> get props => [id, updatedAt, post];
  Map<String, dynamic> toJson() => _$Exercises$Query$ExercisesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Exercises$Query with EquatableMixin {
  Exercises$Query();

  factory Exercises$Query.fromJson(Map<String, dynamic> json) =>
      _$Exercises$QueryFromJson(json);

  List<Exercises$Query$Exercises> exercises;

  @override
  List<Object> get props => [exercises];
  Map<String, dynamic> toJson() => _$Exercises$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class FindMyChild$Query$MyChild$ChildInfo
    with EquatableMixin, ChildInfoSimpleMixin {
  FindMyChild$Query$MyChild$ChildInfo();

  factory FindMyChild$Query$MyChild$ChildInfo.fromJson(
          Map<String, dynamic> json) =>
      _$FindMyChild$Query$MyChild$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() =>
      _$FindMyChild$Query$MyChild$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class FindMyChild$Query$MyChild$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  FindMyChild$Query$MyChild$PatientInfo();

  factory FindMyChild$Query$MyChild$PatientInfo.fromJson(
          Map<String, dynamic> json) =>
      _$FindMyChild$Query$MyChild$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() =>
      _$FindMyChild$Query$MyChild$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class FindMyChild$Query$MyChild with EquatableMixin, UserDetailMixin {
  FindMyChild$Query$MyChild();

  factory FindMyChild$Query$MyChild.fromJson(Map<String, dynamic> json) =>
      _$FindMyChild$Query$MyChildFromJson(json);

  FindMyChild$Query$MyChild$ChildInfo childInfo;

  FindMyChild$Query$MyChild$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        childInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() => _$FindMyChild$Query$MyChildToJson(this);
}

@JsonSerializable(explicitToJson: true)
class FindMyChild$Query with EquatableMixin {
  FindMyChild$Query();

  factory FindMyChild$Query.fromJson(Map<String, dynamic> json) =>
      _$FindMyChild$QueryFromJson(json);

  FindMyChild$Query$MyChild myChild;

  @override
  List<Object> get props => [myChild];
  Map<String, dynamic> toJson() => _$FindMyChild$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Location$Query$Location$QrCode with EquatableMixin {
  Location$Query$Location$QrCode();

  factory Location$Query$Location$QrCode.fromJson(Map<String, dynamic> json) =>
      _$Location$Query$Location$QrCodeFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$Location$Query$Location$QrCodeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Location$Query$Location$Post
    with EquatableMixin, PostComponentSimpleMixin {
  Location$Query$Location$Post();

  factory Location$Query$Location$Post.fromJson(Map<String, dynamic> json) =>
      _$Location$Query$Location$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$Location$Query$Location$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Location$Query$Location with EquatableMixin {
  Location$Query$Location();

  factory Location$Query$Location.fromJson(Map<String, dynamic> json) =>
      _$Location$Query$LocationFromJson(json);

  String id;

  String address;

  String phone;

  String web;

  String description;

  String name;

  String email;

  @JsonKey(unknownEnumValue: LocationType.artemisUnknown)
  LocationType type;

  Location$Query$Location$QrCode qrCode;

  Location$Query$Location$Post post;

  String content;

  @override
  List<Object> get props => [
        id,
        address,
        phone,
        web,
        description,
        name,
        email,
        type,
        qrCode,
        post,
        content
      ];
  Map<String, dynamic> toJson() => _$Location$Query$LocationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Location$Query with EquatableMixin {
  Location$Query();

  factory Location$Query.fromJson(Map<String, dynamic> json) =>
      _$Location$QueryFromJson(json);

  Location$Query$Location location;

  @override
  List<Object> get props => [location];
  Map<String, dynamic> toJson() => _$Location$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Locations$Query$Locations with EquatableMixin, LocationSimpleMixin {
  Locations$Query$Locations();

  factory Locations$Query$Locations.fromJson(Map<String, dynamic> json) =>
      _$Locations$Query$LocationsFromJson(json);

  @override
  List<Object> get props => [id, name, address];
  Map<String, dynamic> toJson() => _$Locations$Query$LocationsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Locations$Query with EquatableMixin {
  Locations$Query();

  factory Locations$Query.fromJson(Map<String, dynamic> json) =>
      _$Locations$QueryFromJson(json);

  List<Locations$Query$Locations> locations;

  @override
  List<Object> get props => [locations];
  Map<String, dynamic> toJson() => _$Locations$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Login$Mutation$Login$User with EquatableMixin, UserMeMixin {
  Login$Mutation$Login$User();

  factory Login$Mutation$Login$User.fromJson(Map<String, dynamic> json) =>
      _$Login$Mutation$Login$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        phone,
        birthday,
        countryCode,
        secondEmail,
        image,
        role,
        accountInfo,
        authorInfo,
        teacherInfo,
        parentInfo,
        childInfo,
        counselorInfo,
        doctorInfo,
        nurseInfo,
        patientInfo,
        userAgreements
      ];
  Map<String, dynamic> toJson() => _$Login$Mutation$Login$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Login$Mutation$Login with EquatableMixin {
  Login$Mutation$Login();

  factory Login$Mutation$Login.fromJson(Map<String, dynamic> json) =>
      _$Login$Mutation$LoginFromJson(json);

  String jwt;

  Login$Mutation$Login$User user;

  @override
  List<Object> get props => [jwt, user];
  Map<String, dynamic> toJson() => _$Login$Mutation$LoginToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Login$Mutation with EquatableMixin {
  Login$Mutation();

  factory Login$Mutation.fromJson(Map<String, dynamic> json) =>
      _$Login$MutationFromJson(json);

  Login$Mutation$Login login;

  @override
  List<Object> get props => [login];
  Map<String, dynamic> toJson() => _$Login$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$Image with EquatableMixin {
  UserMeMixin$Image();

  factory UserMeMixin$Image.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$ImageFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$UserMeMixin$ImageToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$Role with EquatableMixin {
  UserMeMixin$Role();

  factory UserMeMixin$Role.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$RoleFromJson(json);

  String name;

  @override
  List<Object> get props => [name];
  Map<String, dynamic> toJson() => _$UserMeMixin$RoleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$AccountInfo$Orders with EquatableMixin, OrderSimpleMixin {
  UserMeMixin$AccountInfo$Orders();

  factory UserMeMixin$AccountInfo$Orders.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$AccountInfo$OrdersFromJson(json);

  @override
  List<Object> get props => [
        id,
        uuid,
        description,
        currency,
        expire,
        needpayPrice,
        price,
        paiedPrice,
        status,
        updatedAt,
        createdAt,
        items
      ];
  Map<String, dynamic> toJson() => _$UserMeMixin$AccountInfo$OrdersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$AccountInfo with EquatableMixin {
  UserMeMixin$AccountInfo();

  factory UserMeMixin$AccountInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$AccountInfoFromJson(json);

  String id;

  String name;

  List<UserMeMixin$AccountInfo$Orders> orders;

  @override
  List<Object> get props => [id, name, orders];
  Map<String, dynamic> toJson() => _$UserMeMixin$AccountInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$AuthorInfo with EquatableMixin, AuthorInfoSimpleMixin {
  UserMeMixin$AuthorInfo();

  factory UserMeMixin$AuthorInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$AuthorInfoFromJson(json);

  @override
  List<Object> get props => [id, $$typename];
  Map<String, dynamic> toJson() => _$UserMeMixin$AuthorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$TeacherInfo with EquatableMixin, TeacherInfoSimpleMixin {
  UserMeMixin$TeacherInfo();

  factory UserMeMixin$TeacherInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$TeacherInfoFromJson(json);

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() => _$UserMeMixin$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$ParentInfo with EquatableMixin, ParentInfoWithChildrenMixin {
  UserMeMixin$ParentInfo();

  factory UserMeMixin$ParentInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$ParentInfoFromJson(json);

  @override
  List<Object> get props => [id, children];
  Map<String, dynamic> toJson() => _$UserMeMixin$ParentInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$ChildInfo with EquatableMixin, ChildInfoSimpleMixin {
  UserMeMixin$ChildInfo();

  factory UserMeMixin$ChildInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() => _$UserMeMixin$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$CounselorInfo with EquatableMixin, CounselorInfoSimpleMixin {
  UserMeMixin$CounselorInfo();

  factory UserMeMixin$CounselorInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$UserMeMixin$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$DoctorInfo with EquatableMixin, DoctorInfoSimpleMixin {
  UserMeMixin$DoctorInfo();

  factory UserMeMixin$DoctorInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() => _$UserMeMixin$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$NurseInfo with EquatableMixin, NurseInfoSimpleMixin {
  UserMeMixin$NurseInfo();

  factory UserMeMixin$NurseInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$UserMeMixin$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$PatientInfo with EquatableMixin, PatientInfoSimpleMixin {
  UserMeMixin$PatientInfo();

  factory UserMeMixin$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$UserMeMixin$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeMixin$UserAgreements with EquatableMixin {
  UserMeMixin$UserAgreements();

  factory UserMeMixin$UserAgreements.fromJson(Map<String, dynamic> json) =>
      _$UserMeMixin$UserAgreementsFromJson(json);

  String id;

  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;

  bool value;

  @override
  List<Object> get props => [id, termOfServiceType, lastVersionDate, value];
  Map<String, dynamic> toJson() => _$UserMeMixin$UserAgreementsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentInfoWithChildrenMixin$Children$ChildInfo with EquatableMixin {
  ParentInfoWithChildrenMixin$Children$ChildInfo();

  factory ParentInfoWithChildrenMixin$Children$ChildInfo.fromJson(
          Map<String, dynamic> json) =>
      _$ParentInfoWithChildrenMixin$Children$ChildInfoFromJson(json);

  @JsonKey(unknownEnumValue: RelationType.artemisUnknown)
  RelationType relationToUser;

  @override
  List<Object> get props => [relationToUser];
  Map<String, dynamic> toJson() =>
      _$ParentInfoWithChildrenMixin$Children$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentInfoWithChildrenMixin$Children
    with EquatableMixin, UserSimpleMixin {
  ParentInfoWithChildrenMixin$Children();

  factory ParentInfoWithChildrenMixin$Children.fromJson(
          Map<String, dynamic> json) =>
      _$ParentInfoWithChildrenMixin$ChildrenFromJson(json);

  ParentInfoWithChildrenMixin$Children$ChildInfo childInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        childInfo
      ];
  Map<String, dynamic> toJson() =>
      _$ParentInfoWithChildrenMixin$ChildrenToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentInfoSimpleMixin$Children with EquatableMixin, UserSimpleMixin {
  ParentInfoSimpleMixin$Children();

  factory ParentInfoSimpleMixin$Children.fromJson(Map<String, dynamic> json) =>
      _$ParentInfoSimpleMixin$ChildrenFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$ParentInfoSimpleMixin$ChildrenToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UsersPermissionsLoginInput with EquatableMixin {
  UsersPermissionsLoginInput(
      {@required this.identifier, @required this.password, this.provider});

  factory UsersPermissionsLoginInput.fromJson(Map<String, dynamic> json) =>
      _$UsersPermissionsLoginInputFromJson(json);

  String identifier;

  String password;

  String provider;

  @override
  List<Object> get props => [identifier, password, provider];
  Map<String, dynamic> toJson() => _$UsersPermissionsLoginInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Me$Query$Me with EquatableMixin, UserMeMixin {
  Me$Query$Me();

  factory Me$Query$Me.fromJson(Map<String, dynamic> json) =>
      _$Me$Query$MeFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        phone,
        birthday,
        countryCode,
        secondEmail,
        image,
        role,
        accountInfo,
        authorInfo,
        teacherInfo,
        parentInfo,
        childInfo,
        counselorInfo,
        doctorInfo,
        nurseInfo,
        patientInfo,
        userAgreements
      ];
  Map<String, dynamic> toJson() => _$Me$Query$MeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Me$Query with EquatableMixin {
  Me$Query();

  factory Me$Query.fromJson(Map<String, dynamic> json) =>
      _$Me$QueryFromJson(json);

  Me$Query$Me me;

  int orderCount;

  @override
  List<Object> get props => [me, orderCount];
  Map<String, dynamic> toJson() => _$Me$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyAddresses$Query$FindMyAddress with EquatableMixin, MyAddressMixin {
  MyAddresses$Query$FindMyAddress();

  factory MyAddresses$Query$FindMyAddress.fromJson(Map<String, dynamic> json) =>
      _$MyAddresses$Query$FindMyAddressFromJson(json);

  @override
  List<Object> get props => [id, tag, address];
  Map<String, dynamic> toJson() =>
      _$MyAddresses$Query$FindMyAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyAddresses$Query with EquatableMixin {
  MyAddresses$Query();

  factory MyAddresses$Query.fromJson(Map<String, dynamic> json) =>
      _$MyAddresses$QueryFromJson(json);

  List<MyAddresses$Query$FindMyAddress> findMyAddress;

  @override
  List<Object> get props => [findMyAddress];
  Map<String, dynamic> toJson() => _$MyAddresses$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyOrders$Query$MyOrders with EquatableMixin, OrderSimpleMixin {
  MyOrders$Query$MyOrders();

  factory MyOrders$Query$MyOrders.fromJson(Map<String, dynamic> json) =>
      _$MyOrders$Query$MyOrdersFromJson(json);

  @override
  List<Object> get props => [
        id,
        uuid,
        description,
        currency,
        expire,
        needpayPrice,
        price,
        paiedPrice,
        status,
        updatedAt,
        createdAt,
        items
      ];
  Map<String, dynamic> toJson() => _$MyOrders$Query$MyOrdersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MyOrders$Query with EquatableMixin {
  MyOrders$Query();

  factory MyOrders$Query.fromJson(Map<String, dynamic> json) =>
      _$MyOrders$QueryFromJson(json);

  List<MyOrders$Query$MyOrders> myOrders;

  @override
  List<Object> get props => [myOrders];
  Map<String, dynamic> toJson() => _$MyOrders$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurse$Query$User$NurseInfo with EquatableMixin, NurseInfoSimpleMixin {
  Nurse$Query$User$NurseInfo();

  factory Nurse$Query$User$NurseInfo.fromJson(Map<String, dynamic> json) =>
      _$Nurse$Query$User$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$Nurse$Query$User$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurse$Query$User$PatientInfo with EquatableMixin, PatientInfoSimpleMixin {
  Nurse$Query$User$PatientInfo();

  factory Nurse$Query$User$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$Nurse$Query$User$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$Nurse$Query$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurse$Query$User with EquatableMixin, UserDetailMixin {
  Nurse$Query$User();

  factory Nurse$Query$User.fromJson(Map<String, dynamic> json) =>
      _$Nurse$Query$UserFromJson(json);

  Nurse$Query$User$NurseInfo nurseInfo;

  Nurse$Query$User$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        nurseInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() => _$Nurse$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurse$Query with EquatableMixin {
  Nurse$Query();

  factory Nurse$Query.fromJson(Map<String, dynamic> json) =>
      _$Nurse$QueryFromJson(json);

  Nurse$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$Nurse$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurses$Query$Users$NurseInfo with EquatableMixin, NurseInfoSimpleMixin {
  Nurses$Query$Users$NurseInfo();

  factory Nurses$Query$Users$NurseInfo.fromJson(Map<String, dynamic> json) =>
      _$Nurses$Query$Users$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$Nurses$Query$Users$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurses$Query$Users with EquatableMixin, UserSimpleMixin {
  Nurses$Query$Users();

  factory Nurses$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Nurses$Query$UsersFromJson(json);

  Nurses$Query$Users$NurseInfo nurseInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        nurseInfo
      ];
  Map<String, dynamic> toJson() => _$Nurses$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Nurses$Query with EquatableMixin {
  Nurses$Query();

  factory Nurses$Query.fromJson(Map<String, dynamic> json) =>
      _$Nurses$QueryFromJson(json);

  List<Nurses$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Nurses$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class NurseUpdate$Mutation$UpdateUser$User$NurseInfo
    with EquatableMixin, NurseInfoSimpleMixin {
  NurseUpdate$Mutation$UpdateUser$User$NurseInfo();

  factory NurseUpdate$Mutation$UpdateUser$User$NurseInfo.fromJson(
          Map<String, dynamic> json) =>
      _$NurseUpdate$Mutation$UpdateUser$User$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$NurseUpdate$Mutation$UpdateUser$User$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class NurseUpdate$Mutation$UpdateUser$User
    with EquatableMixin, UserDetailMixin {
  NurseUpdate$Mutation$UpdateUser$User();

  factory NurseUpdate$Mutation$UpdateUser$User.fromJson(
          Map<String, dynamic> json) =>
      _$NurseUpdate$Mutation$UpdateUser$UserFromJson(json);

  NurseUpdate$Mutation$UpdateUser$User$NurseInfo nurseInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        nurseInfo
      ];
  Map<String, dynamic> toJson() =>
      _$NurseUpdate$Mutation$UpdateUser$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class NurseUpdate$Mutation$UpdateUser with EquatableMixin {
  NurseUpdate$Mutation$UpdateUser();

  factory NurseUpdate$Mutation$UpdateUser.fromJson(Map<String, dynamic> json) =>
      _$NurseUpdate$Mutation$UpdateUserFromJson(json);

  NurseUpdate$Mutation$UpdateUser$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$NurseUpdate$Mutation$UpdateUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class NurseUpdate$Mutation with EquatableMixin {
  NurseUpdate$Mutation();

  factory NurseUpdate$Mutation.fromJson(Map<String, dynamic> json) =>
      _$NurseUpdate$MutationFromJson(json);

  NurseUpdate$Mutation$UpdateUser updateUser;

  @override
  List<Object> get props => [updateUser];
  Map<String, dynamic> toJson() => _$NurseUpdate$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Order$Query$Order
    with EquatableMixin, OrderDetailMixin, OrderSimpleMixin {
  Order$Query$Order();

  factory Order$Query$Order.fromJson(Map<String, dynamic> json) =>
      _$Order$Query$OrderFromJson(json);

  @override
  List<Object> get props => [
        additional,
        user,
        shippingAddress,
        id,
        uuid,
        description,
        currency,
        expire,
        needpayPrice,
        price,
        paiedPrice,
        status,
        updatedAt,
        createdAt,
        items
      ];
  Map<String, dynamic> toJson() => _$Order$Query$OrderToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Order$Query with EquatableMixin {
  Order$Query();

  factory Order$Query.fromJson(Map<String, dynamic> json) =>
      _$Order$QueryFromJson(json);

  Order$Query$Order order;

  @override
  List<Object> get props => [order];
  Map<String, dynamic> toJson() => _$Order$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Orders$Query$Orders
    with EquatableMixin, OrderSimpleWithUserMixin, OrderSimpleMixin {
  Orders$Query$Orders();

  factory Orders$Query$Orders.fromJson(Map<String, dynamic> json) =>
      _$Orders$Query$OrdersFromJson(json);

  @override
  List<Object> get props => [
        user,
        id,
        uuid,
        description,
        currency,
        expire,
        needpayPrice,
        price,
        paiedPrice,
        status,
        updatedAt,
        createdAt,
        items
      ];
  Map<String, dynamic> toJson() => _$Orders$Query$OrdersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Orders$Query with EquatableMixin {
  Orders$Query();

  factory Orders$Query.fromJson(Map<String, dynamic> json) =>
      _$Orders$QueryFromJson(json);

  List<Orders$Query$Orders> orders;

  @override
  List<Object> get props => [orders];
  Map<String, dynamic> toJson() => _$Orders$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderSimpleWithUserMixin$User with EquatableMixin, UserSimpleMixin {
  OrderSimpleWithUserMixin$User();

  factory OrderSimpleWithUserMixin$User.fromJson(Map<String, dynamic> json) =>
      _$OrderSimpleWithUserMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$OrderSimpleWithUserMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderStatus$Query$Order with EquatableMixin {
  OrderStatus$Query$Order();

  factory OrderStatus$Query$Order.fromJson(Map<String, dynamic> json) =>
      _$OrderStatus$Query$OrderFromJson(json);

  @JsonKey(unknownEnumValue: OrderStatusType.artemisUnknown)
  OrderStatusType status;

  @override
  List<Object> get props => [status];
  Map<String, dynamic> toJson() => _$OrderStatus$Query$OrderToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderStatus$Query with EquatableMixin {
  OrderStatus$Query();

  factory OrderStatus$Query.fromJson(Map<String, dynamic> json) =>
      _$OrderStatus$QueryFromJson(json);

  OrderStatus$Query$Order order;

  @override
  List<Object> get props => [order];
  Map<String, dynamic> toJson() => _$OrderStatus$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parent$Query$User$ParentInfo with EquatableMixin, ParentInfoSimpleMixin {
  Parent$Query$User$ParentInfo();

  factory Parent$Query$User$ParentInfo.fromJson(Map<String, dynamic> json) =>
      _$Parent$Query$User$ParentInfoFromJson(json);

  @override
  List<Object> get props => [id, children];
  Map<String, dynamic> toJson() => _$Parent$Query$User$ParentInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parent$Query$User$PatientInfo
    with EquatableMixin, PatientInfoDetailMixin {
  Parent$Query$User$PatientInfo();

  factory Parent$Query$User$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$Parent$Query$User$PatientInfoFromJson(json);

  @override
  List<Object> get props => [id, doctor, nurse, counselor, ehrs];
  Map<String, dynamic> toJson() => _$Parent$Query$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parent$Query$User with EquatableMixin, UserDetailMixin {
  Parent$Query$User();

  factory Parent$Query$User.fromJson(Map<String, dynamic> json) =>
      _$Parent$Query$UserFromJson(json);

  Parent$Query$User$ParentInfo parentInfo;

  Parent$Query$User$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        parentInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() => _$Parent$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parent$Query with EquatableMixin {
  Parent$Query();

  factory Parent$Query.fromJson(Map<String, dynamic> json) =>
      _$Parent$QueryFromJson(json);

  Parent$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$Parent$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parenting$Query$Parenting
    with EquatableMixin, ParentingDetailMixin, ParentingSimpleMixin {
  Parenting$Query$Parenting();

  factory Parenting$Query$Parenting.fromJson(Map<String, dynamic> json) =>
      _$Parenting$Query$ParentingFromJson(json);

  @override
  List<Object> get props => [
        pdfFiles,
        media,
        content,
        questionnaire,
        subject,
        id,
        name,
        $$typename,
        post
      ];
  Map<String, dynamic> toJson() => _$Parenting$Query$ParentingToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parenting$Query with EquatableMixin {
  Parenting$Query();

  factory Parenting$Query.fromJson(Map<String, dynamic> json) =>
      _$Parenting$QueryFromJson(json);

  Parenting$Query$Parenting parenting;

  @override
  List<Object> get props => [parenting];
  Map<String, dynamic> toJson() => _$Parenting$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentingDetailMixin$PdfFiles with EquatableMixin {
  ParentingDetailMixin$PdfFiles();

  factory ParentingDetailMixin$PdfFiles.fromJson(Map<String, dynamic> json) =>
      _$ParentingDetailMixin$PdfFilesFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$ParentingDetailMixin$PdfFilesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentingDetailMixin$Media with EquatableMixin {
  ParentingDetailMixin$Media();

  factory ParentingDetailMixin$Media.fromJson(Map<String, dynamic> json) =>
      _$ParentingDetailMixin$MediaFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$ParentingDetailMixin$MediaToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentingDetailMixin$Questionnaire with EquatableMixin {
  ParentingDetailMixin$Questionnaire();

  factory ParentingDetailMixin$Questionnaire.fromJson(
          Map<String, dynamic> json) =>
      _$ParentingDetailMixin$QuestionnaireFromJson(json);

  String name;

  String id;

  String data;

  String displayName;

  String provider;

  @override
  List<Object> get props => [name, id, data, displayName, provider];
  Map<String, dynamic> toJson() =>
      _$ParentingDetailMixin$QuestionnaireToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentingDetailMixin$Subject with EquatableMixin {
  ParentingDetailMixin$Subject();

  factory ParentingDetailMixin$Subject.fromJson(Map<String, dynamic> json) =>
      _$ParentingDetailMixin$SubjectFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$ParentingDetailMixin$SubjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentingSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  ParentingSimpleMixin$Post();

  factory ParentingSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$ParentingSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$ParentingSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parentings$Query$Parentings with EquatableMixin, ParentingSimpleMixin {
  Parentings$Query$Parentings();

  factory Parentings$Query$Parentings.fromJson(Map<String, dynamic> json) =>
      _$Parentings$Query$ParentingsFromJson(json);

  @override
  List<Object> get props => [id, name, $$typename, post];
  Map<String, dynamic> toJson() => _$Parentings$Query$ParentingsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parentings$Query with EquatableMixin {
  Parentings$Query();

  factory Parentings$Query.fromJson(Map<String, dynamic> json) =>
      _$Parentings$QueryFromJson(json);

  List<Parentings$Query$Parentings> parentings;

  @override
  List<Object> get props => [parentings];
  Map<String, dynamic> toJson() => _$Parentings$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parents$Query$Users$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  Parents$Query$Users$PatientInfo();

  factory Parents$Query$Users$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$Parents$Query$Users$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() =>
      _$Parents$Query$Users$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parents$Query$Users$ParentInfo
    with EquatableMixin, ParentInfoSimpleMixin {
  Parents$Query$Users$ParentInfo();

  factory Parents$Query$Users$ParentInfo.fromJson(Map<String, dynamic> json) =>
      _$Parents$Query$Users$ParentInfoFromJson(json);

  @override
  List<Object> get props => [id, children];
  Map<String, dynamic> toJson() => _$Parents$Query$Users$ParentInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parents$Query$Users with EquatableMixin, UserSimpleMixin {
  Parents$Query$Users();

  factory Parents$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Parents$Query$UsersFromJson(json);

  Parents$Query$Users$PatientInfo patientInfo;

  Parents$Query$Users$ParentInfo parentInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        patientInfo,
        parentInfo
      ];
  Map<String, dynamic> toJson() => _$Parents$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Parents$Query with EquatableMixin {
  Parents$Query();

  factory Parents$Query.fromJson(Map<String, dynamic> json) =>
      _$Parents$QueryFromJson(json);

  List<Parents$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Parents$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentUpdate$Mutation$UpdateUser$User$ParentInfo
    with EquatableMixin, ParentInfoSimpleMixin {
  ParentUpdate$Mutation$UpdateUser$User$ParentInfo();

  factory ParentUpdate$Mutation$UpdateUser$User$ParentInfo.fromJson(
          Map<String, dynamic> json) =>
      _$ParentUpdate$Mutation$UpdateUser$User$ParentInfoFromJson(json);

  @override
  List<Object> get props => [id, children];
  Map<String, dynamic> toJson() =>
      _$ParentUpdate$Mutation$UpdateUser$User$ParentInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentUpdate$Mutation$UpdateUser$User
    with EquatableMixin, UserDetailMixin {
  ParentUpdate$Mutation$UpdateUser$User();

  factory ParentUpdate$Mutation$UpdateUser$User.fromJson(
          Map<String, dynamic> json) =>
      _$ParentUpdate$Mutation$UpdateUser$UserFromJson(json);

  ParentUpdate$Mutation$UpdateUser$User$ParentInfo parentInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        parentInfo
      ];
  Map<String, dynamic> toJson() =>
      _$ParentUpdate$Mutation$UpdateUser$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentUpdate$Mutation$UpdateUser with EquatableMixin {
  ParentUpdate$Mutation$UpdateUser();

  factory ParentUpdate$Mutation$UpdateUser.fromJson(
          Map<String, dynamic> json) =>
      _$ParentUpdate$Mutation$UpdateUserFromJson(json);

  ParentUpdate$Mutation$UpdateUser$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$ParentUpdate$Mutation$UpdateUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ParentUpdate$Mutation with EquatableMixin {
  ParentUpdate$Mutation();

  factory ParentUpdate$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ParentUpdate$MutationFromJson(json);

  ParentUpdate$Mutation$UpdateUser updateUser;

  @override
  List<Object> get props => [updateUser];
  Map<String, dynamic> toJson() => _$ParentUpdate$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Patient$Query$Patient$User with EquatableMixin, UserDetailMixin {
  Patient$Query$Patient$User();

  factory Patient$Query$Patient$User.fromJson(Map<String, dynamic> json) =>
      _$Patient$Query$Patient$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content
      ];
  Map<String, dynamic> toJson() => _$Patient$Query$Patient$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Patient$Query$Patient with EquatableMixin, PatientInfoDetailMixin {
  Patient$Query$Patient();

  factory Patient$Query$Patient.fromJson(Map<String, dynamic> json) =>
      _$Patient$Query$PatientFromJson(json);

  Patient$Query$Patient$User user;

  @override
  List<Object> get props => [id, doctor, nurse, counselor, ehrs, user];
  Map<String, dynamic> toJson() => _$Patient$Query$PatientToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Patient$Query with EquatableMixin {
  Patient$Query();

  factory Patient$Query.fromJson(Map<String, dynamic> json) =>
      _$Patient$QueryFromJson(json);

  Patient$Query$Patient patient;

  @override
  List<Object> get props => [patient];
  Map<String, dynamic> toJson() => _$Patient$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Patients$Query$Patients with EquatableMixin, PatientInfoSimpleMixin {
  Patients$Query$Patients();

  factory Patients$Query$Patients.fromJson(Map<String, dynamic> json) =>
      _$Patients$Query$PatientsFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$Patients$Query$PatientsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Patients$Query with EquatableMixin {
  Patients$Query();

  factory Patients$Query.fromJson(Map<String, dynamic> json) =>
      _$Patients$QueryFromJson(json);

  List<Patients$Query$Patients> patients;

  @override
  List<Object> get props => [patients];
  Map<String, dynamic> toJson() => _$Patients$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethod$Query$PaymentMethod
    with EquatableMixin, PaymentMethodSimpleMixin {
  PaymentMethod$Query$PaymentMethod();

  factory PaymentMethod$Query$PaymentMethod.fromJson(
          Map<String, dynamic> json) =>
      _$PaymentMethod$Query$PaymentMethodFromJson(json);

  @override
  List<Object> get props =>
      [billingAddress, creditCard, id, livemode, stripeId, type, user];
  Map<String, dynamic> toJson() =>
      _$PaymentMethod$Query$PaymentMethodToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethod$Query with EquatableMixin {
  PaymentMethod$Query();

  factory PaymentMethod$Query.fromJson(Map<String, dynamic> json) =>
      _$PaymentMethod$QueryFromJson(json);

  PaymentMethod$Query$PaymentMethod paymentMethod;

  @override
  List<Object> get props => [paymentMethod];
  Map<String, dynamic> toJson() => _$PaymentMethod$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethods$Query$PaymentMethods
    with EquatableMixin, PaymentMethodSimpleMixin {
  PaymentMethods$Query$PaymentMethods();

  factory PaymentMethods$Query$PaymentMethods.fromJson(
          Map<String, dynamic> json) =>
      _$PaymentMethods$Query$PaymentMethodsFromJson(json);

  @override
  List<Object> get props =>
      [billingAddress, creditCard, id, livemode, stripeId, type, user];
  Map<String, dynamic> toJson() =>
      _$PaymentMethods$Query$PaymentMethodsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethods$Query with EquatableMixin {
  PaymentMethods$Query();

  factory PaymentMethods$Query.fromJson(Map<String, dynamic> json) =>
      _$PaymentMethods$QueryFromJson(json);

  List<PaymentMethods$Query$PaymentMethods> paymentMethods;

  @override
  List<Object> get props => [paymentMethods];
  Map<String, dynamic> toJson() => _$PaymentMethods$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentPolicy$Query$PaymentPolicy with EquatableMixin {
  PaymentPolicy$Query$PaymentPolicy();

  factory PaymentPolicy$Query$PaymentPolicy.fromJson(
          Map<String, dynamic> json) =>
      _$PaymentPolicy$Query$PaymentPolicyFromJson(json);

  String id;

  String policy;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  @override
  List<Object> get props => [id, policy, updatedAt];
  Map<String, dynamic> toJson() =>
      _$PaymentPolicy$Query$PaymentPolicyToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaymentPolicy$Query with EquatableMixin {
  PaymentPolicy$Query();

  factory PaymentPolicy$Query.fromJson(Map<String, dynamic> json) =>
      _$PaymentPolicy$QueryFromJson(json);

  PaymentPolicy$Query$PaymentPolicy paymentPolicy;

  @override
  List<Object> get props => [paymentPolicy];
  Map<String, dynamic> toJson() => _$PaymentPolicy$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Plan$Query$Plan$Questionnaire
    with EquatableMixin, QuestionnaireSimpleMixin {
  Plan$Query$Plan$Questionnaire();

  factory Plan$Query$Plan$Questionnaire.fromJson(Map<String, dynamic> json) =>
      _$Plan$Query$Plan$QuestionnaireFromJson(json);

  @override
  List<Object> get props => [id, $$typename, provider, data, name, displayName];
  Map<String, dynamic> toJson() => _$Plan$Query$Plan$QuestionnaireToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Plan$Query$Plan$ForPerson with EquatableMixin {
  Plan$Query$Plan$ForPerson();

  factory Plan$Query$Plan$ForPerson.fromJson(Map<String, dynamic> json) =>
      _$Plan$Query$Plan$ForPersonFromJson(json);

  @JsonKey(unknownEnumValue: ForType.artemisUnknown)
  ForType type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$Plan$Query$Plan$ForPersonToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Plan$Query$Plan with EquatableMixin, PlanDetailMixin, PlanSimpleMixin {
  Plan$Query$Plan();

  factory Plan$Query$Plan.fromJson(Map<String, dynamic> json) =>
      _$Plan$Query$PlanFromJson(json);

  Plan$Query$Plan$Questionnaire questionnaire;

  Plan$Query$Plan$ForPerson forPerson;

  @override
  List<Object> get props => [
        content,
        name,
        id,
        assessment,
        exercises,
        post,
        supplements,
        parentings,
        articles,
        books,
        questionnaire,
        forPerson
      ];
  Map<String, dynamic> toJson() => _$Plan$Query$PlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Plan$Query with EquatableMixin {
  Plan$Query();

  factory Plan$Query.fromJson(Map<String, dynamic> json) =>
      _$Plan$QueryFromJson(json);

  Plan$Query$Plan plan;

  @override
  List<Object> get props => [plan];
  Map<String, dynamic> toJson() => _$Plan$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Assessment
    with EquatableMixin, AssessmentQuestionnaireSimpleMixin {
  PlanSimpleMixin$Assessment();

  factory PlanSimpleMixin$Assessment.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$AssessmentFromJson(json);

  @override
  List<Object> get props => [name, id, post, questionnaireOnly];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$AssessmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Exercises with EquatableMixin, ExerciseSimpleMixin {
  PlanSimpleMixin$Exercises();

  factory PlanSimpleMixin$Exercises.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$ExercisesFromJson(json);

  @override
  List<Object> get props => [id, updatedAt, post];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$ExercisesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  PlanSimpleMixin$Post();

  factory PlanSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Supplements with EquatableMixin, SupplementSimpleMixin {
  PlanSimpleMixin$Supplements();

  factory PlanSimpleMixin$Supplements.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$SupplementsFromJson(json);

  @override
  List<Object> get props => [$$typename, name, id, post];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$SupplementsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Parentings with EquatableMixin, ParentingSimpleMixin {
  PlanSimpleMixin$Parentings();

  factory PlanSimpleMixin$Parentings.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$ParentingsFromJson(json);

  @override
  List<Object> get props => [id, name, $$typename, post];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$ParentingsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Articles with EquatableMixin, ArticleSimpleMixin {
  PlanSimpleMixin$Articles();

  factory PlanSimpleMixin$Articles.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$ArticlesFromJson(json);

  @override
  List<Object> get props => [id, name, media, publishedAt, post];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$ArticlesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PlanSimpleMixin$Books with EquatableMixin, BookSimpleMixin {
  PlanSimpleMixin$Books();

  factory PlanSimpleMixin$Books.fromJson(Map<String, dynamic> json) =>
      _$PlanSimpleMixin$BooksFromJson(json);

  @override
  List<Object> get props => [name, id, post];
  Map<String, dynamic> toJson() => _$PlanSimpleMixin$BooksToJson(this);
}

@JsonSerializable(explicitToJson: true)
class SupplementSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  SupplementSimpleMixin$Post();

  factory SupplementSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$SupplementSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$SupplementSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Plans$Query$Plans with EquatableMixin, PlanSimpleMixin {
  Plans$Query$Plans();

  factory Plans$Query$Plans.fromJson(Map<String, dynamic> json) =>
      _$Plans$Query$PlansFromJson(json);

  @override
  List<Object> get props => [
        name,
        id,
        assessment,
        exercises,
        post,
        supplements,
        parentings,
        articles,
        books
      ];
  Map<String, dynamic> toJson() => _$Plans$Query$PlansToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Plans$Query with EquatableMixin {
  Plans$Query();

  factory Plans$Query.fromJson(Map<String, dynamic> json) =>
      _$Plans$QueryFromJson(json);

  List<Plans$Query$Plans> plans;

  @override
  List<Object> get props => [plans];
  Map<String, dynamic> toJson() => _$Plans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Post$Query$Post with EquatableMixin, PostSimpleMixin {
  Post$Query$Post();

  factory Post$Query$Post.fromJson(Map<String, dynamic> json) =>
      _$Post$Query$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        entityRawId,
        entityType,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$Post$Query$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Post$Query with EquatableMixin {
  Post$Query();

  factory Post$Query.fromJson(Map<String, dynamic> json) =>
      _$Post$QueryFromJson(json);

  Post$Query$Post post;

  @override
  List<Object> get props => [post];
  Map<String, dynamic> toJson() => _$Post$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Medias with EquatableMixin {
  PostSimpleMixin$Medias();

  factory PostSimpleMixin$Medias.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$MediasFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  String id;

  String url;

  Object formats;

  int width;

  int height;

  String ext;

  String caption;

  String name;

  double size;

  @override
  List<Object> get props =>
      [$$typename, id, url, formats, width, height, ext, caption, name, size];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$MediasToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Categories with EquatableMixin, CategoryDetailMixin {
  PostSimpleMixin$Categories();

  factory PostSimpleMixin$Categories.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$CategoriesFromJson(json);

  @override
  List<Object> get props => [id, name, type];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$CategoriesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$VipColor with EquatableMixin {
  PostSimpleMixin$VipColor();

  factory PostSimpleMixin$VipColor.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$VipColorFromJson(json);

  String color;

  @override
  List<Object> get props => [color];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$VipColorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$CoverBackgroundColor with EquatableMixin {
  PostSimpleMixin$CoverBackgroundColor();

  factory PostSimpleMixin$CoverBackgroundColor.fromJson(
          Map<String, dynamic> json) =>
      _$PostSimpleMixin$CoverBackgroundColorFromJson(json);

  String color;

  @override
  List<Object> get props => [color];
  Map<String, dynamic> toJson() =>
      _$PostSimpleMixin$CoverBackgroundColorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Trademark$Image with EquatableMixin {
  PostSimpleMixin$Trademark$Image();

  factory PostSimpleMixin$Trademark$Image.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$Trademark$ImageFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() =>
      _$PostSimpleMixin$Trademark$ImageToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Trademark with EquatableMixin {
  PostSimpleMixin$Trademark();

  factory PostSimpleMixin$Trademark.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$TrademarkFromJson(json);

  String name;

  PostSimpleMixin$Trademark$Image image;

  @override
  List<Object> get props => [name, image];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$TrademarkToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Currency with EquatableMixin, CurrencyMixin {
  PostSimpleMixin$Currency();

  factory PostSimpleMixin$Currency.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$CurrencyFromJson(json);

  @override
  List<Object> get props => [
        code,
        decimalDigits,
        id,
        name,
        namePlural,
        rounding,
        symbol,
        symbolNative
      ];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$CurrencyToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Author$Role with EquatableMixin {
  PostSimpleMixin$Author$Role();

  factory PostSimpleMixin$Author$Role.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$Author$RoleFromJson(json);

  String name;

  @override
  List<Object> get props => [name];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$Author$RoleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PostSimpleMixin$Author with EquatableMixin {
  PostSimpleMixin$Author();

  factory PostSimpleMixin$Author.fromJson(Map<String, dynamic> json) =>
      _$PostSimpleMixin$AuthorFromJson(json);

  String id;

  String fullName;

  PostSimpleMixin$Author$Role role;

  @override
  List<Object> get props => [id, fullName, role];
  Map<String, dynamic> toJson() => _$PostSimpleMixin$AuthorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Posts$Query$Posts with EquatableMixin, PostSimpleMixin {
  Posts$Query$Posts();

  factory Posts$Query$Posts.fromJson(Map<String, dynamic> json) =>
      _$Posts$Query$PostsFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        entityRawId,
        entityType,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$Posts$Query$PostsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Posts$Query with EquatableMixin {
  Posts$Query();

  factory Posts$Query.fromJson(Map<String, dynamic> json) =>
      _$Posts$QueryFromJson(json);

  List<Posts$Query$Posts> posts;

  @override
  List<Object> get props => [posts];
  Map<String, dynamic> toJson() => _$Posts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Register$Mutation$Register$User with EquatableMixin, UserMeMixin {
  Register$Mutation$Register$User();

  factory Register$Mutation$Register$User.fromJson(Map<String, dynamic> json) =>
      _$Register$Mutation$Register$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        phone,
        birthday,
        countryCode,
        secondEmail,
        image,
        role,
        accountInfo,
        authorInfo,
        teacherInfo,
        parentInfo,
        childInfo,
        counselorInfo,
        doctorInfo,
        nurseInfo,
        patientInfo,
        userAgreements
      ];
  Map<String, dynamic> toJson() =>
      _$Register$Mutation$Register$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Register$Mutation$Register with EquatableMixin {
  Register$Mutation$Register();

  factory Register$Mutation$Register.fromJson(Map<String, dynamic> json) =>
      _$Register$Mutation$RegisterFromJson(json);

  String jwt;

  Register$Mutation$Register$User user;

  @override
  List<Object> get props => [jwt, user];
  Map<String, dynamic> toJson() => _$Register$Mutation$RegisterToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Register$Mutation with EquatableMixin {
  Register$Mutation();

  factory Register$Mutation.fromJson(Map<String, dynamic> json) =>
      _$Register$MutationFromJson(json);

  Register$Mutation$Register register;

  @override
  List<Object> get props => [register];
  Map<String, dynamic> toJson() => _$Register$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UsersPermissionsRegisterInput with EquatableMixin {
  UsersPermissionsRegisterInput(
      {@required this.email, @required this.password, @required this.username});

  factory UsersPermissionsRegisterInput.fromJson(Map<String, dynamic> json) =>
      _$UsersPermissionsRegisterInputFromJson(json);

  String email;

  String password;

  String username;

  @override
  List<Object> get props => [email, password, username];
  Map<String, dynamic> toJson() => _$UsersPermissionsRegisterInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminder$Query$Reminder$Related with EquatableMixin {
  RemoteReminder$Query$Reminder$Related();

  factory RemoteReminder$Query$Reminder$Related.fromJson(
          Map<String, dynamic> json) =>
      _$RemoteReminder$Query$Reminder$RelatedFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  @override
  List<Object> get props => [$$typename];
  Map<String, dynamic> toJson() =>
      _$RemoteReminder$Query$Reminder$RelatedToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminder$Query$Reminder$User with EquatableMixin, UserSimpleMixin {
  RemoteReminder$Query$Reminder$User();

  factory RemoteReminder$Query$Reminder$User.fromJson(
          Map<String, dynamic> json) =>
      _$RemoteReminder$Query$Reminder$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() =>
      _$RemoteReminder$Query$Reminder$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminder$Query$Reminder with EquatableMixin {
  RemoteReminder$Query$Reminder();

  factory RemoteReminder$Query$Reminder.fromJson(Map<String, dynamic> json) =>
      _$RemoteReminder$Query$ReminderFromJson(json);

  String id;

  String name;

  String body;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime dateTime;

  List<RemoteReminder$Query$Reminder$Related> related;

  RemoteReminder$Query$Reminder$User user;

  String source;

  String sourceId;

  @override
  List<Object> get props =>
      [id, name, body, dateTime, related, user, source, sourceId];
  Map<String, dynamic> toJson() => _$RemoteReminder$Query$ReminderToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminder$Query with EquatableMixin {
  RemoteReminder$Query();

  factory RemoteReminder$Query.fromJson(Map<String, dynamic> json) =>
      _$RemoteReminder$QueryFromJson(json);

  RemoteReminder$Query$Reminder reminder;

  @override
  List<Object> get props => [reminder];
  Map<String, dynamic> toJson() => _$RemoteReminder$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminders$Query$Reminders with EquatableMixin, ReminderSimpleMixin {
  RemoteReminders$Query$Reminders();

  factory RemoteReminders$Query$Reminders.fromJson(Map<String, dynamic> json) =>
      _$RemoteReminders$Query$RemindersFromJson(json);

  @override
  List<Object> get props => [id, name, body, type, user, related];
  Map<String, dynamic> toJson() =>
      _$RemoteReminders$Query$RemindersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminders$Query with EquatableMixin {
  RemoteReminders$Query();

  factory RemoteReminders$Query.fromJson(Map<String, dynamic> json) =>
      _$RemoteReminders$QueryFromJson(json);

  List<RemoteReminders$Query$Reminders> reminders;

  @override
  List<Object> get props => [reminders];
  Map<String, dynamic> toJson() => _$RemoteReminders$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReminderSimpleMixin$User with EquatableMixin, UserSimpleMixin {
  ReminderSimpleMixin$User();

  factory ReminderSimpleMixin$User.fromJson(Map<String, dynamic> json) =>
      _$ReminderSimpleMixin$UserFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() => _$ReminderSimpleMixin$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReminderSimpleMixin$Related with EquatableMixin {
  ReminderSimpleMixin$Related();

  factory ReminderSimpleMixin$Related.fromJson(Map<String, dynamic> json) =>
      _$ReminderSimpleMixin$RelatedFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  @override
  List<Object> get props => [$$typename];
  Map<String, dynamic> toJson() => _$ReminderSimpleMixin$RelatedToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RequestPayment$Mutation$RequestOrderPay$Order
    with EquatableMixin, OrderDetailMixin, OrderSimpleMixin {
  RequestPayment$Mutation$RequestOrderPay$Order();

  factory RequestPayment$Mutation$RequestOrderPay$Order.fromJson(
          Map<String, dynamic> json) =>
      _$RequestPayment$Mutation$RequestOrderPay$OrderFromJson(json);

  @override
  List<Object> get props => [
        additional,
        user,
        shippingAddress,
        id,
        uuid,
        description,
        currency,
        expire,
        needpayPrice,
        price,
        paiedPrice,
        status,
        updatedAt,
        createdAt,
        items
      ];
  Map<String, dynamic> toJson() =>
      _$RequestPayment$Mutation$RequestOrderPay$OrderToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RequestPayment$Mutation$RequestOrderPay with EquatableMixin {
  RequestPayment$Mutation$RequestOrderPay();

  factory RequestPayment$Mutation$RequestOrderPay.fromJson(
          Map<String, dynamic> json) =>
      _$RequestPayment$Mutation$RequestOrderPayFromJson(json);

  Object ret;

  RequestPayment$Mutation$RequestOrderPay$Order order;

  @override
  List<Object> get props => [ret, order];
  Map<String, dynamic> toJson() =>
      _$RequestPayment$Mutation$RequestOrderPayToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RequestPayment$Mutation with EquatableMixin {
  RequestPayment$Mutation();

  factory RequestPayment$Mutation.fromJson(Map<String, dynamic> json) =>
      _$RequestPayment$MutationFromJson(json);

  RequestPayment$Mutation$RequestOrderPay requestOrderPay;

  @override
  List<Object> get props => [requestOrderPay];
  Map<String, dynamic> toJson() => _$RequestPayment$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class OrderPayInput with EquatableMixin {
  OrderPayInput({this.options, @required this.provider});

  factory OrderPayInput.fromJson(Map<String, dynamic> json) =>
      _$OrderPayInputFromJson(json);

  Object options;

  String provider;

  @override
  List<Object> get props => [options, provider];
  Map<String, dynamic> toJson() => _$OrderPayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RequestOrderPayInput with EquatableMixin {
  RequestOrderPayInput({this.data, this.where});

  factory RequestOrderPayInput.fromJson(Map<String, dynamic> json) =>
      _$RequestOrderPayInputFromJson(json);

  OrderPayInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$RequestOrderPayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Supplement$Query$Supplement
    with EquatableMixin, SupplementDetaileMixin, SupplementSimpleMixin {
  Supplement$Query$Supplement();

  factory Supplement$Query$Supplement.fromJson(Map<String, dynamic> json) =>
      _$Supplement$Query$SupplementFromJson(json);

  @override
  List<Object> get props =>
      [provider, content, subject, forPerson, $$typename, name, id, post];
  Map<String, dynamic> toJson() => _$Supplement$Query$SupplementToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Supplement$Query with EquatableMixin {
  Supplement$Query();

  factory Supplement$Query.fromJson(Map<String, dynamic> json) =>
      _$Supplement$QueryFromJson(json);

  Supplement$Query$Supplement supplement;

  @override
  List<Object> get props => [supplement];
  Map<String, dynamic> toJson() => _$Supplement$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class SupplementDetaileMixin$Subject with EquatableMixin {
  SupplementDetaileMixin$Subject();

  factory SupplementDetaileMixin$Subject.fromJson(Map<String, dynamic> json) =>
      _$SupplementDetaileMixin$SubjectFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$SupplementDetaileMixin$SubjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class SupplementDetaileMixin$ForPerson with EquatableMixin {
  SupplementDetaileMixin$ForPerson();

  factory SupplementDetaileMixin$ForPerson.fromJson(
          Map<String, dynamic> json) =>
      _$SupplementDetaileMixin$ForPersonFromJson(json);

  @JsonKey(unknownEnumValue: ForType.artemisUnknown)
  ForType type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() =>
      _$SupplementDetaileMixin$ForPersonToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Supplements$Query$Supplements with EquatableMixin, SupplementSimpleMixin {
  Supplements$Query$Supplements();

  factory Supplements$Query$Supplements.fromJson(Map<String, dynamic> json) =>
      _$Supplements$Query$SupplementsFromJson(json);

  @override
  List<Object> get props => [$$typename, name, id, post];
  Map<String, dynamic> toJson() => _$Supplements$Query$SupplementsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Supplements$Query with EquatableMixin {
  Supplements$Query();

  factory Supplements$Query.fromJson(Map<String, dynamic> json) =>
      _$Supplements$QueryFromJson(json);

  List<Supplements$Query$Supplements> supplements;

  @override
  List<Object> get props => [supplements];
  Map<String, dynamic> toJson() => _$Supplements$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teacher$Query$User$TeacherInfo
    with EquatableMixin, TeacherInfoSimpleMixin {
  Teacher$Query$User$TeacherInfo();

  factory Teacher$Query$User$TeacherInfo.fromJson(Map<String, dynamic> json) =>
      _$Teacher$Query$User$TeacherInfoFromJson(json);

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() => _$Teacher$Query$User$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teacher$Query$User$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  Teacher$Query$User$PatientInfo();

  factory Teacher$Query$User$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$Teacher$Query$User$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$Teacher$Query$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teacher$Query$User with EquatableMixin, UserDetailMixin {
  Teacher$Query$User();

  factory Teacher$Query$User.fromJson(Map<String, dynamic> json) =>
      _$Teacher$Query$UserFromJson(json);

  Teacher$Query$User$TeacherInfo teacherInfo;

  Teacher$Query$User$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        teacherInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() => _$Teacher$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teacher$Query with EquatableMixin {
  Teacher$Query();

  factory Teacher$Query.fromJson(Map<String, dynamic> json) =>
      _$Teacher$QueryFromJson(json);

  Teacher$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$Teacher$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teachers$Query$Users$TeacherInfo
    with EquatableMixin, TeacherInfoSimpleMixin {
  Teachers$Query$Users$TeacherInfo();

  factory Teachers$Query$Users$TeacherInfo.fromJson(
          Map<String, dynamic> json) =>
      _$Teachers$Query$Users$TeacherInfoFromJson(json);

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() =>
      _$Teachers$Query$Users$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teachers$Query$Users with EquatableMixin, UserSimpleMixin {
  Teachers$Query$Users();

  factory Teachers$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Teachers$Query$UsersFromJson(json);

  Teachers$Query$Users$TeacherInfo teacherInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        teacherInfo
      ];
  Map<String, dynamic> toJson() => _$Teachers$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Teachers$Query with EquatableMixin {
  Teachers$Query();

  factory Teachers$Query.fromJson(Map<String, dynamic> json) =>
      _$Teachers$QueryFromJson(json);

  List<Teachers$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Teachers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TeacherUpdate$Mutation$UpdateUser$User$TeacherInfo
    with EquatableMixin, TeacherInfoSimpleMixin {
  TeacherUpdate$Mutation$UpdateUser$User$TeacherInfo();

  factory TeacherUpdate$Mutation$UpdateUser$User$TeacherInfo.fromJson(
          Map<String, dynamic> json) =>
      _$TeacherUpdate$Mutation$UpdateUser$User$TeacherInfoFromJson(json);

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() =>
      _$TeacherUpdate$Mutation$UpdateUser$User$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TeacherUpdate$Mutation$UpdateUser$User
    with EquatableMixin, UserDetailMixin {
  TeacherUpdate$Mutation$UpdateUser$User();

  factory TeacherUpdate$Mutation$UpdateUser$User.fromJson(
          Map<String, dynamic> json) =>
      _$TeacherUpdate$Mutation$UpdateUser$UserFromJson(json);

  TeacherUpdate$Mutation$UpdateUser$User$TeacherInfo teacherInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        teacherInfo
      ];
  Map<String, dynamic> toJson() =>
      _$TeacherUpdate$Mutation$UpdateUser$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TeacherUpdate$Mutation$UpdateUser with EquatableMixin {
  TeacherUpdate$Mutation$UpdateUser();

  factory TeacherUpdate$Mutation$UpdateUser.fromJson(
          Map<String, dynamic> json) =>
      _$TeacherUpdate$Mutation$UpdateUserFromJson(json);

  TeacherUpdate$Mutation$UpdateUser$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$TeacherUpdate$Mutation$UpdateUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TeacherUpdate$Mutation with EquatableMixin {
  TeacherUpdate$Mutation();

  factory TeacherUpdate$Mutation.fromJson(Map<String, dynamic> json) =>
      _$TeacherUpdate$MutationFromJson(json);

  TeacherUpdate$Mutation$UpdateUser updateUser;

  @override
  List<Object> get props => [updateUser];
  Map<String, dynamic> toJson() => _$TeacherUpdate$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BatchTelemetry$Mutation$BatchTelemetry with EquatableMixin {
  BatchTelemetry$Mutation$BatchTelemetry();

  factory BatchTelemetry$Mutation$BatchTelemetry.fromJson(
          Map<String, dynamic> json) =>
      _$BatchTelemetry$Mutation$BatchTelemetryFromJson(json);

  int successCount;

  @override
  List<Object> get props => [successCount];
  Map<String, dynamic> toJson() =>
      _$BatchTelemetry$Mutation$BatchTelemetryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BatchTelemetry$Mutation with EquatableMixin {
  BatchTelemetry$Mutation();

  factory BatchTelemetry$Mutation.fromJson(Map<String, dynamic> json) =>
      _$BatchTelemetry$MutationFromJson(json);

  BatchTelemetry$Mutation$BatchTelemetry batchTelemetry;

  @override
  List<Object> get props => [batchTelemetry];
  Map<String, dynamic> toJson() => _$BatchTelemetry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TelemetryInput with EquatableMixin {
  TelemetryInput({this.createdBy, this.raw, this.updatedBy});

  factory TelemetryInput.fromJson(Map<String, dynamic> json) =>
      _$TelemetryInputFromJson(json);

  @JsonKey(name: 'created_by')
  String createdBy;

  Object raw;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  @override
  List<Object> get props => [createdBy, raw, updatedBy];
  Map<String, dynamic> toJson() => _$TelemetryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BatchTelemetryInput with EquatableMixin {
  BatchTelemetryInput({this.data});

  factory BatchTelemetryInput.fromJson(Map<String, dynamic> json) =>
      _$BatchTelemetryInputFromJson(json);

  List<TelemetryInput> data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$BatchTelemetryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateAnswer$Mutation$UpdateQuestionnaireAnswer$QuestionnaireAnswer
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  UpdateAnswer$Mutation$UpdateQuestionnaireAnswer$QuestionnaireAnswer();

  factory UpdateAnswer$Mutation$UpdateQuestionnaireAnswer$QuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateAnswer$Mutation$UpdateQuestionnaireAnswer$QuestionnaireAnswerFromJson(
          json);

  @override
  List<Object> get props =>
      [createdAt, id, name, questionnaire, updatedAt, user, submitted, data];
  Map<String, dynamic> toJson() =>
      _$UpdateAnswer$Mutation$UpdateQuestionnaireAnswer$QuestionnaireAnswerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateAnswer$Mutation$UpdateQuestionnaireAnswer with EquatableMixin {
  UpdateAnswer$Mutation$UpdateQuestionnaireAnswer();

  factory UpdateAnswer$Mutation$UpdateQuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateAnswer$Mutation$UpdateQuestionnaireAnswerFromJson(json);

  UpdateAnswer$Mutation$UpdateQuestionnaireAnswer$QuestionnaireAnswer
      questionnaireAnswer;

  @override
  List<Object> get props => [questionnaireAnswer];
  Map<String, dynamic> toJson() =>
      _$UpdateAnswer$Mutation$UpdateQuestionnaireAnswerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateAnswer$Mutation with EquatableMixin {
  UpdateAnswer$Mutation();

  factory UpdateAnswer$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateAnswer$MutationFromJson(json);

  UpdateAnswer$Mutation$UpdateQuestionnaireAnswer updateQuestionnaireAnswer;

  @override
  List<Object> get props => [updateQuestionnaireAnswer];
  Map<String, dynamic> toJson() => _$UpdateAnswer$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditQuestionnaireAnswerInput with EquatableMixin {
  EditQuestionnaireAnswerInput(
      {this.createdBy,
      this.data,
      this.name,
      this.questionnaire,
      this.submitted,
      this.updatedBy,
      this.user});

  factory EditQuestionnaireAnswerInput.fromJson(Map<String, dynamic> json) =>
      _$EditQuestionnaireAnswerInputFromJson(json);

  @JsonKey(name: 'created_by')
  String createdBy;

  Object data;

  String name;

  String questionnaire;

  bool submitted;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props =>
      [createdBy, data, name, questionnaire, submitted, updatedBy, user];
  Map<String, dynamic> toJson() => _$EditQuestionnaireAnswerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateQuestionnaireAnswerInput with EquatableMixin {
  UpdateQuestionnaireAnswerInput({this.data, this.where});

  factory UpdateQuestionnaireAnswerInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateQuestionnaireAnswerInputFromJson(json);

  EditQuestionnaireAnswerInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateQuestionnaireAnswerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCreditCard$Mutation$UpdateCreditCard$CreditCard
    with EquatableMixin, CreditCardSimpleMixin {
  UpdateCreditCard$Mutation$UpdateCreditCard$CreditCard();

  factory UpdateCreditCard$Mutation$UpdateCreditCard$CreditCard.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateCreditCard$Mutation$UpdateCreditCard$CreditCardFromJson(json);

  @override
  List<Object> get props => [address, cvc, expMonth, expYear, id, name, number];
  Map<String, dynamic> toJson() =>
      _$UpdateCreditCard$Mutation$UpdateCreditCard$CreditCardToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCreditCard$Mutation$UpdateCreditCard with EquatableMixin {
  UpdateCreditCard$Mutation$UpdateCreditCard();

  factory UpdateCreditCard$Mutation$UpdateCreditCard.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateCreditCard$Mutation$UpdateCreditCardFromJson(json);

  UpdateCreditCard$Mutation$UpdateCreditCard$CreditCard creditCard;

  @override
  List<Object> get props => [creditCard];
  Map<String, dynamic> toJson() =>
      _$UpdateCreditCard$Mutation$UpdateCreditCardToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCreditCard$Mutation with EquatableMixin {
  UpdateCreditCard$Mutation();

  factory UpdateCreditCard$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateCreditCard$MutationFromJson(json);

  UpdateCreditCard$Mutation$UpdateCreditCard updateCreditCard;

  @override
  List<Object> get props => [updateCreditCard];
  Map<String, dynamic> toJson() => _$UpdateCreditCard$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditCreditCardInput with EquatableMixin {
  EditCreditCardInput(
      {this.address,
      this.createdBy,
      this.cvc,
      this.expMonth,
      this.expYear,
      this.name,
      this.number,
      this.updatedBy,
      this.user});

  factory EditCreditCardInput.fromJson(Map<String, dynamic> json) =>
      _$EditCreditCardInputFromJson(json);

  String address;

  @JsonKey(name: 'created_by')
  String createdBy;

  String cvc;

  int expMonth;

  int expYear;

  String name;

  String number;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        address,
        createdBy,
        cvc,
        expMonth,
        expYear,
        name,
        number,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$EditCreditCardInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCreditCardInput with EquatableMixin {
  UpdateCreditCardInput({this.data, this.where});

  factory UpdateCreditCardInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateCreditCardInputFromJson(json);

  EditCreditCardInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateCreditCardInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhr$Mutation$UpdateEhr$Ehr$Medias
    with EquatableMixin, MediaSimpleMixin {
  UpdateEhr$Mutation$UpdateEhr$Ehr$Medias();

  factory UpdateEhr$Mutation$UpdateEhr$Ehr$Medias.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateEhr$Mutation$UpdateEhr$Ehr$MediasFromJson(json);

  @override
  List<Object> get props => [id, url];
  Map<String, dynamic> toJson() =>
      _$UpdateEhr$Mutation$UpdateEhr$Ehr$MediasToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhr$Mutation$UpdateEhr$Ehr$QuestionnaireAnswer
    with EquatableMixin, QuestionnaireAnswerSimpleMixin {
  UpdateEhr$Mutation$UpdateEhr$Ehr$QuestionnaireAnswer();

  factory UpdateEhr$Mutation$UpdateEhr$Ehr$QuestionnaireAnswer.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateEhr$Mutation$UpdateEhr$Ehr$QuestionnaireAnswerFromJson(json);

  @override
  List<Object> get props =>
      [createdAt, id, name, questionnaire, updatedAt, user, submitted, data];
  Map<String, dynamic> toJson() =>
      _$UpdateEhr$Mutation$UpdateEhr$Ehr$QuestionnaireAnswerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhr$Mutation$UpdateEhr$Ehr$Summaries with EquatableMixin {
  UpdateEhr$Mutation$UpdateEhr$Ehr$Summaries();

  factory UpdateEhr$Mutation$UpdateEhr$Ehr$Summaries.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateEhr$Mutation$UpdateEhr$Ehr$SummariesFromJson(json);

  String id;

  int rating;

  @JsonKey(unknownEnumValue: SummaryType.artemisUnknown)
  SummaryType type;

  @JsonKey(unknownEnumValue: SummarySubject.artemisUnknown)
  SummarySubject subject;

  @override
  List<Object> get props => [id, rating, type, subject];
  Map<String, dynamic> toJson() =>
      _$UpdateEhr$Mutation$UpdateEhr$Ehr$SummariesToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhr$Mutation$UpdateEhr$Ehr with EquatableMixin, EhrSimpleMixin {
  UpdateEhr$Mutation$UpdateEhr$Ehr();

  factory UpdateEhr$Mutation$UpdateEhr$Ehr.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateEhr$Mutation$UpdateEhr$EhrFromJson(json);

  String source;

  @JsonKey(name: 'source_id')
  String sourceId;

  List<UpdateEhr$Mutation$UpdateEhr$Ehr$Medias> medias;

  Object data;

  @JsonKey(name: 'questionnaire_answer')
  UpdateEhr$Mutation$UpdateEhr$Ehr$QuestionnaireAnswer questionnaireAnswer;

  List<UpdateEhr$Mutation$UpdateEhr$Ehr$Summaries> summaries;

  @JsonKey(name: 'office_comments')
  String officeComments;

  @override
  List<Object> get props => [
        id,
        updatedAt,
        createdAt,
        user,
        patient,
        type,
        subject,
        status,
        source,
        sourceId,
        medias,
        data,
        questionnaireAnswer,
        summaries,
        officeComments
      ];
  Map<String, dynamic> toJson() =>
      _$UpdateEhr$Mutation$UpdateEhr$EhrToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhr$Mutation$UpdateEhr with EquatableMixin {
  UpdateEhr$Mutation$UpdateEhr();

  factory UpdateEhr$Mutation$UpdateEhr.fromJson(Map<String, dynamic> json) =>
      _$UpdateEhr$Mutation$UpdateEhrFromJson(json);

  UpdateEhr$Mutation$UpdateEhr$Ehr ehr;

  @override
  List<Object> get props => [ehr];
  Map<String, dynamic> toJson() => _$UpdateEhr$Mutation$UpdateEhrToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhr$Mutation with EquatableMixin {
  UpdateEhr$Mutation();

  factory UpdateEhr$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateEhr$MutationFromJson(json);

  UpdateEhr$Mutation$UpdateEhr updateEhr;

  @override
  List<Object> get props => [updateEhr];
  Map<String, dynamic> toJson() => _$UpdateEhr$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentContentSummaryInput with EquatableMixin {
  EditComponentContentSummaryInput(
      {this.id, this.rating, this.subject, this.type});

  factory EditComponentContentSummaryInput.fromJson(
          Map<String, dynamic> json) =>
      _$EditComponentContentSummaryInputFromJson(json);

  String id;

  int rating;

  @JsonKey(unknownEnumValue: SummarySubject.artemisUnknown)
  SummarySubject subject;

  @JsonKey(unknownEnumValue: SummaryType.artemisUnknown)
  SummaryType type;

  @override
  List<Object> get props => [id, rating, subject, type];
  Map<String, dynamic> toJson() =>
      _$EditComponentContentSummaryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentDataEhrSubjectInput with EquatableMixin {
  EditComponentDataEhrSubjectInput({this.id, this.type});

  factory EditComponentDataEhrSubjectInput.fromJson(
          Map<String, dynamic> json) =>
      _$EditComponentDataEhrSubjectInputFromJson(json);

  String id;

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [id, type];
  Map<String, dynamic> toJson() =>
      _$EditComponentDataEhrSubjectInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentDataEhrTypeInput with EquatableMixin {
  EditComponentDataEhrTypeInput({this.id, this.type});

  factory EditComponentDataEhrTypeInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentDataEhrTypeInputFromJson(json);

  String id;

  @JsonKey(unknownEnumValue: EhrType.artemisUnknown)
  EhrType type;

  @override
  List<Object> get props => [id, type];
  Map<String, dynamic> toJson() => _$EditComponentDataEhrTypeInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditComponentDataPositionInput with EquatableMixin {
  EditComponentDataPositionInput(
      {this.altitude,
      this.head,
      this.id,
      this.latitude,
      this.longitude,
      this.speed,
      this.timestamp});

  factory EditComponentDataPositionInput.fromJson(Map<String, dynamic> json) =>
      _$EditComponentDataPositionInputFromJson(json);

  double altitude;

  double head;

  String id;

  double latitude;

  double longitude;

  double speed;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime timestamp;

  @override
  List<Object> get props =>
      [altitude, head, id, latitude, longitude, speed, timestamp];
  Map<String, dynamic> toJson() => _$EditComponentDataPositionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditEhrInput with EquatableMixin {
  EditEhrInput(
      {this.createdBy,
      this.data,
      this.medias,
      this.officeComments,
      this.patient,
      this.position,
      this.questionnaireAnswer,
      this.source,
      this.sourceId,
      this.status,
      this.subject,
      this.summaries,
      this.type,
      this.updatedBy,
      this.user});

  factory EditEhrInput.fromJson(Map<String, dynamic> json) =>
      _$EditEhrInputFromJson(json);

  @JsonKey(name: 'created_by')
  String createdBy;

  Object data;

  List<String> medias;

  @JsonKey(name: 'office_comments')
  String officeComments;

  String patient;

  EditComponentDataPositionInput position;

  @JsonKey(name: 'questionnaire_answer')
  String questionnaireAnswer;

  String source;

  @JsonKey(name: 'source_id')
  String sourceId;

  @JsonKey(unknownEnumValue: EhrStatus.artemisUnknown)
  EhrStatus status;

  EditComponentDataEhrSubjectInput subject;

  List<EditComponentContentSummaryInput> summaries;

  EditComponentDataEhrTypeInput type;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        createdBy,
        data,
        medias,
        officeComments,
        patient,
        position,
        questionnaireAnswer,
        source,
        sourceId,
        status,
        subject,
        summaries,
        type,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$EditEhrInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhrInput with EquatableMixin {
  UpdateEhrInput({this.data, this.where});

  factory UpdateEhrInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateEhrInputFromJson(json);

  EditEhrInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateEhrInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMe$Mutation$UpdateMe with EquatableMixin, UserMeMixin {
  UpdateMe$Mutation$UpdateMe();

  factory UpdateMe$Mutation$UpdateMe.fromJson(Map<String, dynamic> json) =>
      _$UpdateMe$Mutation$UpdateMeFromJson(json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        phone,
        birthday,
        countryCode,
        secondEmail,
        image,
        role,
        accountInfo,
        authorInfo,
        teacherInfo,
        parentInfo,
        childInfo,
        counselorInfo,
        doctorInfo,
        nurseInfo,
        patientInfo,
        userAgreements
      ];
  Map<String, dynamic> toJson() => _$UpdateMe$Mutation$UpdateMeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMe$Mutation with EquatableMixin {
  UpdateMe$Mutation();

  factory UpdateMe$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateMe$MutationFromJson(json);

  UpdateMe$Mutation$UpdateMe updateMe;

  @override
  List<Object> get props => [updateMe];
  Map<String, dynamic> toJson() => _$UpdateMe$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMe with EquatableMixin {
  UpdateMe(
      {this.birthday,
      this.content,
      this.countryCode,
      this.email,
      this.fullName,
      this.image,
      this.name,
      this.phone,
      this.secondEmail,
      this.sex,
      this.username});

  factory UpdateMe.fromJson(Map<String, dynamic> json) =>
      _$UpdateMeFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;

  String content;

  String countryCode;

  String email;

  String fullName;

  String image;

  String name;

  String phone;

  @JsonKey(name: 'second_email')
  String secondEmail;

  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;

  String username;

  @override
  List<Object> get props => [
        birthday,
        content,
        countryCode,
        email,
        fullName,
        image,
        name,
        phone,
        secondEmail,
        sex,
        username
      ];
  Map<String, dynamic> toJson() => _$UpdateMeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMeInput with EquatableMixin {
  UpdateMeInput({this.data});

  factory UpdateMeInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateMeInputFromJson(json);

  UpdateMe data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$UpdateMeInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyAddress$Mutation$UpdateMyAddress$UserAddress
    with EquatableMixin, MyAddressMixin {
  UpdateMyAddress$Mutation$UpdateMyAddress$UserAddress();

  factory UpdateMyAddress$Mutation$UpdateMyAddress$UserAddress.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateMyAddress$Mutation$UpdateMyAddress$UserAddressFromJson(json);

  @override
  List<Object> get props => [id, tag, address];
  Map<String, dynamic> toJson() =>
      _$UpdateMyAddress$Mutation$UpdateMyAddress$UserAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyAddress$Mutation$UpdateMyAddress with EquatableMixin {
  UpdateMyAddress$Mutation$UpdateMyAddress();

  factory UpdateMyAddress$Mutation$UpdateMyAddress.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateMyAddress$Mutation$UpdateMyAddressFromJson(json);

  UpdateMyAddress$Mutation$UpdateMyAddress$UserAddress userAddress;

  @override
  List<Object> get props => [userAddress];
  Map<String, dynamic> toJson() =>
      _$UpdateMyAddress$Mutation$UpdateMyAddressToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyAddress$Mutation with EquatableMixin {
  UpdateMyAddress$Mutation();

  factory UpdateMyAddress$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateMyAddress$MutationFromJson(json);

  UpdateMyAddress$Mutation$UpdateMyAddress updateMyAddress;

  @override
  List<Object> get props => [updateMyAddress];
  Map<String, dynamic> toJson() => _$UpdateMyAddress$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditMyAddressInput with EquatableMixin {
  EditMyAddressInput({this.address, this.tag});

  factory EditMyAddressInput.fromJson(Map<String, dynamic> json) =>
      _$EditMyAddressInputFromJson(json);

  ComponentDataAddressInput address;

  String tag;

  @override
  List<Object> get props => [address, tag];
  Map<String, dynamic> toJson() => _$EditMyAddressInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyAddressInput with EquatableMixin {
  UpdateMyAddressInput({this.data, this.where});

  factory UpdateMyAddressInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateMyAddressInputFromJson(json);

  EditMyAddressInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateMyAddressInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyChild$Mutation$UpdateChild$User$ChildInfo
    with EquatableMixin, ChildInfoSimpleMixin {
  UpdateMyChild$Mutation$UpdateChild$User$ChildInfo();

  factory UpdateMyChild$Mutation$UpdateChild$User$ChildInfo.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateMyChild$Mutation$UpdateChild$User$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() =>
      _$UpdateMyChild$Mutation$UpdateChild$User$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyChild$Mutation$UpdateChild$User$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  UpdateMyChild$Mutation$UpdateChild$User$PatientInfo();

  factory UpdateMyChild$Mutation$UpdateChild$User$PatientInfo.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateMyChild$Mutation$UpdateChild$User$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() =>
      _$UpdateMyChild$Mutation$UpdateChild$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyChild$Mutation$UpdateChild$User
    with EquatableMixin, UserDetailMixin {
  UpdateMyChild$Mutation$UpdateChild$User();

  factory UpdateMyChild$Mutation$UpdateChild$User.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateMyChild$Mutation$UpdateChild$UserFromJson(json);

  UpdateMyChild$Mutation$UpdateChild$User$ChildInfo childInfo;

  UpdateMyChild$Mutation$UpdateChild$User$PatientInfo patientInfo;

  @override
  List<Object> get props => [
        id,
        fullName,
        sex,
        username,
        name,
        birthday,
        email,
        image,
        blocked,
        confirmed,
        countryCode,
        createdAt,
        organizationUnits,
        phone,
        provider,
        qrUrl,
        secondEmail,
        updatedAt,
        role,
        content,
        childInfo,
        patientInfo
      ];
  Map<String, dynamic> toJson() =>
      _$UpdateMyChild$Mutation$UpdateChild$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyChild$Mutation$UpdateChild with EquatableMixin {
  UpdateMyChild$Mutation$UpdateChild();

  factory UpdateMyChild$Mutation$UpdateChild.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateMyChild$Mutation$UpdateChildFromJson(json);

  UpdateMyChild$Mutation$UpdateChild$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() =>
      _$UpdateMyChild$Mutation$UpdateChildToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyChild$Mutation with EquatableMixin {
  UpdateMyChild$Mutation();

  factory UpdateMyChild$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateMyChild$MutationFromJson(json);

  UpdateMyChild$Mutation$UpdateChild updateChild;

  @override
  List<Object> get props => [updateChild];
  Map<String, dynamic> toJson() => _$UpdateMyChild$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditChildInput with EquatableMixin {
  EditChildInput(
      {this.birthday,
      this.childInfo,
      this.fullName,
      this.image,
      this.name,
      this.sex});

  factory EditChildInput.fromJson(Map<String, dynamic> json) =>
      _$EditChildInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDate)
  DateTime birthday;

  ComponentUserChildInput childInfo;

  String fullName;

  String image;

  String name;

  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;

  @override
  List<Object> get props => [birthday, childInfo, fullName, image, name, sex];
  Map<String, dynamic> toJson() => _$EditChildInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChildInput with EquatableMixin {
  UpdateChildInput({this.data, this.where});

  factory UpdateChildInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateChildInputFromJson(json);

  EditChildInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateChildInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdatePatient$Mutation$UpdatePatient$Patient
    with EquatableMixin, PatientInfoDetailMixin {
  UpdatePatient$Mutation$UpdatePatient$Patient();

  factory UpdatePatient$Mutation$UpdatePatient$Patient.fromJson(
          Map<String, dynamic> json) =>
      _$UpdatePatient$Mutation$UpdatePatient$PatientFromJson(json);

  @override
  List<Object> get props => [id, doctor, nurse, counselor, ehrs];
  Map<String, dynamic> toJson() =>
      _$UpdatePatient$Mutation$UpdatePatient$PatientToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdatePatient$Mutation$UpdatePatient with EquatableMixin {
  UpdatePatient$Mutation$UpdatePatient();

  factory UpdatePatient$Mutation$UpdatePatient.fromJson(
          Map<String, dynamic> json) =>
      _$UpdatePatient$Mutation$UpdatePatientFromJson(json);

  UpdatePatient$Mutation$UpdatePatient$Patient patient;

  @override
  List<Object> get props => [patient];
  Map<String, dynamic> toJson() =>
      _$UpdatePatient$Mutation$UpdatePatientToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdatePatient$Mutation with EquatableMixin {
  UpdatePatient$Mutation();

  factory UpdatePatient$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdatePatient$MutationFromJson(json);

  UpdatePatient$Mutation$UpdatePatient updatePatient;

  @override
  List<Object> get props => [updatePatient];
  Map<String, dynamic> toJson() => _$UpdatePatient$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditPatientInput with EquatableMixin {
  EditPatientInput(
      {this.counselor,
      this.createdBy,
      this.doctor,
      this.ehrs,
      this.meetingId,
      this.name,
      this.nurse,
      this.updatedBy,
      this.user});

  factory EditPatientInput.fromJson(Map<String, dynamic> json) =>
      _$EditPatientInputFromJson(json);

  String counselor;

  @JsonKey(name: 'created_by')
  String createdBy;

  String doctor;

  List<String> ehrs;

  String meetingId;

  String name;

  String nurse;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  @override
  List<Object> get props => [
        counselor,
        createdBy,
        doctor,
        ehrs,
        meetingId,
        name,
        nurse,
        updatedBy,
        user
      ];
  Map<String, dynamic> toJson() => _$EditPatientInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdatePatientInput with EquatableMixin {
  UpdatePatientInput({this.data, this.where});

  factory UpdatePatientInput.fromJson(Map<String, dynamic> json) =>
      _$UpdatePatientInputFromJson(json);

  EditPatientInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdatePatientInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Upload$Mutation$Upload with EquatableMixin {
  Upload$Mutation$Upload();

  factory Upload$Mutation$Upload.fromJson(Map<String, dynamic> json) =>
      _$Upload$Mutation$UploadFromJson(json);

  String id;

  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  String name;

  String alternativeText;

  String caption;

  int width;

  int height;

  Object formats;

  String hash;

  String ext;

  String mime;

  double size;

  String url;

  String previewUrl;

  String provider;

  @JsonKey(name: 'provider_metadata')
  Object providerMetadata;

  @override
  List<Object> get props => [
        id,
        createdAt,
        updatedAt,
        name,
        alternativeText,
        caption,
        width,
        height,
        formats,
        hash,
        ext,
        mime,
        size,
        url,
        previewUrl,
        provider,
        providerMetadata
      ];
  Map<String, dynamic> toJson() => _$Upload$Mutation$UploadToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Upload$Mutation with EquatableMixin {
  Upload$Mutation();

  factory Upload$Mutation.fromJson(Map<String, dynamic> json) =>
      _$Upload$MutationFromJson(json);

  Upload$Mutation$Upload upload;

  @override
  List<Object> get props => [upload];
  Map<String, dynamic> toJson() => _$Upload$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$Image with EquatableMixin {
  User$Query$User$Image();

  factory User$Query$User$Image.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$ImageFromJson(json);

  String url;

  @override
  List<Object> get props => [url];
  Map<String, dynamic> toJson() => _$User$Query$User$ImageToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$OrganizationUnits with EquatableMixin {
  User$Query$User$OrganizationUnits();

  factory User$Query$User$OrganizationUnits.fromJson(
          Map<String, dynamic> json) =>
      _$User$Query$User$OrganizationUnitsFromJson(json);

  @JsonKey(name: '__typename')
  String $$typename;

  String id;

  String displayName;

  @override
  List<Object> get props => [$$typename, id, displayName];
  Map<String, dynamic> toJson() =>
      _$User$Query$User$OrganizationUnitsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$Role$Permissions with EquatableMixin {
  User$Query$User$Role$Permissions();

  factory User$Query$User$Role$Permissions.fromJson(
          Map<String, dynamic> json) =>
      _$User$Query$User$Role$PermissionsFromJson(json);

  String id;

  bool enabled;

  String action;

  @override
  List<Object> get props => [id, enabled, action];
  Map<String, dynamic> toJson() =>
      _$User$Query$User$Role$PermissionsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$Role with EquatableMixin {
  User$Query$User$Role();

  factory User$Query$User$Role.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$RoleFromJson(json);

  String id;

  String name;

  List<User$Query$User$Role$Permissions> permissions;

  @override
  List<Object> get props => [id, name, permissions];
  Map<String, dynamic> toJson() => _$User$Query$User$RoleToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$TeacherInfo with EquatableMixin, TeacherInfoSimpleMixin {
  User$Query$User$TeacherInfo();

  factory User$Query$User$TeacherInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$TeacherInfoFromJson(json);

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() => _$User$Query$User$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$DoctorInfo with EquatableMixin, DoctorInfoSimpleMixin {
  User$Query$User$DoctorInfo();

  factory User$Query$User$DoctorInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() => _$User$Query$User$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$NurseInfo with EquatableMixin, NurseInfoSimpleMixin {
  User$Query$User$NurseInfo();

  factory User$Query$User$NurseInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$User$Query$User$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  User$Query$User$CounselorInfo();

  factory User$Query$User$CounselorInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$User$Query$User$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$ParentInfo with EquatableMixin, ParentInfoSimpleMixin {
  User$Query$User$ParentInfo();

  factory User$Query$User$ParentInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$ParentInfoFromJson(json);

  @override
  List<Object> get props => [id, children];
  Map<String, dynamic> toJson() => _$User$Query$User$ParentInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$PatientInfo with EquatableMixin, PatientInfoSimpleMixin {
  User$Query$User$PatientInfo();

  factory User$Query$User$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$User$Query$User$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User$ChildInfo with EquatableMixin, ChildInfoSimpleMixin {
  User$Query$User$ChildInfo();

  factory User$Query$User$ChildInfo.fromJson(Map<String, dynamic> json) =>
      _$User$Query$User$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() => _$User$Query$User$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query$User with EquatableMixin {
  User$Query$User();

  factory User$Query$User.fromJson(Map<String, dynamic> json) =>
      _$User$Query$UserFromJson(json);

  String fullName;

  String id;

  bool blocked;

  bool confirmed;

  @JsonKey(
      name: 'created_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime createdAt;

  String email;

  User$Query$User$Image image;

  @JsonKey(name: 'organization_units')
  List<User$Query$User$OrganizationUnits> organizationUnits;

  String phone;

  String provider;

  User$Query$User$Role role;

  @JsonKey(name: 'second_email')
  String secondEmail;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  @JsonKey(unknownEnumValue: SexType.artemisUnknown)
  SexType sex;

  User$Query$User$TeacherInfo teacherInfo;

  User$Query$User$DoctorInfo doctorInfo;

  User$Query$User$NurseInfo nurseInfo;

  User$Query$User$CounselorInfo counselorInfo;

  User$Query$User$ParentInfo parentInfo;

  User$Query$User$PatientInfo patientInfo;

  User$Query$User$ChildInfo childInfo;

  @override
  List<Object> get props => [
        fullName,
        id,
        blocked,
        confirmed,
        createdAt,
        email,
        image,
        organizationUnits,
        phone,
        provider,
        role,
        secondEmail,
        updatedAt,
        sex,
        teacherInfo,
        doctorInfo,
        nurseInfo,
        counselorInfo,
        parentInfo,
        patientInfo,
        childInfo
      ];
  Map<String, dynamic> toJson() => _$User$Query$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User$Query with EquatableMixin {
  User$Query();

  factory User$Query.fromJson(Map<String, dynamic> json) =>
      _$User$QueryFromJson(json);

  User$Query$User user;

  @override
  List<Object> get props => [user];
  Map<String, dynamic> toJson() => _$User$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$TeacherInfo
    with EquatableMixin, TeacherInfoSimpleMixin {
  Users$Query$Users$TeacherInfo();

  factory Users$Query$Users$TeacherInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$TeacherInfoFromJson(json);

  @override
  List<Object> get props => [id, school];
  Map<String, dynamic> toJson() => _$Users$Query$Users$TeacherInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$DoctorInfo with EquatableMixin, DoctorInfoSimpleMixin {
  Users$Query$Users$DoctorInfo();

  factory Users$Query$Users$DoctorInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$DoctorInfoFromJson(json);

  @override
  List<Object> get props => [id, location, subject];
  Map<String, dynamic> toJson() => _$Users$Query$Users$DoctorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$NurseInfo with EquatableMixin, NurseInfoSimpleMixin {
  Users$Query$Users$NurseInfo();

  factory Users$Query$Users$NurseInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$NurseInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() => _$Users$Query$Users$NurseInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$CounselorInfo
    with EquatableMixin, CounselorInfoSimpleMixin {
  Users$Query$Users$CounselorInfo();

  factory Users$Query$Users$CounselorInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$CounselorInfoFromJson(json);

  @override
  List<Object> get props => [id, location];
  Map<String, dynamic> toJson() =>
      _$Users$Query$Users$CounselorInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$ParentInfo with EquatableMixin, ParentInfoSimpleMixin {
  Users$Query$Users$ParentInfo();

  factory Users$Query$Users$ParentInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$ParentInfoFromJson(json);

  @override
  List<Object> get props => [id, children];
  Map<String, dynamic> toJson() => _$Users$Query$Users$ParentInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$PatientInfo
    with EquatableMixin, PatientInfoSimpleMixin {
  Users$Query$Users$PatientInfo();

  factory Users$Query$Users$PatientInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$PatientInfoFromJson(json);

  @override
  List<Object> get props =>
      [id, name, doctor, nurse, counselor, meetingId, ehrs, user];
  Map<String, dynamic> toJson() => _$Users$Query$Users$PatientInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users$ChildInfo with EquatableMixin, ChildInfoSimpleMixin {
  Users$Query$Users$ChildInfo();

  factory Users$Query$Users$ChildInfo.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$Users$ChildInfoFromJson(json);

  @override
  List<Object> get props => [id, relationToUser, teacher, parent];
  Map<String, dynamic> toJson() => _$Users$Query$Users$ChildInfoToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query$Users with EquatableMixin, UserSimpleMixin {
  Users$Query$Users();

  factory Users$Query$Users.fromJson(Map<String, dynamic> json) =>
      _$Users$Query$UsersFromJson(json);

  Users$Query$Users$TeacherInfo teacherInfo;

  Users$Query$Users$DoctorInfo doctorInfo;

  Users$Query$Users$NurseInfo nurseInfo;

  Users$Query$Users$CounselorInfo counselorInfo;

  Users$Query$Users$ParentInfo parentInfo;

  Users$Query$Users$PatientInfo patientInfo;

  Users$Query$Users$ChildInfo childInfo;

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed,
        teacherInfo,
        doctorInfo,
        nurseInfo,
        counselorInfo,
        parentInfo,
        patientInfo,
        childInfo
      ];
  Map<String, dynamic> toJson() => _$Users$Query$UsersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Users$Query with EquatableMixin {
  Users$Query();

  factory Users$Query.fromJson(Map<String, dynamic> json) =>
      _$Users$QueryFromJson(json);

  List<Users$Query$Users> users;

  @override
  List<Object> get props => [users];
  Map<String, dynamic> toJson() => _$Users$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAgreement$Query$UserAgreement
    with EquatableMixin, UserAgreementDetailMixin, UserAgreementSimpleMixin {
  UserAgreement$Query$UserAgreement();

  factory UserAgreement$Query$UserAgreement.fromJson(
          Map<String, dynamic> json) =>
      _$UserAgreement$Query$UserAgreementFromJson(json);

  @override
  List<Object> get props =>
      [content, id, lastVersionDate, termOfServiceType, value, updatedAt];
  Map<String, dynamic> toJson() =>
      _$UserAgreement$Query$UserAgreementToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAgreement$Query with EquatableMixin {
  UserAgreement$Query();

  factory UserAgreement$Query.fromJson(Map<String, dynamic> json) =>
      _$UserAgreement$QueryFromJson(json);

  UserAgreement$Query$UserAgreement userAgreement;

  @override
  List<Object> get props => [userAgreement];
  Map<String, dynamic> toJson() => _$UserAgreement$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAgreements$Query$UserAgreements
    with EquatableMixin, UserAgreementSimpleMixin {
  UserAgreements$Query$UserAgreements();

  factory UserAgreements$Query$UserAgreements.fromJson(
          Map<String, dynamic> json) =>
      _$UserAgreements$Query$UserAgreementsFromJson(json);

  @override
  List<Object> get props =>
      [id, lastVersionDate, termOfServiceType, value, updatedAt];
  Map<String, dynamic> toJson() =>
      _$UserAgreements$Query$UserAgreementsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAgreements$Query with EquatableMixin {
  UserAgreements$Query();

  factory UserAgreements$Query.fromJson(Map<String, dynamic> json) =>
      _$UserAgreements$QueryFromJson(json);

  List<UserAgreements$Query$UserAgreements> userAgreements;

  @override
  List<Object> get props => [userAgreements];
  Map<String, dynamic> toJson() => _$UserAgreements$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement$User
    with EquatableMixin, UserSimpleMixin {
  CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement$User();

  factory CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement$User.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement$UserFromJson(
          json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() =>
      _$CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement$UserToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement
    with EquatableMixin {
  CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement();

  factory CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreementFromJson(
          json);

  CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement$User user;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;

  bool value;

  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;

  @override
  List<Object> get props => [user, lastVersionDate, value, termOfServiceType];
  Map<String, dynamic> toJson() =>
      _$CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreementToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserAggreement$Mutation$CreateUserAgreement with EquatableMixin {
  CreateUserAggreement$Mutation$CreateUserAgreement();

  factory CreateUserAggreement$Mutation$CreateUserAgreement.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserAggreement$Mutation$CreateUserAgreementFromJson(json);

  CreateUserAggreement$Mutation$CreateUserAgreement$UserAgreement userAgreement;

  @override
  List<Object> get props => [userAgreement];
  Map<String, dynamic> toJson() =>
      _$CreateUserAggreement$Mutation$CreateUserAgreementToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserAggreement$Mutation with EquatableMixin {
  CreateUserAggreement$Mutation();

  factory CreateUserAggreement$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserAggreement$MutationFromJson(json);

  CreateUserAggreement$Mutation$CreateUserAgreement createUserAgreement;

  @override
  List<Object> get props => [createUserAgreement];
  Map<String, dynamic> toJson() => _$CreateUserAggreement$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAgreementInput with EquatableMixin {
  UserAgreementInput(
      {@required this.content,
      this.createdBy,
      @required this.lastVersionDate,
      @required this.termOfServiceType,
      this.updatedBy,
      this.user,
      this.value});

  factory UserAgreementInput.fromJson(Map<String, dynamic> json) =>
      _$UserAgreementInputFromJson(json);

  String content;

  @JsonKey(name: 'created_by')
  String createdBy;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;

  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  bool value;

  @override
  List<Object> get props => [
        content,
        createdBy,
        lastVersionDate,
        termOfServiceType,
        updatedBy,
        user,
        value
      ];
  Map<String, dynamic> toJson() => _$UserAgreementInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserAgreementInput with EquatableMixin {
  CreateUserAgreementInput({this.data});

  factory CreateUserAgreementInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserAgreementInputFromJson(json);

  UserAgreementInput data;

  @override
  List<Object> get props => [data];
  Map<String, dynamic> toJson() => _$CreateUserAgreementInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement$User
    with EquatableMixin, UserSimpleMixin {
  UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement$User();

  factory UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement$User.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement$UserFromJson(
          json);

  @override
  List<Object> get props => [
        id,
        username,
        fullName,
        email,
        name,
        sex,
        birthday,
        image,
        role,
        confirmed
      ];
  Map<String, dynamic> toJson() =>
      _$UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement$UserToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement
    with EquatableMixin {
  UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement();

  factory UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreementFromJson(
          json);

  UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement$User user;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;

  bool value;

  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;

  @override
  List<Object> get props => [user, lastVersionDate, value, termOfServiceType];
  Map<String, dynamic> toJson() =>
      _$UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreementToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserAggreement$Mutation$UpdateUserAgreement with EquatableMixin {
  UpdateUserAggreement$Mutation$UpdateUserAgreement();

  factory UpdateUserAggreement$Mutation$UpdateUserAgreement.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserAggreement$Mutation$UpdateUserAgreementFromJson(json);

  UpdateUserAggreement$Mutation$UpdateUserAgreement$UserAgreement userAgreement;

  @override
  List<Object> get props => [userAgreement];
  Map<String, dynamic> toJson() =>
      _$UpdateUserAggreement$Mutation$UpdateUserAgreementToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserAggreement$Mutation with EquatableMixin {
  UpdateUserAggreement$Mutation();

  factory UpdateUserAggreement$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserAggreement$MutationFromJson(json);

  UpdateUserAggreement$Mutation$UpdateUserAgreement updateUserAgreement;

  @override
  List<Object> get props => [updateUserAgreement];
  Map<String, dynamic> toJson() => _$UpdateUserAggreement$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class EditUserAgreementInput with EquatableMixin {
  EditUserAgreementInput(
      {this.content,
      this.createdBy,
      this.lastVersionDate,
      this.termOfServiceType,
      this.updatedBy,
      this.user,
      this.value});

  factory EditUserAgreementInput.fromJson(Map<String, dynamic> json) =>
      _$EditUserAgreementInputFromJson(json);

  String content;

  @JsonKey(name: 'created_by')
  String createdBy;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime lastVersionDate;

  @JsonKey(unknownEnumValue: TermOfServiceType.artemisUnknown)
  TermOfServiceType termOfServiceType;

  @JsonKey(name: 'updated_by')
  String updatedBy;

  String user;

  bool value;

  @override
  List<Object> get props => [
        content,
        createdBy,
        lastVersionDate,
        termOfServiceType,
        updatedBy,
        user,
        value
      ];
  Map<String, dynamic> toJson() => _$EditUserAgreementInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserAgreementInput with EquatableMixin {
  UpdateUserAgreementInput({this.data, this.where});

  factory UpdateUserAgreementInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserAgreementInputFromJson(json);

  EditUserAgreementInput data;

  InputID where;

  @override
  List<Object> get props => [data, where];
  Map<String, dynamic> toJson() => _$UpdateUserAgreementInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Version$Query$Version with EquatableMixin {
  Version$Query$Version();

  factory Version$Query$Version.fromJson(Map<String, dynamic> json) =>
      _$Version$Query$VersionFromJson(json);

  String number;

  @JsonKey(
      name: 'updated_at',
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  DateTime updatedAt;

  String description;

  @override
  List<Object> get props => [number, updatedAt, description];
  Map<String, dynamic> toJson() => _$Version$Query$VersionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Version$Query with EquatableMixin {
  Version$Query();

  factory Version$Query.fromJson(Map<String, dynamic> json) =>
      _$Version$QueryFromJson(json);

  Version$Query$Version version;

  @override
  List<Object> get props => [version];
  Map<String, dynamic> toJson() => _$Version$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Webinar$Query$Webinar$Subject with EquatableMixin {
  Webinar$Query$Webinar$Subject();

  factory Webinar$Query$Webinar$Subject.fromJson(Map<String, dynamic> json) =>
      _$Webinar$Query$Webinar$SubjectFromJson(json);

  @JsonKey(unknownEnumValue: EhrSubject.artemisUnknown)
  EhrSubject type;

  @override
  List<Object> get props => [type];
  Map<String, dynamic> toJson() => _$Webinar$Query$Webinar$SubjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Webinar$Query$Webinar with EquatableMixin, WebinarSimpleMixin {
  Webinar$Query$Webinar();

  factory Webinar$Query$Webinar.fromJson(Map<String, dynamic> json) =>
      _$Webinar$Query$WebinarFromJson(json);

  String content;

  Webinar$Query$Webinar$Subject subject;

  @override
  List<Object> get props => [id, schedule, meetingId, post, content, subject];
  Map<String, dynamic> toJson() => _$Webinar$Query$WebinarToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Webinar$Query with EquatableMixin {
  Webinar$Query();

  factory Webinar$Query.fromJson(Map<String, dynamic> json) =>
      _$Webinar$QueryFromJson(json);

  Webinar$Query$Webinar webinar;

  @override
  List<Object> get props => [webinar];
  Map<String, dynamic> toJson() => _$Webinar$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WebinarSimpleMixin$Post with EquatableMixin, PostComponentSimpleMixin {
  WebinarSimpleMixin$Post();

  factory WebinarSimpleMixin$Post.fromJson(Map<String, dynamic> json) =>
      _$WebinarSimpleMixin$PostFromJson(json);

  @override
  List<Object> get props => [
        id,
        title,
        subtitle,
        medias,
        categories,
        recommended,
        updatedDay,
        vipColor,
        coverBackgroundColor,
        price,
        trademark,
        currency,
        author,
        vipText,
        prePrice,
        rating,
        needShipping
      ];
  Map<String, dynamic> toJson() => _$WebinarSimpleMixin$PostToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Webinars$Query$Webinars with EquatableMixin, WebinarSimpleMixin {
  Webinars$Query$Webinars();

  factory Webinars$Query$Webinars.fromJson(Map<String, dynamic> json) =>
      _$Webinars$Query$WebinarsFromJson(json);

  @override
  List<Object> get props => [id, schedule, meetingId, post];
  Map<String, dynamic> toJson() => _$Webinars$Query$WebinarsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Webinars$Query with EquatableMixin {
  Webinars$Query();

  factory Webinars$Query.fromJson(Map<String, dynamic> json) =>
      _$Webinars$QueryFromJson(json);

  List<Webinars$Query$Webinars> webinars;

  @override
  List<Object> get props => [webinars];
  Map<String, dynamic> toJson() => _$Webinars$QueryToJson(this);
}

enum OrderStatusType {
  @JsonValue('Closed')
  closed,
  @JsonValue('Paid')
  paid,
  @JsonValue('Refunded')
  refunded,
  @JsonValue('Refunding')
  refunding,
  @JsonValue('RequestRefund')
  requestRefund,
  @JsonValue('Unpaied')
  unpaied,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum TermOfServiceType {
  @JsonValue('App')
  app,
  @JsonValue('Assessment')
  assessment,
  @JsonValue('Payment')
  payment,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum SexType {
  @JsonValue('female')
  female,
  @JsonValue('male')
  male,
  @JsonValue('other')
  other,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum CategoryType {
  @JsonValue('app')
  app,
  @JsonValue('subject')
  subject,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum EhrSubject {
  @JsonValue('ADHD')
  adhd,
  @JsonValue('cpt')
  cpt,
  @JsonValue('grade')
  grade,
  @JsonValue('health')
  health,
  @JsonValue('math')
  math,
  @JsonValue('memory')
  memory,
  @JsonValue('music')
  music,
  @JsonValue('nutrition')
  nutrition,
  @JsonValue('parenting')
  parenting,
  @JsonValue('sleep')
  sleep,
  @JsonValue('social_skill')
  socialSkill,
  @JsonValue('spelling')
  spelling,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum ForType {
  @JsonValue('adult')
  adult,
  @JsonValue('all')
  all,
  @JsonValue('child')
  child,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BookType {
  @JsonValue('online')
  online,
  @JsonValue('printed')
  printed,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum RelationType {
  @JsonValue('father')
  father,
  @JsonValue('grandparent')
  grandparent,
  @JsonValue('mother')
  mother,
  @JsonValue('other')
  other,
  @JsonValue('sibling')
  sibling,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum DoctorSubject {
  @JsonValue('Family')
  family,
  @JsonValue('Pediatrician')
  pediatrician,
  @JsonValue('Psychiatrist')
  psychiatrist,
  @JsonValue('Psychologist')
  psychologist,
  @JsonValue('other')
  other,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum EhrStatus {
  @JsonValue('closed')
  closed,
  @JsonValue('inProgress')
  inProgress,
  @JsonValue('open')
  open,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum EhrType {
  @JsonValue('assessment')
  assessment,
  @JsonValue('diagnose')
  diagnose,
  @JsonValue('education')
  education,
  @JsonValue('exercise')
  exercise,
  @JsonValue('medicine')
  medicine,
  @JsonValue('supplement')
  supplement,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum UserStatus {
  @JsonValue('active')
  active,
  @JsonValue('inactive')
  inactive,
  @JsonValue('removed')
  removed,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum SummarySubject {
  @JsonValue('cpt')
  cpt,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum SummaryType {
  @JsonValue('measurable')
  measurable,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum EventType {
  @JsonValue('offline')
  offline,
  @JsonValue('online')
  online,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum ExerciseType {
  @JsonValue('home')
  home,
  @JsonValue('online')
  online,
  @JsonValue('school')
  school,
  @JsonValue('site')
  site,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum LocationType {
  @JsonValue('clinic')
  clinic,
  @JsonValue('school')
  school,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum ReminderType {
  @JsonValue('daily')
  daily,
  @JsonValue('normal')
  normal,
  @JsonValue('scheduled')
  scheduled,
  @JsonValue('weekly')
  weekly,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

@JsonSerializable(explicitToJson: true)
class AccountArguments extends JsonSerializable with EquatableMixin {
  AccountArguments({@required this.id});

  @override
  factory AccountArguments.fromJson(Map<String, dynamic> json) =>
      _$AccountArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$AccountArgumentsToJson(this);
}

class AccountQuery extends GraphQLQuery<Account$Query, AccountArguments> {
  AccountQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Account'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'account'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'created_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'orders'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'updated_at'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'paiedPrice'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'price'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'status'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'needpayPrice'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Account';

  @override
  final AccountArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Account$Query parse(Map<String, dynamic> json) =>
      Account$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AccountsArguments extends JsonSerializable with EquatableMixin {
  AccountsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory AccountsArguments.fromJson(Map<String, dynamic> json) =>
      _$AccountsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$AccountsArgumentsToJson(this);
}

class AccountsQuery extends GraphQLQuery<Accounts$Query, AccountsArguments> {
  AccountsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Accounts'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'accounts'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'created_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'orders'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'paiedPrice'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'status'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'expire'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Accounts';

  @override
  final AccountsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Accounts$Query parse(Map<String, dynamic> json) =>
      Accounts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AgreeForTermOfServiceArguments extends JsonSerializable
    with EquatableMixin {
  AgreeForTermOfServiceArguments({this.input});

  @override
  factory AgreeForTermOfServiceArguments.fromJson(Map<String, dynamic> json) =>
      _$AgreeForTermOfServiceArgumentsFromJson(json);

  final AgreeTermOfServiceInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$AgreeForTermOfServiceArgumentsToJson(this);
}

class AgreeForTermOfServiceMutation extends GraphQLQuery<
    AgreeForTermOfService$Mutation, AgreeForTermOfServiceArguments> {
  AgreeForTermOfServiceMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'AgreeForTermOfService'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'agreeTermOfServiceInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'agreeTermOfService'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAgreementSimple'),
                    directives: []),
                FieldNode(
                    name: NameNode(value: 'created_by'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'username'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAgreementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAgreement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'lastVersionDate'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'termOfServiceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'value'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'AgreeForTermOfService';

  @override
  final AgreeForTermOfServiceArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  AgreeForTermOfService$Mutation parse(Map<String, dynamic> json) =>
      AgreeForTermOfService$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswerArguments extends JsonSerializable
    with EquatableMixin {
  QuestionnaireAnswerArguments({@required this.id});

  @override
  factory QuestionnaireAnswerArguments.fromJson(Map<String, dynamic> json) =>
      _$QuestionnaireAnswerArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$QuestionnaireAnswerArgumentsToJson(this);
}

class QuestionnaireAnswerQuery extends GraphQLQuery<QuestionnaireAnswer$Query,
    QuestionnaireAnswerArguments> {
  QuestionnaireAnswerQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'QuestionnaireAnswer'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'questionnaireAnswer'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireAnswerSimple'),
                    directives: []),
                FieldNode(
                    name: NameNode(value: 'created_by'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'username'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'updated_by'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'username'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'QuestionnaireAnswer';

  @override
  final QuestionnaireAnswerArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  QuestionnaireAnswer$Query parse(Map<String, dynamic> json) =>
      QuestionnaireAnswer$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class QuestionnaireAnswersArguments extends JsonSerializable
    with EquatableMixin {
  QuestionnaireAnswersArguments(
      {this.sort, this.limit, this.start, this.where});

  @override
  factory QuestionnaireAnswersArguments.fromJson(Map<String, dynamic> json) =>
      _$QuestionnaireAnswersArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$QuestionnaireAnswersArgumentsToJson(this);
}

class QuestionnaireAnswersQuery extends GraphQLQuery<QuestionnaireAnswers$Query,
    QuestionnaireAnswersArguments> {
  QuestionnaireAnswersQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'QuestionnaireAnswers'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'questionnaireAnswers'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireAnswerSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'QuestionnaireAnswers';

  @override
  final QuestionnaireAnswersArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  QuestionnaireAnswers$Query parse(Map<String, dynamic> json) =>
      QuestionnaireAnswers$Query.fromJson(json);
}

class AppPolicyQuery extends GraphQLQuery<AppPolicy$Query, JsonSerializable> {
  AppPolicyQuery();

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'AppPolicy'),
        variableDefinitions: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'appTermOfService'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'term_of_service'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'AppPolicy';

  @override
  List<Object> get props => [document, operationName];
  @override
  AppPolicy$Query parse(Map<String, dynamic> json) =>
      AppPolicy$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArticleArguments extends JsonSerializable with EquatableMixin {
  ArticleArguments({@required this.id});

  @override
  factory ArticleArguments.fromJson(Map<String, dynamic> json) =>
      _$ArticleArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ArticleArgumentsToJson(this);
}

class ArticleQuery extends GraphQLQuery<Article$Query, ArticleArguments> {
  ArticleQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Article'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'article'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ArticleSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'content'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'episodes'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'content'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'title'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'subtitle'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'questionnaire'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'subject'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'forPerson'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ArticleSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Article'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'media'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'published_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Article';

  @override
  final ArticleArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Article$Query parse(Map<String, dynamic> json) =>
      Article$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArticlesArguments extends JsonSerializable with EquatableMixin {
  ArticlesArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory ArticlesArguments.fromJson(Map<String, dynamic> json) =>
      _$ArticlesArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$ArticlesArgumentsToJson(this);
}

class ArticlesQuery extends GraphQLQuery<Articles$Query, ArticlesArguments> {
  ArticlesQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Articles'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'articles'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ArticleSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ArticleSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Article'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'media'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'published_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Articles';

  @override
  final ArticlesArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Articles$Query parse(Map<String, dynamic> json) =>
      Articles$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnaireArguments extends JsonSerializable
    with EquatableMixin {
  AssessmentQuestionnaireArguments({@required this.id});

  @override
  factory AssessmentQuestionnaireArguments.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnaireArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnaireArgumentsToJson(this);
}

class AssessmentQuestionnaireQuery extends GraphQLQuery<
    AssessmentQuestionnaire$Query, AssessmentQuestionnaireArguments> {
  AssessmentQuestionnaireQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'AssessmentQuestionnaire'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'assessmentQuestionnaire'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AssessmentQuestionnaireSimple'),
                    directives: []),
                FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'formats'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'width'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'height'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'ext'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'caption'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'size'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'content'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'questionnaire'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'subject'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'level'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'forPerson'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'period_length'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AssessmentQuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'AssessmentQuestionnaire'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'questionnaireOnly'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'AssessmentQuestionnaire';

  @override
  final AssessmentQuestionnaireArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  AssessmentQuestionnaire$Query parse(Map<String, dynamic> json) =>
      AssessmentQuestionnaire$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AssessmentQuestionnairesArguments extends JsonSerializable
    with EquatableMixin {
  AssessmentQuestionnairesArguments(
      {this.sort, this.limit, this.start, this.where});

  @override
  factory AssessmentQuestionnairesArguments.fromJson(
          Map<String, dynamic> json) =>
      _$AssessmentQuestionnairesArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() =>
      _$AssessmentQuestionnairesArgumentsToJson(this);
}

class AssessmentQuestionnairesQuery extends GraphQLQuery<
    AssessmentQuestionnaires$Query, AssessmentQuestionnairesArguments> {
  AssessmentQuestionnairesQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'AssessmentQuestionnaires'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'assessmentQuestionnaires'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AssessmentQuestionnaireSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AssessmentQuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'AssessmentQuestionnaire'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'questionnaireOnly'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'AssessmentQuestionnaires';

  @override
  final AssessmentQuestionnairesArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  AssessmentQuestionnaires$Query parse(Map<String, dynamic> json) =>
      AssessmentQuestionnaires$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class BookArguments extends JsonSerializable with EquatableMixin {
  BookArguments({@required this.id});

  @override
  factory BookArguments.fromJson(Map<String, dynamic> json) =>
      _$BookArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$BookArgumentsToJson(this);
}

class BookQuery extends GraphQLQuery<Book$Query, BookArguments> {
  BookQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Book'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'book'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'BookDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'episodes'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'title'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'subtitle'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'content'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'BookDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Book'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'BookSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'BookSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Book'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Book';

  @override
  final BookArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Book$Query parse(Map<String, dynamic> json) => Book$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class BooksArguments extends JsonSerializable with EquatableMixin {
  BooksArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory BooksArguments.fromJson(Map<String, dynamic> json) =>
      _$BooksArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$BooksArgumentsToJson(this);
}

class BooksQuery extends GraphQLQuery<Books$Query, BooksArguments> {
  BooksQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Books'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'books'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'BookSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'BookSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Book'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Books';

  @override
  final BooksArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Books$Query parse(Map<String, dynamic> json) => Books$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ChildArguments extends JsonSerializable with EquatableMixin {
  ChildArguments({@required this.id});

  @override
  factory ChildArguments.fromJson(Map<String, dynamic> json) =>
      _$ChildArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ChildArgumentsToJson(this);
}

class ChildQuery extends GraphQLQuery<Child$Query, ChildArguments> {
  ChildQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Child'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ChildInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Child';

  @override
  final ChildArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Child$Query parse(Map<String, dynamic> json) => Child$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ChildrenArguments extends JsonSerializable with EquatableMixin {
  ChildrenArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory ChildrenArguments.fromJson(Map<String, dynamic> json) =>
      _$ChildrenArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$ChildrenArgumentsToJson(this);
}

class ChildrenQuery extends GraphQLQuery<Children$Query, ChildrenArguments> {
  ChildrenQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Children'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ChildInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Children';

  @override
  final ChildrenArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Children$Query parse(Map<String, dynamic> json) =>
      Children$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CounselorArguments extends JsonSerializable with EquatableMixin {
  CounselorArguments({@required this.id});

  @override
  factory CounselorArguments.fromJson(Map<String, dynamic> json) =>
      _$CounselorArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$CounselorArgumentsToJson(this);
}

class CounselorQuery extends GraphQLQuery<Counselor$Query, CounselorArguments> {
  CounselorQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Counselor'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Counselor';

  @override
  final CounselorArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Counselor$Query parse(Map<String, dynamic> json) =>
      Counselor$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CounselorsArguments extends JsonSerializable with EquatableMixin {
  CounselorsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory CounselorsArguments.fromJson(Map<String, dynamic> json) =>
      _$CounselorsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$CounselorsArgumentsToJson(this);
}

class CounselorsQuery
    extends GraphQLQuery<Counselors$Query, CounselorsArguments> {
  CounselorsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Counselors'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Counselors';

  @override
  final CounselorsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Counselors$Query parse(Map<String, dynamic> json) =>
      Counselors$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CounselorUpdateArguments extends JsonSerializable with EquatableMixin {
  CounselorUpdateArguments({this.input});

  @override
  factory CounselorUpdateArguments.fromJson(Map<String, dynamic> json) =>
      _$CounselorUpdateArgumentsFromJson(json);

  final UpdateUserInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CounselorUpdateArgumentsToJson(this);
}

class CounselorUpdateMutation
    extends GraphQLQuery<CounselorUpdate$Mutation, CounselorUpdateArguments> {
  CounselorUpdateMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CounselorUpdate'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateUserInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateUser'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'counselorInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'CounselorInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CounselorUpdate';

  @override
  final CounselorUpdateArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CounselorUpdate$Mutation parse(Map<String, dynamic> json) =>
      CounselorUpdate$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateAnswerArguments extends JsonSerializable with EquatableMixin {
  CreateAnswerArguments({this.input});

  @override
  factory CreateAnswerArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateAnswerArgumentsFromJson(json);

  final CreateQuestionnaireAnswerInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateAnswerArgumentsToJson(this);
}

class CreateAnswerMutation
    extends GraphQLQuery<CreateAnswer$Mutation, CreateAnswerArguments> {
  CreateAnswerMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreateAnswer'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createQuestionnaireAnswerInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createQuestionnaireAnswer'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'questionnaireAnswer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireAnswerSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreateAnswer';

  @override
  final CreateAnswerArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateAnswer$Mutation parse(Map<String, dynamic> json) =>
      CreateAnswer$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateChildArguments extends JsonSerializable with EquatableMixin {
  CreateChildArguments({@required this.input});

  @override
  factory CreateChildArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateChildArgumentsFromJson(json);

  final CreateChildInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateChildArgumentsToJson(this);
}

class CreateChildMutation
    extends GraphQLQuery<CreateChild$Mutation, CreateChildArguments> {
  CreateChildMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'createChild'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createChildInput'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createChild'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserSimple'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'childInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'ChildInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'createChild';

  @override
  final CreateChildArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateChild$Mutation parse(Map<String, dynamic> json) =>
      CreateChild$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateCreditCardArguments extends JsonSerializable with EquatableMixin {
  CreateCreditCardArguments({@required this.input});

  @override
  factory CreateCreditCardArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateCreditCardArgumentsFromJson(json);

  final CreateCreditCardInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateCreditCardArgumentsToJson(this);
}

class CreateCreditCardMutation
    extends GraphQLQuery<CreateCreditCard$Mutation, CreateCreditCardArguments> {
  CreateCreditCardMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreateCreditCard'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createCreditCardInput'),
                  isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createCreditCard'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'creditCard'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CreditCardSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CreditCardSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'CreditCard'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'cvc'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expMonth'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expYear'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'number'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'MyAddress'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreateCreditCard';

  @override
  final CreateCreditCardArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateCreditCard$Mutation parse(Map<String, dynamic> json) =>
      CreateCreditCard$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateEhrArguments extends JsonSerializable with EquatableMixin {
  CreateEhrArguments({this.input});

  @override
  factory CreateEhrArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateEhrArgumentsFromJson(json);

  final CreateEhrInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateEhrArgumentsToJson(this);
}

class CreateEhrMutation
    extends GraphQLQuery<CreateEhr$Mutation, CreateEhrArguments> {
  CreateEhrMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreateEhr'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createEhrInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createEhr'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'ehr'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'EhrSimple'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'source'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'source_id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'medias'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'MediaSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'data'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'questionnaire_answer'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(
                                    value: 'QuestionnaireAnswerSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'summaries'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'rating'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'type'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'subject'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null)
                          ])),
                      FieldNode(
                          name: NameNode(value: 'office_comments'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MediaSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UploadFile'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'url'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreateEhr';

  @override
  final CreateEhrArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateEhr$Mutation parse(Map<String, dynamic> json) =>
      CreateEhr$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateMyAddressArguments extends JsonSerializable with EquatableMixin {
  CreateMyAddressArguments({this.input});

  @override
  factory CreateMyAddressArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateMyAddressArgumentsFromJson(json);

  final CreateMyAddressInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateMyAddressArgumentsToJson(this);
}

class CreateMyAddressMutation
    extends GraphQLQuery<CreateMyAddress$Mutation, CreateMyAddressArguments> {
  CreateMyAddressMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreateMyAddress'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createMyAddressInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createMyAddress'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'userAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'MyAddress'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreateMyAddress';

  @override
  final CreateMyAddressArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateMyAddress$Mutation parse(Map<String, dynamic> json) =>
      CreateMyAddress$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateMyOrderArguments extends JsonSerializable with EquatableMixin {
  CreateMyOrderArguments({this.input});

  @override
  factory CreateMyOrderArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateMyOrderArgumentsFromJson(json);

  final CreateMyOrderInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateMyOrderArgumentsToJson(this);
}

class CreateMyOrderMutation
    extends GraphQLQuery<CreateMyOrder$Mutation, CreateMyOrderArguments> {
  CreateMyOrderMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreateMyOrder'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createMyOrderInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createMyOrder'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'order'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'OrderDetail'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'OrderSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'shippingAddress'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreateMyOrder';

  @override
  final CreateMyOrderArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateMyOrder$Mutation parse(Map<String, dynamic> json) =>
      CreateMyOrder$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreatePatientArguments extends JsonSerializable with EquatableMixin {
  CreatePatientArguments({this.input});

  @override
  factory CreatePatientArguments.fromJson(Map<String, dynamic> json) =>
      _$CreatePatientArgumentsFromJson(json);

  final CreatePatientInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreatePatientArgumentsToJson(this);
}

class CreatePatientMutation
    extends GraphQLQuery<CreatePatient$Mutation, CreatePatientArguments> {
  CreatePatientMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreatePatient'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createPatientInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createPatient'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'patient'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoDetail'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreatePatient';

  @override
  final CreatePatientArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreatePatient$Mutation parse(Map<String, dynamic> json) =>
      CreatePatient$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreatePaymentMethodArguments extends JsonSerializable
    with EquatableMixin {
  CreatePaymentMethodArguments({@required this.input});

  @override
  factory CreatePaymentMethodArguments.fromJson(Map<String, dynamic> json) =>
      _$CreatePaymentMethodArgumentsFromJson(json);

  final CreatePaymentMethodInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreatePaymentMethodArgumentsToJson(this);
}

class CreatePaymentMethodMutation extends GraphQLQuery<
    CreatePaymentMethod$Mutation, CreatePaymentMethodArguments> {
  CreatePaymentMethodMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreatePaymentMethod'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createPaymentMethodInput'),
                  isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createPaymentMethod'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'paymentMethod'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PaymentMethodSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PaymentMethodSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentMethod'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'billingAddress'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'creditCard'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CreditCardSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'livemode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'stripeId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'MyAddress'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CreditCardSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'CreditCard'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'cvc'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expMonth'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expYear'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'number'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreatePaymentMethod';

  @override
  final CreatePaymentMethodArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreatePaymentMethod$Mutation parse(Map<String, dynamic> json) =>
      CreatePaymentMethod$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreditCardsArguments extends JsonSerializable with EquatableMixin {
  CreditCardsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory CreditCardsArguments.fromJson(Map<String, dynamic> json) =>
      _$CreditCardsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$CreditCardsArgumentsToJson(this);
}

class CreditCardsQuery
    extends GraphQLQuery<CreditCards$Query, CreditCardsArguments> {
  CreditCardsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'CreditCards'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'creditCards'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CreditCardSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CreditCardSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'CreditCard'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'cvc'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expMonth'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expYear'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'number'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'MyAddress'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreditCards';

  @override
  final CreditCardsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreditCards$Query parse(Map<String, dynamic> json) =>
      CreditCards$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteMyAddressArguments extends JsonSerializable with EquatableMixin {
  DeleteMyAddressArguments({this.input});

  @override
  factory DeleteMyAddressArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteMyAddressArgumentsFromJson(json);

  final DeleteUserAddressInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$DeleteMyAddressArgumentsToJson(this);
}

class DeleteMyAddressMutation
    extends GraphQLQuery<DeleteMyAddress$Mutation, DeleteMyAddressArguments> {
  DeleteMyAddressMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'DeleteMyAddress'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'deleteUserAddressInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'deleteMyAddress'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'userAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'MyAddress'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'DeleteMyAddress';

  @override
  final DeleteMyAddressArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  DeleteMyAddress$Mutation parse(Map<String, dynamic> json) =>
      DeleteMyAddress$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DoctorArguments extends JsonSerializable with EquatableMixin {
  DoctorArguments({@required this.id});

  @override
  factory DoctorArguments.fromJson(Map<String, dynamic> json) =>
      _$DoctorArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DoctorArgumentsToJson(this);
}

class DoctorQuery extends GraphQLQuery<Doctor$Query, DoctorArguments> {
  DoctorQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Doctor'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Doctor';

  @override
  final DoctorArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Doctor$Query parse(Map<String, dynamic> json) => Doctor$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DoctorsArguments extends JsonSerializable with EquatableMixin {
  DoctorsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory DoctorsArguments.fromJson(Map<String, dynamic> json) =>
      _$DoctorsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$DoctorsArgumentsToJson(this);
}

class DoctorsQuery extends GraphQLQuery<Doctors$Query, DoctorsArguments> {
  DoctorsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Doctors'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Doctors';

  @override
  final DoctorsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Doctors$Query parse(Map<String, dynamic> json) =>
      Doctors$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DoctorUpdateArguments extends JsonSerializable with EquatableMixin {
  DoctorUpdateArguments({this.input});

  @override
  factory DoctorUpdateArguments.fromJson(Map<String, dynamic> json) =>
      _$DoctorUpdateArgumentsFromJson(json);

  final UpdateUserInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$DoctorUpdateArgumentsToJson(this);
}

class DoctorUpdateMutation
    extends GraphQLQuery<DoctorUpdate$Mutation, DoctorUpdateArguments> {
  DoctorUpdateMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'DoctorUpdate'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateUserInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateUser'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'doctorInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'DoctorInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'DoctorUpdate';

  @override
  final DoctorUpdateArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  DoctorUpdate$Mutation parse(Map<String, dynamic> json) =>
      DoctorUpdate$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class EhrArguments extends JsonSerializable with EquatableMixin {
  EhrArguments({@required this.id});

  @override
  factory EhrArguments.fromJson(Map<String, dynamic> json) =>
      _$EhrArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$EhrArgumentsToJson(this);
}

class EhrQuery extends GraphQLQuery<Ehr$Query, EhrArguments> {
  EhrQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Ehr'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'ehr'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'source'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'source_id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'medias'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'MediaSimple'), directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'data'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'questionnaire_answer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireAnswerSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'summaries'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'rating'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'subject'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'office_comments'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'position'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'latitude'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'longitude'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'altitude'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'timestamp'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'speed'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'head'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MediaSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UploadFile'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'url'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Ehr';

  @override
  final EhrArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Ehr$Query parse(Map<String, dynamic> json) => Ehr$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class EhrsArguments extends JsonSerializable with EquatableMixin {
  EhrsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory EhrsArguments.fromJson(Map<String, dynamic> json) =>
      _$EhrsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$EhrsArgumentsToJson(this);
}

class EhrsQuery extends GraphQLQuery<Ehrs$Query, EhrsArguments> {
  EhrsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Ehrs'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Ehrs';

  @override
  final EhrsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Ehrs$Query parse(Map<String, dynamic> json) => Ehrs$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class EventArguments extends JsonSerializable with EquatableMixin {
  EventArguments({@required this.id});

  @override
  factory EventArguments.fromJson(Map<String, dynamic> json) =>
      _$EventArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$EventArgumentsToJson(this);
}

class EventQuery extends GraphQLQuery<Event$Query, EventArguments> {
  EventQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Event'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'event'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EventSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'price1'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'price2'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'price3'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'price4'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'price5'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'dicount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'password'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'content'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'eventPrices'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'price'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'prePrice'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EventSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Event'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'eventDateTime'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'eventType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'host'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'contentType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Event';

  @override
  final EventArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Event$Query parse(Map<String, dynamic> json) => Event$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class EventsArguments extends JsonSerializable with EquatableMixin {
  EventsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory EventsArguments.fromJson(Map<String, dynamic> json) =>
      _$EventsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$EventsArgumentsToJson(this);
}

class EventsQuery extends GraphQLQuery<Events$Query, EventsArguments> {
  EventsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Events'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'events'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EventSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EventSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Event'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'eventDateTime'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'eventType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'host'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'contentType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Events';

  @override
  final EventsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Events$Query parse(Map<String, dynamic> json) => Events$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ExerciseArguments extends JsonSerializable with EquatableMixin {
  ExerciseArguments({@required this.id});

  @override
  factory ExerciseArguments.fromJson(Map<String, dynamic> json) =>
      _$ExerciseArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ExerciseArgumentsToJson(this);
}

class ExerciseQuery extends GraphQLQuery<Exercise$Query, ExerciseArguments> {
  ExerciseQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Exercise'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'exercise'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ExerciseSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'content'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'age'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'level'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'questionnaire'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'subject'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ExerciseSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Exercise'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Exercise';

  @override
  final ExerciseArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Exercise$Query parse(Map<String, dynamic> json) =>
      Exercise$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ExercisesArguments extends JsonSerializable with EquatableMixin {
  ExercisesArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory ExercisesArguments.fromJson(Map<String, dynamic> json) =>
      _$ExercisesArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$ExercisesArgumentsToJson(this);
}

class ExercisesQuery extends GraphQLQuery<Exercises$Query, ExercisesArguments> {
  ExercisesQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Exercises'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'exercises'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ExerciseSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ExerciseSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Exercise'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Exercises';

  @override
  final ExercisesArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Exercises$Query parse(Map<String, dynamic> json) =>
      Exercises$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class FindMyChildArguments extends JsonSerializable with EquatableMixin {
  FindMyChildArguments({@required this.id});

  @override
  factory FindMyChildArguments.fromJson(Map<String, dynamic> json) =>
      _$FindMyChildArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$FindMyChildArgumentsToJson(this);
}

class FindMyChildQuery
    extends GraphQLQuery<FindMyChild$Query, FindMyChildArguments> {
  FindMyChildQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'FindMyChild'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'myChild'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ChildInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'FindMyChild';

  @override
  final FindMyChildArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  FindMyChild$Query parse(Map<String, dynamic> json) =>
      FindMyChild$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LocationArguments extends JsonSerializable with EquatableMixin {
  LocationArguments({@required this.id});

  @override
  factory LocationArguments.fromJson(Map<String, dynamic> json) =>
      _$LocationArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$LocationArgumentsToJson(this);
}

class LocationQuery extends GraphQLQuery<Location$Query, LocationArguments> {
  LocationQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Location'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'address'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'web'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'qrCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'post'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PostComponentSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'content'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Location';

  @override
  final LocationArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Location$Query parse(Map<String, dynamic> json) =>
      Location$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LocationsArguments extends JsonSerializable with EquatableMixin {
  LocationsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory LocationsArguments.fromJson(Map<String, dynamic> json) =>
      _$LocationsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$LocationsArgumentsToJson(this);
}

class LocationsQuery extends GraphQLQuery<Locations$Query, LocationsArguments> {
  LocationsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Locations'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'locations'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Locations';

  @override
  final LocationsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Locations$Query parse(Map<String, dynamic> json) =>
      Locations$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LoginArguments extends JsonSerializable with EquatableMixin {
  LoginArguments({@required this.input});

  @override
  factory LoginArguments.fromJson(Map<String, dynamic> json) =>
      _$LoginArgumentsFromJson(json);

  final UsersPermissionsLoginInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$LoginArgumentsToJson(this);
}

class LoginMutation extends GraphQLQuery<Login$Mutation, LoginArguments> {
  LoginMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'login'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'UsersPermissionsLoginInput'),
                  isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'login'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'jwt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserMe'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserMe'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsMe'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'accountInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'orders'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'OrderSimple'), directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'authorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AuthorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'teacherInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'TeacherInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'parentInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentInfoWithChildren'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'childInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ChildInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'counselorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CounselorInfoSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'doctorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'DoctorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'nurseInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'NurseInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patientInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PatientInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user_agreements'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'termOfServiceType'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'lastVersionDate'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'value'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AuthorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserAuthor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoWithChildren'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FragmentSpreadNode(
              name: NameNode(value: 'ParentInfoSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'relationToUser'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'login';

  @override
  final LoginArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Login$Mutation parse(Map<String, dynamic> json) =>
      Login$Mutation.fromJson(json);
}

class MeQuery extends GraphQLQuery<Me$Query, JsonSerializable> {
  MeQuery();

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Me'),
        variableDefinitions: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'me'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserMe'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'myOrdersCount'),
              alias: NameNode(value: 'orderCount'),
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserMe'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsMe'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'accountInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'orders'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'OrderSimple'), directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'authorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AuthorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'teacherInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'TeacherInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'parentInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentInfoWithChildren'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'childInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ChildInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'counselorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CounselorInfoSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'doctorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'DoctorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'nurseInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'NurseInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patientInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PatientInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user_agreements'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'termOfServiceType'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'lastVersionDate'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'value'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AuthorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserAuthor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoWithChildren'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FragmentSpreadNode(
              name: NameNode(value: 'ParentInfoSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'relationToUser'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Me';

  @override
  List<Object> get props => [document, operationName];
  @override
  Me$Query parse(Map<String, dynamic> json) => Me$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class MyAddressesArguments extends JsonSerializable with EquatableMixin {
  MyAddressesArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory MyAddressesArguments.fromJson(Map<String, dynamic> json) =>
      _$MyAddressesArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$MyAddressesArgumentsToJson(this);
}

class MyAddressesQuery
    extends GraphQLQuery<MyAddresses$Query, MyAddressesArguments> {
  MyAddressesQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'MyAddresses'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'findMyAddress'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'MyAddress'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'MyAddresses';

  @override
  final MyAddressesArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  MyAddresses$Query parse(Map<String, dynamic> json) =>
      MyAddresses$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class MyOrdersArguments extends JsonSerializable with EquatableMixin {
  MyOrdersArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory MyOrdersArguments.fromJson(Map<String, dynamic> json) =>
      _$MyOrdersArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$MyOrdersArgumentsToJson(this);
}

class MyOrdersQuery extends GraphQLQuery<MyOrders$Query, MyOrdersArguments> {
  MyOrdersQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'MyOrders'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'myOrders'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'MyOrders';

  @override
  final MyOrdersArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  MyOrders$Query parse(Map<String, dynamic> json) =>
      MyOrders$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class NurseArguments extends JsonSerializable with EquatableMixin {
  NurseArguments({@required this.id});

  @override
  factory NurseArguments.fromJson(Map<String, dynamic> json) =>
      _$NurseArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$NurseArgumentsToJson(this);
}

class NurseQuery extends GraphQLQuery<Nurse$Query, NurseArguments> {
  NurseQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Nurse'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Nurse';

  @override
  final NurseArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Nurse$Query parse(Map<String, dynamic> json) => Nurse$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class NursesArguments extends JsonSerializable with EquatableMixin {
  NursesArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory NursesArguments.fromJson(Map<String, dynamic> json) =>
      _$NursesArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$NursesArgumentsToJson(this);
}

class NursesQuery extends GraphQLQuery<Nurses$Query, NursesArguments> {
  NursesQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Nurses'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Nurses';

  @override
  final NursesArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Nurses$Query parse(Map<String, dynamic> json) => Nurses$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class NurseUpdateArguments extends JsonSerializable with EquatableMixin {
  NurseUpdateArguments({this.input});

  @override
  factory NurseUpdateArguments.fromJson(Map<String, dynamic> json) =>
      _$NurseUpdateArgumentsFromJson(json);

  final UpdateUserInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$NurseUpdateArgumentsToJson(this);
}

class NurseUpdateMutation
    extends GraphQLQuery<NurseUpdate$Mutation, NurseUpdateArguments> {
  NurseUpdateMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'NurseUpdate'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateUserInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateUser'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'nurseInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'NurseInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'NurseUpdate';

  @override
  final NurseUpdateArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  NurseUpdate$Mutation parse(Map<String, dynamic> json) =>
      NurseUpdate$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class OrderArguments extends JsonSerializable with EquatableMixin {
  OrderArguments({@required this.id});

  @override
  factory OrderArguments.fromJson(Map<String, dynamic> json) =>
      _$OrderArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$OrderArgumentsToJson(this);
}

class OrderQuery extends GraphQLQuery<Order$Query, OrderArguments> {
  OrderQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Order'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'order'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderDetail'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'OrderSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'shippingAddress'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Order';

  @override
  final OrderArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Order$Query parse(Map<String, dynamic> json) => Order$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class OrdersArguments extends JsonSerializable with EquatableMixin {
  OrdersArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory OrdersArguments.fromJson(Map<String, dynamic> json) =>
      _$OrdersArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$OrdersArgumentsToJson(this);
}

class OrdersQuery extends GraphQLQuery<Orders$Query, OrdersArguments> {
  OrdersQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Orders'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'orders'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderSimpleWithUser'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimpleWithUser'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'OrderSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Orders';

  @override
  final OrdersArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Orders$Query parse(Map<String, dynamic> json) => Orders$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class OrderStatusArguments extends JsonSerializable with EquatableMixin {
  OrderStatusArguments({@required this.id});

  @override
  factory OrderStatusArguments.fromJson(Map<String, dynamic> json) =>
      _$OrderStatusArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$OrderStatusArgumentsToJson(this);
}

class OrderStatusQuery
    extends GraphQLQuery<OrderStatus$Query, OrderStatusArguments> {
  OrderStatusQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'OrderStatus'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'order'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'status'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'OrderStatus';

  @override
  final OrderStatusArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  OrderStatus$Query parse(Map<String, dynamic> json) =>
      OrderStatus$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ParentArguments extends JsonSerializable with EquatableMixin {
  ParentArguments({@required this.id});

  @override
  factory ParentArguments.fromJson(Map<String, dynamic> json) =>
      _$ParentArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ParentArgumentsToJson(this);
}

class ParentQuery extends GraphQLQuery<Parent$Query, ParentArguments> {
  ParentQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Parent'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'parentInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ParentInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoDetail'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Parent';

  @override
  final ParentArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Parent$Query parse(Map<String, dynamic> json) => Parent$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ParentingArguments extends JsonSerializable with EquatableMixin {
  ParentingArguments({@required this.id});

  @override
  factory ParentingArguments.fromJson(Map<String, dynamic> json) =>
      _$ParentingArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ParentingArgumentsToJson(this);
}

class ParentingQuery extends GraphQLQuery<Parenting$Query, ParentingArguments> {
  ParentingQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Parenting'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'parenting'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentingDetail'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentingDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Parenting'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'ParentingSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'pdfFiles'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'media'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'data'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'provider'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentingSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Parenting'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Parenting';

  @override
  final ParentingArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Parenting$Query parse(Map<String, dynamic> json) =>
      Parenting$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ParentingsArguments extends JsonSerializable with EquatableMixin {
  ParentingsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory ParentingsArguments.fromJson(Map<String, dynamic> json) =>
      _$ParentingsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$ParentingsArgumentsToJson(this);
}

class ParentingsQuery
    extends GraphQLQuery<Parentings$Query, ParentingsArguments> {
  ParentingsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Parentings'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'parentings'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentingSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentingSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Parenting'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Parentings';

  @override
  final ParentingsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Parentings$Query parse(Map<String, dynamic> json) =>
      Parentings$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ParentsArguments extends JsonSerializable with EquatableMixin {
  ParentsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory ParentsArguments.fromJson(Map<String, dynamic> json) =>
      _$ParentsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$ParentsArgumentsToJson(this);
}

class ParentsQuery extends GraphQLQuery<Parents$Query, ParentsArguments> {
  ParentsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Parents'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'parentInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ParentInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Parents';

  @override
  final ParentsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Parents$Query parse(Map<String, dynamic> json) =>
      Parents$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ParentUpdateArguments extends JsonSerializable with EquatableMixin {
  ParentUpdateArguments({this.input});

  @override
  factory ParentUpdateArguments.fromJson(Map<String, dynamic> json) =>
      _$ParentUpdateArgumentsFromJson(json);

  final UpdateUserInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$ParentUpdateArgumentsToJson(this);
}

class ParentUpdateMutation
    extends GraphQLQuery<ParentUpdate$Mutation, ParentUpdateArguments> {
  ParentUpdateMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'ParentUpdate'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateUserInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateUser'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'parentInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'ParentInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'ParentUpdate';

  @override
  final ParentUpdateArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  ParentUpdate$Mutation parse(Map<String, dynamic> json) =>
      ParentUpdate$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PatientArguments extends JsonSerializable with EquatableMixin {
  PatientArguments({@required this.id});

  @override
  factory PatientArguments.fromJson(Map<String, dynamic> json) =>
      _$PatientArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$PatientArgumentsToJson(this);
}

class PatientQuery extends GraphQLQuery<Patient$Query, PatientArguments> {
  PatientQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Patient'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: [])
                    ])),
                FragmentSpreadNode(
                    name: NameNode(value: 'PatientInfoDetail'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Patient';

  @override
  final PatientArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Patient$Query parse(Map<String, dynamic> json) =>
      Patient$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PatientsArguments extends JsonSerializable with EquatableMixin {
  PatientsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory PatientsArguments.fromJson(Map<String, dynamic> json) =>
      _$PatientsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$PatientsArgumentsToJson(this);
}

class PatientsQuery extends GraphQLQuery<Patients$Query, PatientsArguments> {
  PatientsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Patients'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'patients'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PatientInfoSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Patients';

  @override
  final PatientsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Patients$Query parse(Map<String, dynamic> json) =>
      Patients$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethodArguments extends JsonSerializable with EquatableMixin {
  PaymentMethodArguments({@required this.id});

  @override
  factory PaymentMethodArguments.fromJson(Map<String, dynamic> json) =>
      _$PaymentMethodArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$PaymentMethodArgumentsToJson(this);
}

class PaymentMethodQuery
    extends GraphQLQuery<PaymentMethod$Query, PaymentMethodArguments> {
  PaymentMethodQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'PaymentMethod'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'paymentMethod'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PaymentMethodSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PaymentMethodSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentMethod'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'billingAddress'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'creditCard'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CreditCardSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'livemode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'stripeId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'MyAddress'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CreditCardSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'CreditCard'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'cvc'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expMonth'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expYear'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'number'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'PaymentMethod';

  @override
  final PaymentMethodArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  PaymentMethod$Query parse(Map<String, dynamic> json) =>
      PaymentMethod$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PaymentMethodsArguments extends JsonSerializable with EquatableMixin {
  PaymentMethodsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory PaymentMethodsArguments.fromJson(Map<String, dynamic> json) =>
      _$PaymentMethodsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$PaymentMethodsArgumentsToJson(this);
}

class PaymentMethodsQuery
    extends GraphQLQuery<PaymentMethods$Query, PaymentMethodsArguments> {
  PaymentMethodsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'PaymentMethods'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'paymentMethods'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PaymentMethodSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PaymentMethodSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentMethod'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'billingAddress'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'creditCard'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CreditCardSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'livemode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'stripeId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'MyAddress'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CreditCardSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'CreditCard'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'cvc'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expMonth'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expYear'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'number'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'PaymentMethods';

  @override
  final PaymentMethodsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  PaymentMethods$Query parse(Map<String, dynamic> json) =>
      PaymentMethods$Query.fromJson(json);
}

class PaymentPolicyQuery
    extends GraphQLQuery<PaymentPolicy$Query, JsonSerializable> {
  PaymentPolicyQuery();

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'PaymentPolicy'),
        variableDefinitions: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'paymentPolicy'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'policy'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'PaymentPolicy';

  @override
  List<Object> get props => [document, operationName];
  @override
  PaymentPolicy$Query parse(Map<String, dynamic> json) =>
      PaymentPolicy$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PlanArguments extends JsonSerializable with EquatableMixin {
  PlanArguments({@required this.id});

  @override
  factory PlanArguments.fromJson(Map<String, dynamic> json) =>
      _$PlanArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$PlanArgumentsToJson(this);
}

class PlanQuery extends GraphQLQuery<Plan$Query, PlanArguments> {
  PlanQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Plan'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'plan'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PlanDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'questionnaire'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'forPerson'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PlanDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Plan'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'PlanSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PlanSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Plan'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'assessment'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AssessmentQuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'exercises'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ExerciseSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'supplements'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'SupplementSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'parentings'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentingSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'articles'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ArticleSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'books'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'BookSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AssessmentQuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'AssessmentQuestionnaire'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'questionnaireOnly'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ExerciseSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Exercise'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'SupplementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Supplement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentingSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Parenting'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ArticleSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Article'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'media'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'published_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'BookSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Book'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Plan';

  @override
  final PlanArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Plan$Query parse(Map<String, dynamic> json) => Plan$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PlansArguments extends JsonSerializable with EquatableMixin {
  PlansArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory PlansArguments.fromJson(Map<String, dynamic> json) =>
      _$PlansArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$PlansArgumentsToJson(this);
}

class PlansQuery extends GraphQLQuery<Plans$Query, PlansArguments> {
  PlansQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Plans'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'plans'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PlanSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PlanSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Plan'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'assessment'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AssessmentQuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'exercises'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ExerciseSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'supplements'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'SupplementSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'parentings'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentingSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'articles'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ArticleSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'books'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'BookSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AssessmentQuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'AssessmentQuestionnaire'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'questionnaireOnly'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ExerciseSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Exercise'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'SupplementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Supplement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentingSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Parenting'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ArticleSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Article'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'media'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'published_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'BookSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Book'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Plans';

  @override
  final PlansArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Plans$Query parse(Map<String, dynamic> json) => Plans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PostArguments extends JsonSerializable with EquatableMixin {
  PostArguments({@required this.id});

  @override
  factory PostArguments.fromJson(Map<String, dynamic> json) =>
      _$PostArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$PostArgumentsToJson(this);
}

class PostQuery extends GraphQLQuery<Post$Query, PostArguments> {
  PostQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Post'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Post'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'entityRawId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'entityType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Post';

  @override
  final PostArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Post$Query parse(Map<String, dynamic> json) => Post$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PostsArguments extends JsonSerializable with EquatableMixin {
  PostsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory PostsArguments.fromJson(Map<String, dynamic> json) =>
      _$PostsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$PostsArgumentsToJson(this);
}

class PostsQuery extends GraphQLQuery<Posts$Query, PostsArguments> {
  PostsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Posts'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'posts'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Post'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'entityRawId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'entityType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Posts';

  @override
  final PostsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Posts$Query parse(Map<String, dynamic> json) => Posts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RegisterArguments extends JsonSerializable with EquatableMixin {
  RegisterArguments({@required this.input});

  @override
  factory RegisterArguments.fromJson(Map<String, dynamic> json) =>
      _$RegisterArgumentsFromJson(json);

  final UsersPermissionsRegisterInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$RegisterArgumentsToJson(this);
}

class RegisterMutation
    extends GraphQLQuery<Register$Mutation, RegisterArguments> {
  RegisterMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'register'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'UsersPermissionsRegisterInput'),
                  isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'register'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'jwt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserMe'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserMe'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsMe'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'accountInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'orders'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'OrderSimple'), directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'authorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AuthorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'teacherInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'TeacherInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'parentInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentInfoWithChildren'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'childInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ChildInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'counselorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CounselorInfoSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'doctorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'DoctorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'nurseInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'NurseInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patientInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PatientInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user_agreements'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'termOfServiceType'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'lastVersionDate'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'value'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AuthorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserAuthor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoWithChildren'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FragmentSpreadNode(
              name: NameNode(value: 'ParentInfoSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'relationToUser'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'register';

  @override
  final RegisterArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Register$Mutation parse(Map<String, dynamic> json) =>
      Register$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoteReminderArguments extends JsonSerializable with EquatableMixin {
  RemoteReminderArguments({@required this.id});

  @override
  factory RemoteReminderArguments.fromJson(Map<String, dynamic> json) =>
      _$RemoteReminderArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$RemoteReminderArgumentsToJson(this);
}

class RemoteReminderQuery
    extends GraphQLQuery<RemoteReminder$Query, RemoteReminderArguments> {
  RemoteReminderQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'RemoteReminder'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'reminder'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'body'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'dateTime'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'related'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserSimple'), directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'source'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'sourceId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'RemoteReminder';

  @override
  final RemoteReminderArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  RemoteReminder$Query parse(Map<String, dynamic> json) =>
      RemoteReminder$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoteRemindersArguments extends JsonSerializable with EquatableMixin {
  RemoteRemindersArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory RemoteRemindersArguments.fromJson(Map<String, dynamic> json) =>
      _$RemoteRemindersArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$RemoteRemindersArgumentsToJson(this);
}

class RemoteRemindersQuery
    extends GraphQLQuery<RemoteReminders$Query, RemoteRemindersArguments> {
  RemoteRemindersQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'RemoteReminders'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'reminders'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ReminderSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ReminderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Reminder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'body'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'related'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'RemoteReminders';

  @override
  final RemoteRemindersArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  RemoteReminders$Query parse(Map<String, dynamic> json) =>
      RemoteReminders$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RequestPaymentArguments extends JsonSerializable with EquatableMixin {
  RequestPaymentArguments({this.input});

  @override
  factory RequestPaymentArguments.fromJson(Map<String, dynamic> json) =>
      _$RequestPaymentArgumentsFromJson(json);

  final RequestOrderPayInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$RequestPaymentArgumentsToJson(this);
}

class RequestPaymentMutation
    extends GraphQLQuery<RequestPayment$Mutation, RequestPaymentArguments> {
  RequestPaymentMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'RequestPayment'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'requestOrderPayInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'requestOrderPay'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'ret'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'order'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'OrderDetail'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'OrderSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'shippingAddress'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'RequestPayment';

  @override
  final RequestPaymentArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  RequestPayment$Mutation parse(Map<String, dynamic> json) =>
      RequestPayment$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class SupplementArguments extends JsonSerializable with EquatableMixin {
  SupplementArguments({@required this.id});

  @override
  factory SupplementArguments.fromJson(Map<String, dynamic> json) =>
      _$SupplementArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$SupplementArgumentsToJson(this);
}

class SupplementQuery
    extends GraphQLQuery<Supplement$Query, SupplementArguments> {
  SupplementQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Supplement'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'supplement'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'SupplementDetaile'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'SupplementDetaile'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Supplement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'SupplementSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'forPerson'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'SupplementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Supplement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Supplement';

  @override
  final SupplementArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Supplement$Query parse(Map<String, dynamic> json) =>
      Supplement$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class SupplementsArguments extends JsonSerializable with EquatableMixin {
  SupplementsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory SupplementsArguments.fromJson(Map<String, dynamic> json) =>
      _$SupplementsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$SupplementsArgumentsToJson(this);
}

class SupplementsQuery
    extends GraphQLQuery<Supplements$Query, SupplementsArguments> {
  SupplementsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Supplements'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'supplements'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'SupplementSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'SupplementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Supplement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Supplements';

  @override
  final SupplementsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Supplements$Query parse(Map<String, dynamic> json) =>
      Supplements$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TeacherArguments extends JsonSerializable with EquatableMixin {
  TeacherArguments({@required this.id});

  @override
  factory TeacherArguments.fromJson(Map<String, dynamic> json) =>
      _$TeacherArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$TeacherArgumentsToJson(this);
}

class TeacherQuery extends GraphQLQuery<Teacher$Query, TeacherArguments> {
  TeacherQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Teacher'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserDetail'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'TeacherInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Teacher';

  @override
  final TeacherArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Teacher$Query parse(Map<String, dynamic> json) =>
      Teacher$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TeachersArguments extends JsonSerializable with EquatableMixin {
  TeachersArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory TeachersArguments.fromJson(Map<String, dynamic> json) =>
      _$TeachersArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$TeachersArgumentsToJson(this);
}

class TeachersQuery extends GraphQLQuery<Teachers$Query, TeachersArguments> {
  TeachersQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Teachers'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'TeacherInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Teachers';

  @override
  final TeachersArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Teachers$Query parse(Map<String, dynamic> json) =>
      Teachers$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TeacherUpdateArguments extends JsonSerializable with EquatableMixin {
  TeacherUpdateArguments({this.input});

  @override
  factory TeacherUpdateArguments.fromJson(Map<String, dynamic> json) =>
      _$TeacherUpdateArgumentsFromJson(json);

  final UpdateUserInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$TeacherUpdateArgumentsToJson(this);
}

class TeacherUpdateMutation
    extends GraphQLQuery<TeacherUpdate$Mutation, TeacherUpdateArguments> {
  TeacherUpdateMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'TeacherUpdate'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateUserInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateUser'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'teacherInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'TeacherInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'TeacherUpdate';

  @override
  final TeacherUpdateArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  TeacherUpdate$Mutation parse(Map<String, dynamic> json) =>
      TeacherUpdate$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class BatchTelemetryArguments extends JsonSerializable with EquatableMixin {
  BatchTelemetryArguments({@required this.input});

  @override
  factory BatchTelemetryArguments.fromJson(Map<String, dynamic> json) =>
      _$BatchTelemetryArgumentsFromJson(json);

  final BatchTelemetryInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$BatchTelemetryArgumentsToJson(this);
}

class BatchTelemetryMutation
    extends GraphQLQuery<BatchTelemetry$Mutation, BatchTelemetryArguments> {
  BatchTelemetryMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'batchTelemetry'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'batchTelemetryInput'),
                  isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'batchTelemetry'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'successCount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'batchTelemetry';

  @override
  final BatchTelemetryArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  BatchTelemetry$Mutation parse(Map<String, dynamic> json) =>
      BatchTelemetry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateAnswerArguments extends JsonSerializable with EquatableMixin {
  UpdateAnswerArguments({this.input});

  @override
  factory UpdateAnswerArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateAnswerArgumentsFromJson(json);

  final UpdateQuestionnaireAnswerInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateAnswerArgumentsToJson(this);
}

class UpdateAnswerMutation
    extends GraphQLQuery<UpdateAnswer$Mutation, UpdateAnswerArguments> {
  UpdateAnswerMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateAnswer'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateQuestionnaireAnswerInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateQuestionnaireAnswer'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'questionnaireAnswer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'QuestionnaireAnswerSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateAnswer';

  @override
  final UpdateAnswerArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateAnswer$Mutation parse(Map<String, dynamic> json) =>
      UpdateAnswer$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateCreditCardArguments extends JsonSerializable with EquatableMixin {
  UpdateCreditCardArguments({@required this.input});

  @override
  factory UpdateCreditCardArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateCreditCardArgumentsFromJson(json);

  final UpdateCreditCardInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateCreditCardArgumentsToJson(this);
}

class UpdateCreditCardMutation
    extends GraphQLQuery<UpdateCreditCard$Mutation, UpdateCreditCardArguments> {
  UpdateCreditCardMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateCreditCard'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateCreditCardInput'),
                  isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateCreditCard'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'creditCard'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CreditCardSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CreditCardSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'CreditCard'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAddress'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'cvc'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expMonth'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'expYear'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'number'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FragmentSpreadNode(
              name: NameNode(value: 'MyAddress'), directives: []),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateCreditCard';

  @override
  final UpdateCreditCardArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateCreditCard$Mutation parse(Map<String, dynamic> json) =>
      UpdateCreditCard$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateEhrArguments extends JsonSerializable with EquatableMixin {
  UpdateEhrArguments({this.input});

  @override
  factory UpdateEhrArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateEhrArgumentsFromJson(json);

  final UpdateEhrInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateEhrArgumentsToJson(this);
}

class UpdateEhrMutation
    extends GraphQLQuery<UpdateEhr$Mutation, UpdateEhrArguments> {
  UpdateEhrMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateEhr'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateEhrInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateEhr'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'ehr'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'EhrSimple'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'source'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'source_id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'medias'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'MediaSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'data'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'questionnaire_answer'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(
                                    value: 'QuestionnaireAnswerSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'summaries'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'rating'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'type'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'subject'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null)
                          ])),
                      FieldNode(
                          name: NameNode(value: 'office_comments'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MediaSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UploadFile'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'url'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireAnswerSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'QuestionnaireAnswer'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'questionnaire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'QuestionnaireSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'submitted'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'QuestionnaireSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Questionnaire'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'data'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'displayName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateEhr';

  @override
  final UpdateEhrArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateEhr$Mutation parse(Map<String, dynamic> json) =>
      UpdateEhr$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateMeArguments extends JsonSerializable with EquatableMixin {
  UpdateMeArguments({this.input});

  @override
  factory UpdateMeArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateMeArgumentsFromJson(json);

  final UpdateMeInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateMeArgumentsToJson(this);
}

class UpdateMeMutation
    extends GraphQLQuery<UpdateMe$Mutation, UpdateMeArguments> {
  UpdateMeMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateMe'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateMeInput'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateMe'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserMe'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserMe'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsMe'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'accountInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'orders'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'OrderSimple'), directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'authorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'AuthorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'teacherInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'TeacherInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'parentInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ParentInfoWithChildren'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'childInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'ChildInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'counselorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CounselorInfoSimple'),
                    directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'doctorInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'DoctorInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'nurseInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'NurseInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patientInfo'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PatientInfoSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user_agreements'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'termOfServiceType'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'lastVersionDate'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'value'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrder'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'uuid'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'description'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'expire'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needpayPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'paiedPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'items'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'OrderItemSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'OrderItemSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentOrderItem'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'additional'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'picture'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'preUnitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'quantity'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sourceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'unitPrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'AuthorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserAuthor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoWithChildren'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FragmentSpreadNode(
              name: NameNode(value: 'ParentInfoSimple'), directives: []),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'relationToUser'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateMe';

  @override
  final UpdateMeArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateMe$Mutation parse(Map<String, dynamic> json) =>
      UpdateMe$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyAddressArguments extends JsonSerializable with EquatableMixin {
  UpdateMyAddressArguments({this.input});

  @override
  factory UpdateMyAddressArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateMyAddressArgumentsFromJson(json);

  final UpdateMyAddressInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateMyAddressArgumentsToJson(this);
}

class UpdateMyAddressMutation
    extends GraphQLQuery<UpdateMyAddress$Mutation, UpdateMyAddressArguments> {
  UpdateMyAddressMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateMyAddress'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateMyAddressInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateMyAddress'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'userAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'MyAddress'), directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'MyAddress'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAddress'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'tag'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Address'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Address'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentDataAddress'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'address1'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address2'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address3'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'city'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'country'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'state'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'postalCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateMyAddress';

  @override
  final UpdateMyAddressArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateMyAddress$Mutation parse(Map<String, dynamic> json) =>
      UpdateMyAddress$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateMyChildArguments extends JsonSerializable with EquatableMixin {
  UpdateMyChildArguments({@required this.input});

  @override
  factory UpdateMyChildArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateMyChildArgumentsFromJson(json);

  final UpdateChildInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateMyChildArgumentsToJson(this);
}

class UpdateMyChildMutation
    extends GraphQLQuery<UpdateMyChild$Mutation, UpdateMyChildArguments> {
  UpdateMyChildMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateMyChild'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateChildInput'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateChild'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'user'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'UserDetail'), directives: []),
                      FieldNode(
                          name: NameNode(value: 'childInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'ChildInfoSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'patientInfo'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'PatientInfoSimple'),
                                directives: [])
                          ]))
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'blocked'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'countryCode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'organization_units'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'phone'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'provider'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'qrUrl'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'second_email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateMyChild';

  @override
  final UpdateMyChildArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateMyChild$Mutation parse(Map<String, dynamic> json) =>
      UpdateMyChild$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdatePatientArguments extends JsonSerializable with EquatableMixin {
  UpdatePatientArguments({this.input});

  @override
  factory UpdatePatientArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdatePatientArgumentsFromJson(json);

  final UpdatePatientInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdatePatientArgumentsToJson(this);
}

class UpdatePatientMutation
    extends GraphQLQuery<UpdatePatient$Mutation, UpdatePatientArguments> {
  UpdatePatientMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdatePatient'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updatePatientInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updatePatient'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'patient'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoDetail'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdatePatient';

  @override
  final UpdatePatientArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdatePatient$Mutation parse(Map<String, dynamic> json) =>
      UpdatePatient$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UploadArguments extends JsonSerializable with EquatableMixin {
  UploadArguments(
      {this.ref, this.refId, this.field, this.source, @required this.file});

  @override
  factory UploadArguments.fromJson(Map<String, dynamic> json) =>
      _$UploadArgumentsFromJson(json);

  final String ref;

  final String refId;

  final String field;

  final String source;

  @JsonKey(
      fromJson: fromGraphQLUploadToDartMultipartFile,
      toJson: fromDartMultipartFileToGraphQLUpload)
  final MultipartFile file;

  @override
  List<Object> get props => [ref, refId, field, source, file];
  @override
  Map<String, dynamic> toJson() => _$UploadArgumentsToJson(this);
}

class UploadMutation extends GraphQLQuery<Upload$Mutation, UploadArguments> {
  UploadMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'Upload'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'ref')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'refId')),
              type:
                  NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'field')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'source')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'file')),
              type: NamedTypeNode(
                  name: NameNode(value: 'Upload'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'upload'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'ref'),
                    value: VariableNode(name: NameNode(value: 'ref'))),
                ArgumentNode(
                    name: NameNode(value: 'refId'),
                    value: VariableNode(name: NameNode(value: 'refId'))),
                ArgumentNode(
                    name: NameNode(value: 'field'),
                    value: VariableNode(name: NameNode(value: 'field'))),
                ArgumentNode(
                    name: NameNode(value: 'source'),
                    value: VariableNode(name: NameNode(value: 'source'))),
                ArgumentNode(
                    name: NameNode(value: 'file'),
                    value: VariableNode(name: NameNode(value: 'file')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'created_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'alternativeText'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'hash'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'mime'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'previewUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'provider'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'provider_metadata'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Upload';

  @override
  final UploadArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Upload$Mutation parse(Map<String, dynamic> json) =>
      Upload$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserArguments extends JsonSerializable with EquatableMixin {
  UserArguments({@required this.id});

  @override
  factory UserArguments.fromJson(Map<String, dynamic> json) =>
      _$UserArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserArgumentsToJson(this);
}

class UserQuery extends GraphQLQuery<User$Query, UserArguments> {
  UserQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'User'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'blocked'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'confirmed'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'created_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'organization_units'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'displayName'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ])),
                FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'provider'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'id'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'permissions'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'enabled'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null),
                            FieldNode(
                                name: NameNode(value: 'action'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null)
                          ]))
                    ])),
                FieldNode(
                    name: NameNode(value: 'second_email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'sex'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'TeacherInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'parentInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ParentInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ChildInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ]))
  ]);

  @override
  final String operationName = 'User';

  @override
  final UserArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  User$Query parse(Map<String, dynamic> json) => User$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UsersArguments extends JsonSerializable with EquatableMixin {
  UsersArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory UsersArguments.fromJson(Map<String, dynamic> json) =>
      _$UsersArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$UsersArgumentsToJson(this);
}

class UsersQuery extends GraphQLQuery<Users$Query, UsersArguments> {
  UsersQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Users'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'users'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'TeacherInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'parentInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ParentInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'patientInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'PatientInfoSimple'),
                          directives: [])
                    ])),
                FieldNode(
                    name: NameNode(value: 'childInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'ChildInfoSimple'),
                          directives: [])
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'TeacherInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserTeacher'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'school'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'DoctorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserDoctor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'LocationSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Location'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'address'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'NurseInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserNurse'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CounselorInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserCounselor'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'location'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'LocationSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ParentInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserParent'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'children'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PatientInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Patient'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'doctor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'doctorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'DoctorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'nurse'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'nurseInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'NurseInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'counselor'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'counselorInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FragmentSpreadNode(
                          name: NameNode(value: 'CounselorInfoSimple'),
                          directives: [])
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'ehrs'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'EhrSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'EhrSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(name: NameNode(value: 'Ehr'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'created_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'user'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'patient'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'meetingId'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'subject'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'type'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'ChildInfoSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentUserChild'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'relationToUser'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'teacher'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'teacherInfo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: '__typename'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'parent'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FragmentSpreadNode(
                    name: NameNode(value: 'UserSimple'), directives: [])
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Users';

  @override
  final UsersArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Users$Query parse(Map<String, dynamic> json) => Users$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserAgreementArguments extends JsonSerializable with EquatableMixin {
  UserAgreementArguments({@required this.id});

  @override
  factory UserAgreementArguments.fromJson(Map<String, dynamic> json) =>
      _$UserAgreementArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserAgreementArgumentsToJson(this);
}

class UserAgreementQuery
    extends GraphQLQuery<UserAgreement$Query, UserAgreementArguments> {
  UserAgreementQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'UserAgreement'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'userAgreement'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAgreementDetail'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAgreementDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAgreement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'content'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FragmentSpreadNode(
              name: NameNode(value: 'UserAgreementSimple'), directives: [])
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAgreementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAgreement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'lastVersionDate'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'termOfServiceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'value'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UserAgreement';

  @override
  final UserAgreementArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UserAgreement$Query parse(Map<String, dynamic> json) =>
      UserAgreement$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserAgreementsArguments extends JsonSerializable with EquatableMixin {
  UserAgreementsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory UserAgreementsArguments.fromJson(Map<String, dynamic> json) =>
      _$UserAgreementsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$UserAgreementsArgumentsToJson(this);
}

class UserAgreementsQuery
    extends GraphQLQuery<UserAgreements$Query, UserAgreementsArguments> {
  UserAgreementsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'UserAgreements'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'userAgreements'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'UserAgreementSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserAgreementSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UserAgreement'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'lastVersionDate'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'termOfServiceType'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'value'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_at'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UserAgreements';

  @override
  final UserAgreementsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UserAgreements$Query parse(Map<String, dynamic> json) =>
      UserAgreements$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserAggreementArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserAggreementArguments({this.input});

  @override
  factory CreateUserAggreementArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserAggreementArgumentsFromJson(json);

  final CreateUserAgreementInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$CreateUserAggreementArgumentsToJson(this);
}

class CreateUserAggreementMutation extends GraphQLQuery<
    CreateUserAggreement$Mutation, CreateUserAggreementArguments> {
  CreateUserAggreementMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'CreateUserAggreement'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'createUserAgreementInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'createUserAgreement'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'userAgreement'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'user'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'UserSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'lastVersionDate'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'value'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'termOfServiceType'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'CreateUserAggreement';

  @override
  final CreateUserAggreementArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  CreateUserAggreement$Mutation parse(Map<String, dynamic> json) =>
      CreateUserAggreement$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserAggreementArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserAggreementArguments({this.input});

  @override
  factory UpdateUserAggreementArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserAggreementArgumentsFromJson(json);

  final UpdateUserAgreementInput input;

  @override
  List<Object> get props => [input];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserAggreementArgumentsToJson(this);
}

class UpdateUserAggreementMutation extends GraphQLQuery<
    UpdateUserAggreement$Mutation, UpdateUserAggreementArguments> {
  UpdateUserAggreementMutation({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.mutation,
        name: NameNode(value: 'UpdateUserAggreement'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'input')),
              type: NamedTypeNode(
                  name: NameNode(value: 'updateUserAgreementInput'),
                  isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'updateUserAgreement'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'input'),
                    value: VariableNode(name: NameNode(value: 'input')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'userAgreement'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'user'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: SelectionSetNode(selections: [
                            FragmentSpreadNode(
                                name: NameNode(value: 'UserSimple'),
                                directives: [])
                          ])),
                      FieldNode(
                          name: NameNode(value: 'lastVersionDate'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'value'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null),
                      FieldNode(
                          name: NameNode(value: 'termOfServiceType'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'UserSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'UsersPermissionsUser'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'username'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'fullName'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'email'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'sex'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'birthday'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'role'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'confirmed'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'UpdateUserAggreement';

  @override
  final UpdateUserAggreementArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  UpdateUserAggreement$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserAggreement$Mutation.fromJson(json);
}

class VersionQuery extends GraphQLQuery<Version$Query, JsonSerializable> {
  VersionQuery();

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Version'),
        variableDefinitions: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'version'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'updated_at'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ]))
        ]))
  ]);

  @override
  final String operationName = 'Version';

  @override
  List<Object> get props => [document, operationName];
  @override
  Version$Query parse(Map<String, dynamic> json) =>
      Version$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WebinarArguments extends JsonSerializable with EquatableMixin {
  WebinarArguments({@required this.id});

  @override
  factory WebinarArguments.fromJson(Map<String, dynamic> json) =>
      _$WebinarArgumentsFromJson(json);

  final String id;

  @override
  List<Object> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$WebinarArgumentsToJson(this);
}

class WebinarQuery extends GraphQLQuery<Webinar$Query, WebinarArguments> {
  WebinarQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Webinar'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'id')),
              type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'webinar'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'id'),
                    value: VariableNode(name: NameNode(value: 'id')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'WebinarSimple'), directives: []),
                FieldNode(
                    name: NameNode(value: 'content'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'subject'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'type'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'WebinarSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Webinar'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'schedule'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Webinar';

  @override
  final WebinarArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Webinar$Query parse(Map<String, dynamic> json) =>
      Webinar$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WebinarsArguments extends JsonSerializable with EquatableMixin {
  WebinarsArguments({this.sort, this.limit, this.start, this.where});

  @override
  factory WebinarsArguments.fromJson(Map<String, dynamic> json) =>
      _$WebinarsArgumentsFromJson(json);

  final String sort;

  final int limit;

  final int start;

  final Object where;

  @override
  List<Object> get props => [sort, limit, start, where];
  @override
  Map<String, dynamic> toJson() => _$WebinarsArgumentsToJson(this);
}

class WebinarsQuery extends GraphQLQuery<Webinars$Query, WebinarsArguments> {
  WebinarsQuery({this.variables});

  @override
  final DocumentNode document = DocumentNode(definitions: [
    OperationDefinitionNode(
        type: OperationType.query,
        name: NameNode(value: 'Webinars'),
        variableDefinitions: [
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'sort')),
              type: NamedTypeNode(
                  name: NameNode(value: 'String'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'limit')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'start')),
              type:
                  NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: []),
          VariableDefinitionNode(
              variable: VariableNode(name: NameNode(value: 'where')),
              type: NamedTypeNode(
                  name: NameNode(value: 'JSON'), isNonNull: false),
              defaultValue: DefaultValueNode(value: null),
              directives: [])
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'webinars'),
              alias: null,
              arguments: [
                ArgumentNode(
                    name: NameNode(value: 'sort'),
                    value: VariableNode(name: NameNode(value: 'sort'))),
                ArgumentNode(
                    name: NameNode(value: 'limit'),
                    value: VariableNode(name: NameNode(value: 'limit'))),
                ArgumentNode(
                    name: NameNode(value: 'start'),
                    value: VariableNode(name: NameNode(value: 'start'))),
                ArgumentNode(
                    name: NameNode(value: 'where'),
                    value: VariableNode(name: NameNode(value: 'where')))
              ],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'WebinarSimple'), directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'WebinarSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Webinar'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'schedule'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'meetingId'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'post'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'PostComponentSimple'),
                    directives: [])
              ]))
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'PostComponentSimple'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'ComponentContentPost'),
                isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'title'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'subtitle'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'image'),
              alias: NameNode(value: 'medias'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'url'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'formats'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'ext'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'caption'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'categories'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'CategoryDetail'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'recommended'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'updated_day'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'vip_color'),
              alias: NameNode(value: 'vip_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'cover_background_color'),
              alias: NameNode(value: 'cover_background_color'),
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null)
              ])),
          FieldNode(
              name: NameNode(value: 'price'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'trademark'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'image'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'url'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'currency'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FragmentSpreadNode(
                    name: NameNode(value: 'Currency'), directives: [])
              ])),
          FieldNode(
              name: NameNode(value: 'author'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null),
                FieldNode(
                    name: NameNode(value: 'role'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                          name: NameNode(value: 'name'),
                          alias: null,
                          arguments: [],
                          directives: [],
                          selectionSet: null)
                    ]))
              ])),
          FieldNode(
              name: NameNode(value: 'vipText'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'prePrice'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rating'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'needShipping'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'CategoryDetail'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'Category'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ])),
    FragmentDefinitionNode(
        name: NameNode(value: 'Currency'),
        typeCondition: TypeConditionNode(
            on: NamedTypeNode(
                name: NameNode(value: 'PaymentCurrency'), isNonNull: false)),
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
              name: NameNode(value: 'code'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'decimal_digits'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'name_plural'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'rounding'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null),
          FieldNode(
              name: NameNode(value: 'symbol_native'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null)
        ]))
  ]);

  @override
  final String operationName = 'Webinars';

  @override
  final WebinarsArguments variables;

  @override
  List<Object> get props => [document, operationName, variables];
  @override
  Webinars$Query parse(Map<String, dynamic> json) =>
      Webinars$Query.fromJson(json);
}
